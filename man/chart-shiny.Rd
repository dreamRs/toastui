% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chart.R
\name{chart-shiny}
\alias{chart-shiny}
\alias{chartOutput}
\alias{renderChart}
\title{Shiny bindings for \code{chart}}
\usage{
chartOutput(outputId, width = "100\%", height = "400px")

renderChart(expr, env = parent.frame(), quoted = FALSE)
}
\arguments{
\item{outputId}{output variable to read from}

\item{width, height}{Must be a valid CSS unit (like \code{'100\%'},
\code{'400px'}, \code{'auto'}) or a number, which will be coerced to a
string and have \code{'px'} appended.}

\item{expr}{An expression that generates a chart.}

\item{env}{The environment in which to evaluate \code{expr}.}

\item{quoted}{Is \code{expr} a quoted expression (with \code{quote()})? This
is useful if you want to save an expression in a variable.}
}
\description{
Output and render functions for using \code{\link{chart}} within Shiny
applications and interactive Rmd documents.
}
\examples{
library(toastui)
library(shiny)
library(palmerpenguins)

ui <- fluidPage(
  fluidRow(
    column(
      width = 8, offset = 2,
      tags$h2("Chart example"),
      chartOutput("mychart1"),
      chartOutput("mychart2")
    )
  )
)

server <- function(input, output, session) {
  
  output$mychart1 <- renderChart({
    table(species = penguins$species) \%>\% 
      chart(caes(species, Freq), type = "column")
  })
  
  output$mychart2 <- renderChart({
    chart(
      penguins, 
      caes(x = bill_length_mm, y = body_mass_g, color = species),
      type = "scatter"
    )
  })
}

if (interactive())
  shinyApp(ui, server)
}
