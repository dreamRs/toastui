(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("HTMLWidgets"));
	else if(typeof define === 'function' && define.amd)
		define(["HTMLWidgets"], factory);
	else if(typeof exports === 'object')
		exports["chart"] = factory(require("HTMLWidgets"));
	else
		root["chart"] = factory(root["HTMLWidgets"]);
})(self, function(__WEBPACK_EXTERNAL_MODULE_widgets__) {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@toast-ui/chart/dist/esm/animator.js":
/*!***********************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/animator.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Animator)
/* harmony export */ });
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");

class Animator {
    constructor() {
        this.anims = [];
        this.state = 'IDLE';
        this.requestId = null;
        this.firstRendering = true;
    }
    add({ chart, duration, requester, onCompleted = () => { }, onFrame = (delta) => {
        if (!this.firstRendering) {
            chart.update(delta);
        }
        if (this.firstRendering) {
            chart.initUpdate(delta);
            if (delta === 1) {
                this.firstRendering = false;
            }
        }
    }, }) {
        if (this.anims.length) {
            this.reset();
        }
        if (this.state === 'IDLE') {
            this.anims.push({
                chart,
                requester,
                duration,
                onFrame,
                onCompleted,
                start: null,
                current: null,
                completed: false,
            });
            this.start();
        }
    }
    reset() {
        this.anims.forEach((anim) => {
            anim.current = 1;
            anim.onFrame(anim.current);
            anim.completed = true;
        });
        this.anims = [];
        this.cancelAnimFrame();
        this.state = 'IDLE';
        this.requestId = null;
    }
    start() {
        if (this.anims.length) {
            this.state = 'RUNNING';
            this.runFrame();
        }
    }
    runFrame() {
        this.requestId = window.requestAnimationFrame((timestamp) => {
            this.runAnims(timestamp);
        });
    }
    runAnims(timestamp) {
        this.next(timestamp);
        if (this.anims.length) {
            this.runFrame();
        }
        else {
            this.state = 'IDLE';
            this.requestId = null;
        }
    }
    next(timestamp) {
        this.anims.forEach((anim) => {
            if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNull)(anim.start)) {
                anim.start = timestamp;
            }
            Object.defineProperty(anim.chart, '___animId___', {
                value: timestamp,
                enumerable: false,
                writable: false,
                configurable: true,
            });
            anim.current = anim.duration ? Math.min((timestamp - anim.start) / anim.duration, 1) : 1;
            anim.onFrame(anim.current);
            anim.completed = anim.current === 1;
        });
        this.anims.forEach((anim) => {
            if (anim.chart.___animId___ === timestamp) {
                anim.chart.draw();
                delete anim.chart.___animId___;
            }
            if (anim.completed) {
                this.cancelAnimFrame();
                anim.onCompleted();
                anim.chart.eventBus.emit('animationCompleted', anim.requester);
            }
        });
        this.anims = this.anims.filter((anim) => !anim.completed);
    }
    cancelAnimFrame() {
        if (this.requestId) {
            window.cancelAnimationFrame(this.requestId);
        }
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js":
/*!***************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TICK_SIZE": () => (/* binding */ TICK_SIZE),
/* harmony export */   "tick": () => (/* binding */ tick)
/* harmony export */ });
/* harmony import */ var _basic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");

const TICK_SIZE = 5;
function tick(ctx, tickModel) {
    const { x, y, isYAxis, tickSize = TICK_SIZE, strokeStyle, lineWidth } = tickModel;
    const lineModel = {
        type: 'line',
        x,
        y,
        x2: x,
        y2: y,
        strokeStyle,
        lineWidth,
    };
    if (isYAxis) {
        lineModel.x2 += tickSize;
    }
    else {
        lineModel.y2 += tickSize;
    }
    (0,_basic__WEBPACK_IMPORTED_MODULE_0__.line)(ctx, lineModel);
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js":
/*!****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clipRectArea": () => (/* binding */ clipRectArea),
/* harmony export */   "pathRect": () => (/* binding */ pathRect),
/* harmony export */   "circle": () => (/* binding */ circle),
/* harmony export */   "line": () => (/* binding */ line),
/* harmony export */   "rect": () => (/* binding */ rect),
/* harmony export */   "arc": () => (/* binding */ arc)
/* harmony export */ });
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _helpers_sector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/sector */ "./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js");


const circleStyle = {
    default: {
        strokeStyle: '#ffffff',
        lineWidth: 2,
    },
    plot: {
        lineWidth: 1,
        strokeStyle: 'rgba(0, 0, 0, 0.05)',
    },
};
const rectStyle = {
    shadow: {
        shadowColor: 'rgba(0, 0, 0, 0.3)',
        shadowOffsetX: 2,
        shadowOffsetY: 2,
        shadowBlur: 6,
    },
};
function clipRectArea(ctx, clipRectAreaModel) {
    const { x, y, width, height } = clipRectAreaModel;
    ctx.beginPath();
    ctx.rect(x, y, width, height);
    ctx.clip();
}
function pathRect(ctx, pathRectModel) {
    const { x, y, width, height, radius = 0, stroke: strokeStyle = 'black', fill = '', lineWidth = 1, } = pathRectModel;
    ctx.beginPath();
    ctx.moveTo(x + radius, y);
    ctx.lineTo(x + width - radius, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
    ctx.lineTo(x + width, y + height - radius);
    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
    ctx.lineTo(x + radius, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
    ctx.lineTo(x, y + radius);
    ctx.quadraticCurveTo(x, y, x + radius, y);
    ctx.closePath();
    if (fill) {
        (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.fillStyle)(ctx, fill);
    }
    (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.strokeWithOptions)(ctx, { lineWidth, strokeStyle });
}
function circle(ctx, circleModel) {
    const { x, y, style, radius, color, angle = { start: 0, end: Math.PI * 2 }, borderWidth: lineWidth, borderColor: strokeStyle, } = circleModel;
    ctx.beginPath();
    if (style) {
        const styleObj = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.makeStyleObj)(style, circleStyle);
        Object.keys(styleObj).forEach((key) => {
            ctx[key] = styleObj[key];
        });
    }
    ctx.arc(x, y, radius, angle.start, angle.end, true);
    (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.strokeWithOptions)(ctx, { lineWidth, strokeStyle });
    (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.fillStyle)(ctx, color);
    ctx.closePath();
}
function line(ctx, lineModel) {
    const { x, y, x2, y2, strokeStyle, lineWidth, dashSegments } = lineModel;
    ctx.beginPath();
    if (dashSegments) {
        (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.setLineDash)(ctx, dashSegments);
    }
    ctx.moveTo(x, y);
    ctx.lineTo(x2, y2);
    (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.strokeWithOptions)(ctx, { strokeStyle, lineWidth });
    ctx.closePath();
}
function rect(ctx, model) {
    const { x, y, width, height, style, thickness = 0, color, borderColor = '#ffffff' } = model;
    ctx.beginPath();
    if (style) {
        const styleObj = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.makeStyleObj)(style, rectStyle);
        Object.keys(styleObj).forEach((key) => {
            ctx[key] = styleObj[key];
        });
    }
    if (thickness) {
        ctx.fillStyle = borderColor;
        ctx.fillRect(x - thickness, y - thickness, width + thickness * 2, height + thickness * 2);
        ctx.shadowColor = 'rgba(0, 0, 0, 0)'; // reset shadow color
    }
    ctx.rect(x, y, width, height);
    (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.fillStyle)(ctx, color);
}
function arc(ctx, arcModel) {
    const { x, y, angle: { start, end }, borderWidth: lineWidth, borderColor: strokeStyle, drawingStartAngle, radius, clockwise = true, } = arcModel;
    ctx.beginPath();
    const startRadian = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_1__.calculateDegreeToRadian)(start, drawingStartAngle);
    const endRadian = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_1__.calculateDegreeToRadian)(end, drawingStartAngle);
    ctx.arc(x, y, radius, startRadian, endRadian, !clockwise);
    (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.strokeWithOptions)(ctx, { lineWidth, strokeStyle });
    ctx.closePath();
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/brushes/boxPlot.js":
/*!******************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/brushes/boxPlot.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "boxPlot": () => (/* binding */ boxPlot)
/* harmony export */ });
/* harmony import */ var _basic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");

function boxPlot(ctx, model) {
    const { rect: rectModel, upperWhisker, lowerWhisker, median, minimum, maximum } = model;
    if (minimum) {
        (0,_basic__WEBPACK_IMPORTED_MODULE_0__.line)(ctx, Object.assign({ type: 'line' }, minimum));
    }
    if (lowerWhisker) {
        (0,_basic__WEBPACK_IMPORTED_MODULE_0__.line)(ctx, Object.assign({ type: 'line' }, lowerWhisker));
    }
    if (rectModel) {
        (0,_basic__WEBPACK_IMPORTED_MODULE_0__.rect)(ctx, Object.assign({ type: 'rect' }, rectModel));
    }
    if (upperWhisker) {
        (0,_basic__WEBPACK_IMPORTED_MODULE_0__.line)(ctx, Object.assign({ type: 'line' }, upperWhisker));
    }
    if (maximum) {
        (0,_basic__WEBPACK_IMPORTED_MODULE_0__.line)(ctx, Object.assign({ type: 'line' }, maximum));
    }
    if (median) {
        (0,_basic__WEBPACK_IMPORTED_MODULE_0__.line)(ctx, Object.assign({ type: 'line' }, median));
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/brushes/circleLegend.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/brushes/circleLegend.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "circleLegend": () => (/* binding */ circleLegend)
/* harmony export */ });
/* harmony import */ var _basic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _label__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");


function circleLegend(ctx, circleLegendModel) {
    const { x, y, radius, value } = circleLegendModel;
    const ratioArray = [1, 0.5, 0.25];
    ratioArray.forEach((ratio, idx) => {
        const circleRadius = ratio * radius;
        const circleY = y + (idx ? (1 - ratio) * radius : 0);
        (0,_basic__WEBPACK_IMPORTED_MODULE_0__.circle)(ctx, {
            type: 'circle',
            x,
            y: circleY,
            radius: circleRadius,
            color: '#fff',
            seriesIndex: 0,
            style: ['default', { strokeStyle: '#888', lineWidth: 1 }],
        });
        (0,_label__WEBPACK_IMPORTED_MODULE_1__.label)(ctx, {
            type: 'label',
            x,
            y: circleY - circleRadius,
            text: String(value * ratio),
            style: ['default', { textAlign: 'center', textBaseline: 'bottom' }],
        });
    });
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/brushes/dataLabel.js":
/*!********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/brushes/dataLabel.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dataLabel": () => (/* binding */ dataLabel),
/* harmony export */   "drawBubbleLabel": () => (/* binding */ drawBubbleLabel),
/* harmony export */   "getBubbleArrowPoints": () => (/* binding */ getBubbleArrowPoints)
/* harmony export */ });
/* harmony import */ var _label__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _basic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");





function dataLabel(ctx, model) {
    var _a;
    const { x, y, text, textAlign, textBaseline, opacity, callout, theme, radian } = model;
    const { color, textBubble } = theme;
    const font = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.getFont)(theme);
    const textStyle = { textAlign, textBaseline, font, fillStyle: color };
    const textStrokeStyle = getTextStrokeStyle(theme);
    if (callout) {
        const { theme: { lineWidth, lineColor }, } = callout;
        (0,_basic__WEBPACK_IMPORTED_MODULE_1__.line)(ctx, Object.assign(Object.assign({ type: 'line' }, (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.pick)(callout, 'x', 'y', 'x2', 'y2')), { strokeStyle: lineColor, lineWidth }));
    }
    if ((_a = textBubble) === null || _a === void 0 ? void 0 : _a.visible) {
        drawBubbleLabel(ctx, model);
        return;
    }
    (0,_label__WEBPACK_IMPORTED_MODULE_3__.label)(ctx, {
        type: 'label',
        x,
        y,
        text,
        style: [textStyle],
        stroke: [textStrokeStyle],
        opacity,
        radian,
    });
}
function drawBubbleLabel(ctx, model) {
    const { text, theme, radian = 0 } = model;
    const { color, textStrokeColor } = theme;
    const font = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.getFont)(theme);
    const bubbleRect = getBubbleRect(model);
    const { x, y, width, height } = bubbleRect;
    (0,_label__WEBPACK_IMPORTED_MODULE_3__.bubbleLabel)(ctx, {
        type: 'bubbleLabel',
        radian,
        rotationPosition: { x: model.x, y: model.y },
        bubble: bubbleRect,
        label: {
            x: x + width / 2,
            y: y + height / 2,
            text,
            style: [{ font, fillStyle: color, textAlign: 'center', textBaseline: 'middle' }],
            strokeStyle: textStrokeColor,
        },
    });
}
function getBubbleArrowPoints(direction, { x, y }, arrowPointTheme) {
    const width = arrowPointTheme.width;
    const height = arrowPointTheme.height;
    let points = [];
    if (direction === 'top') {
        points = [
            { x: x - width / 2, y: y + height },
            { x, y },
            { x: x + width / 2, y: y + height },
        ];
    }
    else if (direction === 'bottom') {
        points = [
            { x: x + width / 2, y: y - height },
            { x, y },
            { x: x - width / 2, y: y - height },
        ];
    }
    else if (direction === 'right') {
        points = [
            { x: x - height, y: y - width / 2 },
            { x, y },
            { x: x - height, y: y + width / 2 },
        ];
    }
    else if (direction === 'left') {
        points = [
            { x: x + height, y: y + width / 2 },
            { x, y },
            { x: x + height, y: y - width / 2 },
        ];
    }
    return points;
}
function getBubbleRect(model) {
    const { text, theme, textAlign, textBaseline } = model;
    const font = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.getFont)(theme);
    const { arrow, paddingX, paddingY, borderRadius, borderColor, borderWidth, backgroundColor, shadowBlur, shadowOffsetX, shadowOffsetY, shadowColor, } = theme.textBubble;
    const labelWidth = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_4__.getTextWidth)(text, font);
    const width = labelWidth + paddingX * 2;
    const height = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_4__.getTextHeight)(text, font) + paddingY * 2;
    let { x, y } = model;
    if (textAlign === 'center') {
        x -= width / 2;
    }
    else if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.includes)(['right', 'end'], textAlign)) {
        x -= width;
    }
    if (textBaseline === 'middle') {
        y -= height / 2;
    }
    else if (textBaseline === 'bottom') {
        y -= height;
    }
    const rect = { x, y, width, height };
    return Object.assign(Object.assign(Object.assign({}, rect), { radius: borderRadius, lineWidth: borderWidth, fill: backgroundColor, strokeStyle: borderColor, style: [
            {
                shadowBlur,
                shadowOffsetX,
                shadowOffsetY,
                shadowColor,
            },
        ] }), getArrowInfo(rect, textAlign, textBaseline, arrow));
}
function getArrowInfo(rect, textAlign, textBaseline, theme) {
    var _a, _b;
    if (!((_a = theme) === null || _a === void 0 ? void 0 : _a.visible)) {
        return null;
    }
    const arrowHeight = theme.height;
    const { width, height } = rect;
    const direction = (_b = theme.direction, (_b !== null && _b !== void 0 ? _b : getArrowDirection(textAlign, textBaseline)));
    let { x: boxX, y: boxY } = rect;
    let { x: pointX, y: pointY } = rect;
    if (direction === 'top') {
        boxY += arrowHeight;
    }
    else if (direction === 'bottom') {
        boxY -= arrowHeight;
        pointY += height;
    }
    else if (direction === 'right') {
        boxX -= arrowHeight;
        pointX += width;
    }
    else if (direction === 'left') {
        boxX += arrowHeight;
    }
    if (textAlign === 'center') {
        pointX = rect.x + width / 2;
    }
    else if (textBaseline === 'middle') {
        pointY = rect.y + height / 2;
    }
    return {
        direction,
        points: getBubbleArrowPoints(direction, { x: pointX, y: pointY }, theme),
        x: boxX,
        y: boxY,
    };
}
function getArrowDirection(textAlign, textBaseline) {
    let direction = 'top';
    if (textAlign === 'center' && textBaseline === 'top') {
        direction = 'top';
    }
    else if (textAlign === 'center' && textBaseline === 'bottom') {
        direction = 'bottom';
    }
    else if (textBaseline === 'middle' && textAlign === 'right') {
        direction = 'right';
    }
    else if (textBaseline === 'middle' && textAlign === 'left') {
        direction = 'left';
    }
    return direction;
}
function getTextStrokeStyle(theme) {
    const { textStrokeColor } = theme;
    const textStrokeStyle = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.pick)(theme, 'lineWidth', 'shadowColor', 'shadowBlur');
    if (textStrokeColor) {
        textStrokeStyle.strokeStyle = textStrokeColor;
    }
    return textStrokeStyle;
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "exportMenuButton": () => (/* binding */ exportMenuButton)
/* harmony export */ });
/* harmony import */ var _basic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");


function drawXIcon(ctx, icon, rectSize) {
    const { x: startX, y: startY, theme: { color: strokeStyle, lineWidth }, } = icon;
    const offset = rectSize / 3;
    const x = startX + offset;
    const y = startY + offset;
    const x2 = startX + offset * 2;
    const y2 = startY + offset * 2;
    const points = [
        { x, y, x2, y2 },
        { x, y: y2, x2, y2: y },
    ];
    points.forEach((p) => {
        (0,_basic__WEBPACK_IMPORTED_MODULE_0__.line)(ctx, Object.assign(Object.assign({ type: 'line' }, p), { strokeStyle, lineWidth }));
    });
}
function drawMoreIcon(ctx, icon, rectSize) {
    const { x, y, theme: { color, width, height, gap }, } = icon;
    const paddingX = (rectSize - width) / 2;
    const paddingY = (rectSize - (height * 3 + gap * 2)) / 2;
    const centerX = x + paddingX;
    const points = [
        { x: centerX, y: y + paddingY },
        { x: centerX, y: y + paddingY + height + gap },
        { x: centerX, y: y + paddingY + (height + gap) * 2 },
    ];
    points.forEach((p) => {
        (0,_basic__WEBPACK_IMPORTED_MODULE_0__.rect)(ctx, Object.assign(Object.assign({ type: 'rect' }, p), { color, width: width, height: height }));
    });
}
function exportMenuButton(ctx, exportMenuButtonModel) {
    const { opened, x: xPos, y: yPos, theme } = exportMenuButtonModel;
    const { borderColor, backgroundColor, borderWidth, borderRadius, xIcon, dotIcon, } = theme;
    const x = xPos + borderWidth;
    const y = yPos + borderWidth;
    const rectSize = _component_exportMenu__WEBPACK_IMPORTED_MODULE_1__.BUTTON_RECT_SIZE - 2 * borderWidth;
    (0,_basic__WEBPACK_IMPORTED_MODULE_0__.pathRect)(ctx, {
        type: 'pathRect',
        x,
        y,
        fill: backgroundColor,
        stroke: borderColor,
        width: rectSize,
        height: rectSize,
        radius: borderRadius,
        lineWidth: borderWidth,
    });
    if (opened) {
        drawXIcon(ctx, { x, y, theme: xIcon }, rectSize);
    }
    else {
        drawMoreIcon(ctx, { x, y, theme: dotIcon }, rectSize);
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/brushes/gauge.js":
/*!****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/brushes/gauge.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clockHand": () => (/* binding */ clockHand)
/* harmony export */ });
/* harmony import */ var _helpers_sector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/sector */ "./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js");
/* harmony import */ var _basic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _polygon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./polygon */ "./node_modules/@toast-ui/chart/dist/esm/brushes/polygon.js");



function getClockHandPoints(model) {
    const { x, y, x2, y2, degree, baseLine } = model;
    const halfBaseLine = baseLine / 2;
    let startPoint, endPoint;
    if (x === x2) {
        startPoint = { x: x - halfBaseLine, y };
        endPoint = { x: x + halfBaseLine, y };
    }
    else if (y === y2) {
        startPoint = { x, y: y - halfBaseLine };
        endPoint = { x, y: y + halfBaseLine };
    }
    else {
        startPoint = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_0__.getRadialPosition)(x, y, halfBaseLine, (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_0__.calculateDegreeToRadian)((0,_helpers_sector__WEBPACK_IMPORTED_MODULE_0__.calculateValidAngle)(degree + _helpers_sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_90)));
        endPoint = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_0__.getRadialPosition)(x, y, halfBaseLine, (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_0__.calculateDegreeToRadian)((0,_helpers_sector__WEBPACK_IMPORTED_MODULE_0__.calculateValidAngle)(degree - _helpers_sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_90)));
    }
    return [startPoint, { x: x2, y: y2 }, endPoint];
}
function clockHand(ctx, model) {
    const { color, x, y, pin: { color: pinColor, radius, style }, } = model;
    (0,_basic__WEBPACK_IMPORTED_MODULE_1__.circle)(ctx, {
        type: 'circle',
        x,
        y,
        radius,
        color: pinColor,
        style,
    });
    (0,_polygon__WEBPACK_IMPORTED_MODULE_2__.polygon)(ctx, {
        type: 'polygon',
        color,
        lineWidth: 1,
        fillColor: color,
        points: getClockHandPoints(model),
    });
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js":
/*!****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/brushes/label.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_LABEL_TEXT": () => (/* binding */ DEFAULT_LABEL_TEXT),
/* harmony export */   "labelStyle": () => (/* binding */ labelStyle),
/* harmony export */   "strokeLabelStyle": () => (/* binding */ strokeLabelStyle),
/* harmony export */   "label": () => (/* binding */ label),
/* harmony export */   "bubbleLabel": () => (/* binding */ bubbleLabel)
/* harmony export */ });
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");



const DEFAULT_LABEL_TEXT = 'normal 11px Arial';
const labelStyle = {
    default: {
        font: DEFAULT_LABEL_TEXT,
        fillStyle: '#333333',
        textAlign: 'left',
        textBaseline: 'middle',
    },
    title: {
        textBaseline: 'top',
    },
    axisTitle: {
        textBaseline: 'top',
    },
    rectLabel: {
        font: DEFAULT_LABEL_TEXT,
        fillStyle: 'rgba(0, 0, 0, 0.3)',
        textAlign: 'center',
        textBaseline: 'middle',
    },
};
const strokeLabelStyle = {
    none: {
        lineWidth: 1,
        strokeStyle: 'rgba(255, 255, 255, 0)',
    },
    stroke: {
        lineWidth: 4,
        strokeStyle: 'rgba(255, 255, 255, 0.5)',
    },
};
function label(ctx, labelModel) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const { x, y, text, style, stroke, opacity, radian, rotationPosition } = labelModel;
    if (style) {
        const styleObj = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.makeStyleObj)(style, labelStyle);
        Object.keys(styleObj).forEach((key) => {
            ctx[key] =
                key === 'fillStyle' && (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(opacity) ? (0,_helpers_color__WEBPACK_IMPORTED_MODULE_2__.rgba)(styleObj[key], opacity) : styleObj[key];
        });
    }
    ctx.save();
    if (radian) {
        ctx.translate((_b = (_a = rotationPosition) === null || _a === void 0 ? void 0 : _a.x, (_b !== null && _b !== void 0 ? _b : x)), (_d = (_c = rotationPosition) === null || _c === void 0 ? void 0 : _c.y, (_d !== null && _d !== void 0 ? _d : y)));
        ctx.rotate(radian);
        ctx.translate(-(_f = (_e = rotationPosition) === null || _e === void 0 ? void 0 : _e.x, (_f !== null && _f !== void 0 ? _f : x)), -(_h = (_g = rotationPosition) === null || _g === void 0 ? void 0 : _g.y, (_h !== null && _h !== void 0 ? _h : y)));
    }
    if (stroke) {
        const strokeStyleObj = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.makeStyleObj)(stroke, strokeLabelStyle);
        const strokeStyleKeys = Object.keys(strokeStyleObj);
        strokeStyleKeys.forEach((key) => {
            ctx[key] =
                key === 'strokeStyle' && (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(opacity)
                    ? (0,_helpers_color__WEBPACK_IMPORTED_MODULE_2__.rgba)(strokeStyleObj[key], opacity)
                    : strokeStyleObj[key];
        });
        if (strokeStyleKeys.length) {
            ctx.strokeText(text, x, y);
        }
    }
    ctx.fillText(text, x, y);
    ctx.restore();
}
const textBubbleStyle = {
    shadow: {
        shadowColor: 'rgba(0, 0, 0, 0.3)',
        shadowOffsetY: 2,
        shadowBlur: 4,
    },
};
function bubbleLabel(ctx, model) {
    var _a, _b, _c, _d;
    const { radian = 0, rotationPosition, bubble: { x, y, width, height, radius = 0, lineWidth = 1, direction, points = [], fill = '#fff', strokeStyle = 'rgba(0, 0, 0, 0)', style: bubbleStyle = null, }, } = model;
    if (width > 0 && height > 0) {
        drawBubble(ctx, {
            x,
            y,
            radius,
            width,
            height,
            style: bubbleStyle,
            fill,
            strokeStyle,
            lineWidth,
            direction,
            points,
            radian,
            rotationPosition: {
                x: (_b = (_a = rotationPosition) === null || _a === void 0 ? void 0 : _a.x, (_b !== null && _b !== void 0 ? _b : x)),
                y: (_d = (_c = rotationPosition) === null || _c === void 0 ? void 0 : _c.y, (_d !== null && _d !== void 0 ? _d : y)),
            },
        });
    }
    if (model.label.text) {
        const { x: labelX, y: labelY, text, strokeStyle: labelStrokeColor = 'rgba(0, 0, 0, 0)', style, } = model.label;
        ctx.shadowColor = 'rgba(0, 0, 0, 0)';
        label(ctx, {
            type: 'label',
            x: labelX,
            y: labelY,
            text,
            style,
            stroke: [{ strokeStyle: labelStrokeColor }],
            radian,
            rotationPosition,
        });
    }
}
function drawBubbleArrow(ctx, points) {
    if (!points.length) {
        return;
    }
    ctx.lineTo(points[0].x, points[0].y);
    ctx.lineTo(points[1].x, points[1].y);
    ctx.lineTo(points[2].x, points[2].y);
}
function drawBubble(ctx, model) {
    const { x, y, width, height, style, radius = 0, strokeStyle, fill, lineWidth = 1, points = [], direction = '', radian, rotationPosition, } = model;
    const right = x + width;
    const bottom = y + height;
    ctx.beginPath();
    ctx.save();
    if (radian && rotationPosition) {
        ctx.translate(rotationPosition.x, rotationPosition.y);
        ctx.rotate(radian);
        ctx.translate(-rotationPosition.x, -rotationPosition.y);
    }
    ctx.moveTo(x + radius, y);
    if (direction === 'top') {
        drawBubbleArrow(ctx, points);
    }
    ctx.lineTo(right - radius, y);
    ctx.quadraticCurveTo(right, y, right, y + radius);
    if (direction === 'right') {
        drawBubbleArrow(ctx, points);
    }
    ctx.lineTo(right, y + height - radius);
    ctx.quadraticCurveTo(right, bottom, right - radius, bottom);
    if (direction === 'bottom') {
        drawBubbleArrow(ctx, points);
    }
    ctx.lineTo(x + radius, bottom);
    ctx.quadraticCurveTo(x, bottom, x, bottom - radius);
    if (direction === 'left') {
        drawBubbleArrow(ctx, points);
    }
    ctx.lineTo(x, y + radius);
    ctx.quadraticCurveTo(x, y, x + radius, y);
    if (style) {
        const styleObj = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.makeStyleObj)(style, textBubbleStyle);
        Object.keys(styleObj).forEach((key) => {
            ctx[key] = styleObj[key];
        });
    }
    if (fill) {
        (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.fillStyle)(ctx, fill);
    }
    if (strokeStyle) {
        (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.strokeWithOptions)(ctx, { strokeStyle, lineWidth });
    }
    ctx.restore();
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LEGEND_ITEM_MARGIN_X": () => (/* binding */ LEGEND_ITEM_MARGIN_X),
/* harmony export */   "LEGEND_MARGIN_X": () => (/* binding */ LEGEND_MARGIN_X),
/* harmony export */   "LEGEND_CHECKBOX_SIZE": () => (/* binding */ LEGEND_CHECKBOX_SIZE),
/* harmony export */   "LEGEND_ICON_SIZE": () => (/* binding */ LEGEND_ICON_SIZE),
/* harmony export */   "getLegendItemHeight": () => (/* binding */ getLegendItemHeight),
/* harmony export */   "legend": () => (/* binding */ legend)
/* harmony export */ });
/* harmony import */ var _basic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _label__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _helpers_color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");
/* harmony import */ var _scatterSeries__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scatterSeries */ "./node_modules/@toast-ui/chart/dist/esm/brushes/scatterSeries.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _store_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../store/layout */ "./node_modules/@toast-ui/chart/dist/esm/store/layout.js");







const LEGEND_ITEM_MARGIN_X = 40;
const LEGEND_MARGIN_X = 5;
const LEGEND_CHECKBOX_SIZE = 12;
const LEGEND_ICON_SIZE = 12;
const ICON_BORDER_WIDTH = 1.5;
const INACTIVE_OPACITY = 0.3;
const RECT_SIZE = 10;
const LINE_ICON_PADDING = 2;
const CIRCLE_ICON_RADIUS = 6;
function getLegendItemHeight(fontSize) {
    return fontSize + _store_layout__WEBPACK_IMPORTED_MODULE_0__.padding.Y;
}
function drawLineIcon(ctx, x, y, color) {
    const xCurveOffset = [2, 2, 6, 6, 10, 10];
    const yCurveOffset = [8, 0, 0, 8, 8, 0];
    xCurveOffset.forEach((xOffset, idx) => {
        if (idx === 5) {
            return;
        }
        (0,_basic__WEBPACK_IMPORTED_MODULE_1__.line)(ctx, {
            type: 'line',
            x: x + xOffset,
            y: y + yCurveOffset[idx],
            x2: x + xCurveOffset[idx + 1],
            y2: y + yCurveOffset[idx + 1],
            lineWidth: 2,
            strokeStyle: color,
        });
    });
}
function drawCheckIcon(ctx, x, y, active) {
    const color = '#555555';
    const strokeStyle = active ? color : (0,_helpers_color__WEBPACK_IMPORTED_MODULE_2__.getRGBA)(color, INACTIVE_OPACITY);
    (0,_basic__WEBPACK_IMPORTED_MODULE_1__.line)(ctx, {
        type: 'line',
        x: x + 2,
        y: y + 5,
        x2: x + 5,
        y2: y + 8,
        strokeStyle,
        lineWidth: 2,
    });
    (0,_basic__WEBPACK_IMPORTED_MODULE_1__.line)(ctx, {
        type: 'line',
        x: x + 5,
        y: y + 9,
        x2: x + 10,
        y2: y + 3,
        strokeStyle,
        lineWidth: 2,
    });
}
function drawCheckbox(ctx, x, y, renderOptions) {
    const { active, checked } = renderOptions;
    const borderColor = active ? '#bbb' : (0,_helpers_color__WEBPACK_IMPORTED_MODULE_2__.getRGBA)('#bbbbbb', INACTIVE_OPACITY);
    (0,_basic__WEBPACK_IMPORTED_MODULE_1__.rect)(ctx, {
        type: 'rect',
        x,
        y,
        width: LEGEND_CHECKBOX_SIZE,
        height: LEGEND_CHECKBOX_SIZE,
        color: '#fff',
        borderColor,
        thickness: 1,
    });
    if (checked) {
        drawCheckIcon(ctx, x, y, active);
    }
}
function drawIcon(ctx, x, y, renderOptions) {
    const { iconType, active, color, showCheckbox } = renderOptions;
    const iconX = x + (showCheckbox ? LEGEND_CHECKBOX_SIZE + LEGEND_MARGIN_X : 0);
    const iconColor = active ? color : (0,_helpers_color__WEBPACK_IMPORTED_MODULE_2__.getRGBA)(color, INACTIVE_OPACITY);
    if (iconType === 'rect') {
        (0,_basic__WEBPACK_IMPORTED_MODULE_1__.rect)(ctx, {
            type: 'rect',
            x: iconX,
            y: y + (LEGEND_CHECKBOX_SIZE - RECT_SIZE) / 2,
            width: RECT_SIZE,
            height: RECT_SIZE,
            color: iconColor,
        });
    }
    else if (iconType === 'line') {
        drawLineIcon(ctx, iconX, y + LINE_ICON_PADDING, iconColor);
    }
    else if (iconType === 'circle') {
        (0,_basic__WEBPACK_IMPORTED_MODULE_1__.circle)(ctx, {
            type: 'circle',
            x: iconX + CIRCLE_ICON_RADIUS,
            y: y + CIRCLE_ICON_RADIUS,
            radius: CIRCLE_ICON_RADIUS,
            color: iconColor,
            style: ['default'],
        });
    }
}
function drawScatterIcon(ctx, x, y, renderOptions) {
    const { iconType, active, color, showCheckbox } = renderOptions;
    const iconX = x + (showCheckbox ? LEGEND_CHECKBOX_SIZE + LEGEND_MARGIN_X : 0);
    const iconColor = active ? color : (0,_helpers_color__WEBPACK_IMPORTED_MODULE_2__.getRGBA)(color, INACTIVE_OPACITY);
    (0,_scatterSeries__WEBPACK_IMPORTED_MODULE_3__.scatterSeries)(ctx, {
        type: 'scatterSeries',
        iconType: iconType,
        x: iconX + CIRCLE_ICON_RADIUS,
        y: y + CIRCLE_ICON_RADIUS,
        borderColor: iconColor,
        size: CIRCLE_ICON_RADIUS * 2,
        fillColor: 'rgba(255, 255, 255, 0)',
        borderWidth: ICON_BORDER_WIDTH,
    });
}
function drawLabel(ctx, x, y, text, renderOptions) {
    const { active, showCheckbox, font, fontColor } = renderOptions;
    const fillStyle = active ? fontColor : (0,_helpers_color__WEBPACK_IMPORTED_MODULE_2__.getRGBA)(fontColor, INACTIVE_OPACITY);
    (0,_label__WEBPACK_IMPORTED_MODULE_4__.label)(ctx, {
        type: 'label',
        x: x +
            LEGEND_ICON_SIZE +
            LEGEND_MARGIN_X +
            (showCheckbox ? LEGEND_CHECKBOX_SIZE + LEGEND_MARGIN_X : 0),
        y,
        text,
        style: ['default', { font, textBaseline: 'top', fillStyle }],
    });
}
function legend(ctx, model) {
    const { data, showCheckbox, align, fontSize, fontFamily, fontWeight } = model;
    const font = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_5__.getTitleFontString)({ fontSize, fontFamily, fontWeight });
    const fontColor = model.color;
    data.forEach((datum) => {
        const { x, y, checked, active, color, iconType, useScatterChartIcon, viewLabel: legendLabel, } = datum;
        const iconY = y - 1 + ((0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_6__.getTextHeight)(legendLabel, font) - 11) / 4;
        const renderOptions = {
            iconType,
            checked,
            active,
            color,
            showCheckbox,
            align,
            font,
            fontColor,
        };
        if (showCheckbox) {
            drawCheckbox(ctx, x, iconY, renderOptions);
        }
        if (useScatterChartIcon && iconType !== 'line') {
            drawScatterIcon(ctx, x, iconY, renderOptions);
        }
        else {
            drawIcon(ctx, x, iconY, renderOptions);
        }
        drawLabel(ctx, x, y, legendLabel, renderOptions);
    });
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/brushes/lineSeries.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/brushes/lineSeries.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linePoints": () => (/* binding */ linePoints),
/* harmony export */   "areaPoints": () => (/* binding */ areaPoints)
/* harmony export */ });
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");


function linePoints(ctx, pointsModel) {
    const { color: strokeStyle, lineWidth, points, dashSegments = [] } = pointsModel;
    ctx.lineCap = 'round';
    ctx.beginPath();
    if (dashSegments) {
        (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.setLineDash)(ctx, dashSegments);
    }
    let start = false;
    points.forEach((point, idx) => {
        var _a, _b;
        if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(point)) {
            start = false;
            return;
        }
        if (!start) {
            ctx.moveTo(point.x, point.y);
            start = true;
            return;
        }
        if (point.controlPoint && ((_b = (_a = points[idx - 1]) === null || _a === void 0 ? void 0 : _a.controlPoint) === null || _b === void 0 ? void 0 : _b.next)) {
            const { x: prevX, y: prevY } = points[idx - 1].controlPoint.next;
            const { controlPoint, x, y } = point;
            ctx.bezierCurveTo(prevX, prevY, controlPoint.prev.x, controlPoint.prev.y, x, y);
        }
        else {
            ctx.lineTo(point.x, point.y);
        }
    });
    (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.strokeWithOptions)(ctx, { lineWidth, strokeStyle });
    ctx.closePath();
    (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.setLineDash)(ctx, []);
}
function areaPoints(ctx, areaPointsModel) {
    const { fillColor } = areaPointsModel;
    ctx.beginPath();
    linePoints(ctx, areaPointsModel);
    (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.fillStyle)(ctx, fillColor);
    ctx.closePath();
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/brushes/polygon.js":
/*!******************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/brushes/polygon.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "polygon": () => (/* binding */ polygon)
/* harmony export */ });
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");

function polygon(ctx, polygonModel) {
    const { color: strokeStyle, points, lineWidth, fillColor, dashSegments = [] } = polygonModel;
    if (!points.length) {
        return;
    }
    ctx.beginPath();
    if (dashSegments) {
        (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.setLineDash)(ctx, dashSegments);
    }
    points.forEach(({ x, y }, idx) => {
        if (idx === 0) {
            ctx.moveTo(x, y);
            return;
        }
        ctx.lineTo(x, y);
    });
    ctx.lineTo(points[0].x, points[0].y);
    if (fillColor) {
        (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.fillStyle)(ctx, fillColor);
    }
    (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.strokeWithOptions)(ctx, { lineWidth, strokeStyle });
    ctx.closePath();
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/brushes/resetButton.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/brushes/resetButton.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "backButton": () => (/* binding */ backButton),
/* harmony export */   "resetButton": () => (/* binding */ resetButton)
/* harmony export */ });
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _basic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _lineSeries__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lineSeries */ "./node_modules/@toast-ui/chart/dist/esm/brushes/lineSeries.js");



const ARROW_HEIGHT = 3;
const ARROW_WIDTH = 6;
function drawResetIcon(ctx, point) {
    const { x, y } = point;
    const centerX = x + _component_exportMenu__WEBPACK_IMPORTED_MODULE_0__.BUTTON_RECT_SIZE / 2;
    const centerY = y + _component_exportMenu__WEBPACK_IMPORTED_MODULE_0__.BUTTON_RECT_SIZE / 2;
    const tickSize = _component_exportMenu__WEBPACK_IMPORTED_MODULE_0__.BUTTON_RECT_SIZE / 10;
    const color = '#545454';
    (0,_basic__WEBPACK_IMPORTED_MODULE_1__.circle)(ctx, {
        type: 'circle',
        x: centerX,
        y: centerY,
        radius: tickSize * 2,
        angle: { start: 0, end: Math.PI / 2 },
        color: 'transparent',
        style: [{ lineWidth: 2, strokeStyle: color }],
    });
    const pointStartX = centerX + tickSize * 2;
    const pointStartY = centerY;
    const points = [
        { x: pointStartX - ARROW_WIDTH / 2, y: pointStartY },
        { x: pointStartX + ARROW_WIDTH / 2, y: pointStartY },
        { x: pointStartX, y: pointStartY + ARROW_HEIGHT },
    ];
    (0,_lineSeries__WEBPACK_IMPORTED_MODULE_2__.areaPoints)(ctx, {
        type: 'areaPoints',
        points,
        lineWidth: 1,
        color,
        fillColor: color,
    });
}
function drawBackIcon(ctx, point) {
    const barWidth = 4;
    const radius = _component_exportMenu__WEBPACK_IMPORTED_MODULE_0__.BUTTON_RECT_SIZE / 7;
    const { x, y } = point;
    const centerX = x + _component_exportMenu__WEBPACK_IMPORTED_MODULE_0__.BUTTON_RECT_SIZE / 2;
    const centerY = y + _component_exportMenu__WEBPACK_IMPORTED_MODULE_0__.BUTTON_RECT_SIZE / 2;
    const color = '#545454';
    (0,_basic__WEBPACK_IMPORTED_MODULE_1__.line)(ctx, {
        type: 'line',
        lineWidth: 2,
        x: centerX - barWidth / 2,
        y: centerY + radius,
        x2: centerX + barWidth / 2,
        y2: centerY + radius,
        strokeStyle: color,
    });
    (0,_basic__WEBPACK_IMPORTED_MODULE_1__.line)(ctx, {
        type: 'line',
        lineWidth: 2,
        x: centerX - barWidth / 2,
        y: centerY - radius,
        x2: centerX + barWidth / 2,
        y2: centerY - radius,
        strokeStyle: color,
    });
    (0,_basic__WEBPACK_IMPORTED_MODULE_1__.circle)(ctx, {
        type: 'circle',
        x: centerX + barWidth / 2,
        y: centerY,
        radius,
        angle: { start: Math.PI / 2, end: (Math.PI * 3) / 2 },
        color: 'transparent',
        style: [{ lineWidth: 2, strokeStyle: color }],
    });
    const pointStartX = centerX - barWidth / 2;
    const pointStartY = centerY - radius;
    const points = [
        { x: pointStartX - ARROW_HEIGHT, y: pointStartY },
        { x: pointStartX, y: pointStartY - ARROW_WIDTH / 2 },
        { x: pointStartX, y: pointStartY + ARROW_WIDTH / 2 },
    ];
    (0,_lineSeries__WEBPACK_IMPORTED_MODULE_2__.areaPoints)(ctx, {
        type: 'areaPoints',
        points,
        lineWidth: 1,
        color,
        fillColor: color,
    });
}
function backButton(ctx, backButtonModel) {
    const { x, y } = backButtonModel;
    (0,_basic__WEBPACK_IMPORTED_MODULE_1__.pathRect)(ctx, {
        type: 'pathRect',
        x,
        y,
        fill: '#f4f4f4',
        stroke: '#f4f4f4',
        width: _component_exportMenu__WEBPACK_IMPORTED_MODULE_0__.BUTTON_RECT_SIZE,
        height: _component_exportMenu__WEBPACK_IMPORTED_MODULE_0__.BUTTON_RECT_SIZE,
        radius: 5,
    });
    drawBackIcon(ctx, { x, y });
}
function resetButton(ctx, resetButtonModel) {
    const { x, y } = resetButtonModel;
    (0,_basic__WEBPACK_IMPORTED_MODULE_1__.pathRect)(ctx, {
        type: 'pathRect',
        x,
        y,
        fill: '#f4f4f4',
        stroke: '#f4f4f4',
        width: _component_exportMenu__WEBPACK_IMPORTED_MODULE_0__.BUTTON_RECT_SIZE,
        height: _component_exportMenu__WEBPACK_IMPORTED_MODULE_0__.BUTTON_RECT_SIZE,
        radius: 5,
    });
    drawResetIcon(ctx, { x, y });
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/brushes/scatterSeries.js":
/*!************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/brushes/scatterSeries.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scatterSeries": () => (/* binding */ scatterSeries)
/* harmony export */ });
/* harmony import */ var _basic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _polygon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./polygon */ "./node_modules/@toast-ui/chart/dist/esm/brushes/polygon.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");



function regularPolygon(ctx, model) {
    const { numberOfSides, size, x, y, borderColor, borderWidth, fillColor } = model;
    const s = size / 2;
    const shift = numberOfSides % 2 ? (Math.PI / 180.0) * (10 + (numberOfSides - 3) / 2) * numberOfSides : 0;
    const step = (2 * Math.PI) / numberOfSides;
    ctx.beginPath();
    for (let i = 0; i <= numberOfSides; i += 1) {
        const curStep = i * step + shift;
        ctx.lineTo(x + s * Math.cos(curStep), y + s * Math.sin(curStep));
    }
    ctx.strokeStyle = borderColor;
    ctx.lineWidth = borderWidth;
    (0,_helpers_style__WEBPACK_IMPORTED_MODULE_0__.fillStyle)(ctx, fillColor);
    ctx.stroke();
    ctx.closePath();
}
// https://programmingthomas.wordpress.com/2012/05/16/drawing-stars-with-html5-canvas/
function star(ctx, model) {
    const { x, y, borderColor, borderWidth, size, fillColor } = model;
    ctx.lineWidth = borderWidth;
    ctx.strokeStyle = borderColor;
    ctx.fillStyle = fillColor;
    ctx.save();
    ctx.beginPath();
    ctx.translate(x, y);
    ctx.moveTo(0, -size);
    for (let i = 0; i < 5; i += 1) {
        ctx.rotate(Math.PI / 5);
        ctx.lineTo(0, -size / 2);
        ctx.rotate(Math.PI / 5);
        ctx.lineTo(0, -size);
    }
    ctx.fill();
    ctx.stroke();
    ctx.restore();
    ctx.closePath();
}
function cross(ctx, model) {
    const { x, y, borderColor, borderWidth, size, fillColor } = model;
    const quarter = size / 4;
    const half = size / 2;
    const xPointsOffset = [
        -half,
        -half,
        -quarter,
        -quarter,
        quarter,
        quarter,
        half,
        half,
        quarter,
        quarter,
        -quarter,
        -quarter,
    ];
    const yPointsOffset = [];
    for (let idx = 0, len = xPointsOffset.length; idx < len; idx += 1) {
        const startIdx = 9;
        yPointsOffset.push(xPointsOffset[(startIdx + idx) % len]);
    }
    (0,_polygon__WEBPACK_IMPORTED_MODULE_1__.polygon)(ctx, {
        type: 'polygon',
        lineWidth: borderWidth,
        color: borderColor,
        points: xPointsOffset.map((val, idx) => ({ x: x + val, y: y + yPointsOffset[idx] })),
        fillColor,
    });
}
function getNumberOfSidesByIconType(iconType) {
    switch (iconType) {
        case 'triangle':
            return 3;
        case 'diamond':
            return 4;
        case 'pentagon':
            return 5;
        case 'hexagon':
            return 6;
    }
}
function scatterSeries(ctx, model) {
    const { x, y, borderColor, borderWidth, fillColor, iconType, size } = model;
    const commonModel = { x, y, fillColor, borderColor, borderWidth, size };
    ctx.beginPath();
    switch (iconType) {
        case 'rect':
            (0,_basic__WEBPACK_IMPORTED_MODULE_2__.pathRect)(ctx, {
                type: 'pathRect',
                x: x - size / 2,
                y: y - size / 2,
                width: size,
                height: size,
                stroke: borderColor,
                lineWidth: borderWidth,
                fill: fillColor,
            });
            break;
        case 'triangle':
        case 'pentagon':
        case 'diamond':
        case 'hexagon':
            regularPolygon(ctx, Object.assign({ type: 'regularPolygon', numberOfSides: getNumberOfSidesByIconType(iconType) }, commonModel));
            break;
        case 'star':
            star(ctx, Object.assign(Object.assign({ type: 'star' }, commonModel), { size: size / 2 }));
            break;
        case 'cross':
            cross(ctx, Object.assign({ type: 'cross' }, commonModel));
            break;
        default:
            (0,_basic__WEBPACK_IMPORTED_MODULE_2__.circle)(ctx, {
                type: 'circle',
                x,
                y,
                radius: size / 2,
                style: [{ strokeStyle: borderColor, lineWidth: borderWidth }],
                color: fillColor,
            });
    }
    ctx.stroke();
    ctx.closePath();
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/brushes/sector.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/brushes/sector.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sector": () => (/* binding */ sector)
/* harmony export */ });
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _helpers_sector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/sector */ "./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js");


function sector(ctx, sectorModel) {
    const { degree: { start, end }, color, style, lineWidth, } = sectorModel;
    if (start === end) {
        return;
    }
    const isCircle = Math.abs(start - end) === _helpers_sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_360;
    ctx.beginPath();
    if (style) {
        const styleObj = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_1__.makeStyleObj)(style, {});
        Object.keys(styleObj).forEach((key) => {
            ctx[key] = styleObj[key];
        });
    }
    if (isCircle) {
        drawCircle(ctx, sectorModel);
    }
    else {
        drawSector(ctx, sectorModel);
    }
    ctx.closePath();
    (0,_helpers_style__WEBPACK_IMPORTED_MODULE_1__.fillStyle)(ctx, color);
    if (lineWidth) {
        ctx.lineWidth = lineWidth;
        ctx.stroke();
    }
}
function drawSector(ctx, sectorModel) {
    const { x, y, radius: { inner, outer }, degree: { start, end }, clockwise, drawingStartAngle, } = sectorModel;
    if (inner < 0 || outer < 0) {
        return;
    }
    const startRadian = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_0__.calculateDegreeToRadian)(start, drawingStartAngle);
    const endRadian = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_0__.calculateDegreeToRadian)(end, drawingStartAngle);
    if (!inner) {
        ctx.moveTo(x, y);
    }
    ctx.arc(x, y, outer, startRadian, endRadian, !clockwise);
    if (inner) {
        ctx.arc(x, y, inner, endRadian, startRadian, clockwise);
    }
}
function drawCircle(ctx, sectorModel) {
    const { x, y, radius: { inner, outer }, clockwise, } = sectorModel;
    ctx.arc(x, y, outer, 0, 2 * Math.PI, !clockwise);
    if (inner) {
        const { x: innerStartPosX, y: innerStartPosY } = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_0__.getRadialPosition)(x, y, inner, 0);
        const startX = inner ? innerStartPosX : x;
        const startY = inner ? innerStartPosY : y;
        ctx.moveTo(startX, startY);
        ctx.arc(x, y, inner, 0, 2 * Math.PI, clockwise);
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/brushes/spectrumLegend.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/brushes/spectrumLegend.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SPECTRUM_LEGEND_LABEL_HEIGHT": () => (/* binding */ SPECTRUM_LEGEND_LABEL_HEIGHT),
/* harmony export */   "spectrumLegendBar": () => (/* binding */ spectrumLegendBar),
/* harmony export */   "spectrumLegendTooltip": () => (/* binding */ spectrumLegendTooltip),
/* harmony export */   "spectrumLegend": () => (/* binding */ spectrumLegend),
/* harmony export */   "spectrumTooltip": () => (/* binding */ spectrumTooltip)
/* harmony export */ });
/* harmony import */ var _store_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/layout */ "./node_modules/@toast-ui/chart/dist/esm/store/layout.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _label__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _dataLabel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dataLabel */ "./node_modules/@toast-ui/chart/dist/esm/brushes/dataLabel.js");




const SPECTRUM_LEGEND_LABEL_HEIGHT = 12;
const spectrumLegendBar = {
    HEIGHT: 6,
    PADDING: 5,
};
const spectrumLegendTooltip = {
    HEIGHT: 28,
    POINT_WIDTH: 8,
    POINT_HEIGHT: 6,
    PADDING: 6,
};
function getBarStartPoint(model) {
    const { align, x: modelX, y: modelY, labels, width } = model;
    const { PADDING } = spectrumLegendBar;
    let x, y;
    if (align === 'top') {
        x = modelX;
        y = modelY + SPECTRUM_LEGEND_LABEL_HEIGHT + PADDING;
    }
    else if (align === 'bottom') {
        x = modelX;
        y = modelY + spectrumLegendTooltip.HEIGHT;
    }
    else if (align === 'left') {
        x = modelX + (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.getMaxLengthLabelWidth)(labels) + PADDING;
        y = modelY + SPECTRUM_LEGEND_LABEL_HEIGHT / 2;
    }
    else {
        x =
            modelX +
                width -
                ((0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.getMaxLengthLabelWidth)(labels) + _store_layout__WEBPACK_IMPORTED_MODULE_1__.padding.X + PADDING * 2 + spectrumLegendBar.HEIGHT);
        y = modelY + SPECTRUM_LEGEND_LABEL_HEIGHT / 2;
    }
    return { x, y };
}
function getLabelsStartPoint(model) {
    const { align, x: modelX, y: modelY, labels, width } = model;
    let x, y;
    if (align === 'top') {
        x = modelX;
        y = modelY;
    }
    else if (align === 'bottom') {
        x = modelX;
        y =
            modelY + spectrumLegendTooltip.HEIGHT + spectrumLegendBar.HEIGHT + spectrumLegendBar.PADDING;
    }
    else if (align === 'left') {
        x = modelX + (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.getMaxLengthLabelWidth)(labels);
        y = modelY;
    }
    else {
        x = modelX + width - (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.getMaxLengthLabelWidth)(labels) - _store_layout__WEBPACK_IMPORTED_MODULE_1__.padding.X;
        y = modelY;
    }
    return { x, y };
}
function getBarSize(width, height, verticalAlign) {
    const { HEIGHT } = spectrumLegendBar;
    const barWidth = verticalAlign ? width : HEIGHT;
    const barHeight = verticalAlign ? HEIGHT : height - SPECTRUM_LEGEND_LABEL_HEIGHT;
    return { barWidth, barHeight };
}
function drawLabels(ctx, model) {
    const { labels, align, x, y, width, height, verticalAlign } = model;
    const { barWidth, barHeight } = getBarSize(width, height, verticalAlign);
    const labelSize = labels.length - 1;
    const textBaseStyleMap = {
        left: {
            textAlign: 'right',
            textBaseline: 'top',
        },
        right: {
            textAlign: 'left',
            textBaseline: 'top',
        },
        top: {
            textAlign: 'center',
            textBaseline: 'top',
        },
        bottom: {
            textAlign: 'center',
            textBaseline: 'top',
        },
    };
    labels.forEach((text, idx) => {
        const startX = verticalAlign ? x + (barWidth / labelSize) * idx : x;
        const startY = verticalAlign ? y : y + (barHeight / labelSize) * idx;
        (0,_label__WEBPACK_IMPORTED_MODULE_2__.label)(ctx, {
            type: 'label',
            x: startX,
            y: startY,
            text,
            style: ['default', textBaseStyleMap[align]],
        });
    });
}
function drawBar(ctx, model) {
    const { width, height, startColor, endColor, x, y, verticalAlign } = model;
    const { barWidth, barHeight } = getBarSize(width, height, verticalAlign);
    const gradient = verticalAlign
        ? ctx.createLinearGradient(x, y, x + barWidth, y)
        : ctx.createLinearGradient(x, y, x, y + barHeight);
    gradient.addColorStop(0, startColor);
    gradient.addColorStop(1, endColor);
    ctx.fillStyle = gradient;
    ctx.fillRect(x, y, barWidth, barHeight);
}
function getTooltipArrowPoint(model) {
    const { align, colorRatio, width, height, x, y, labels, verticalAlign } = model;
    const { barWidth, barHeight } = getBarSize(width, height, verticalAlign);
    const { PADDING, HEIGHT } = spectrumLegendBar;
    if (align === 'top') {
        return {
            x: x + barWidth * colorRatio,
            y: y + SPECTRUM_LEGEND_LABEL_HEIGHT + HEIGHT + PADDING * 2,
        };
    }
    if (align === 'bottom') {
        return {
            x: x + barWidth * colorRatio,
            y: y + SPECTRUM_LEGEND_LABEL_HEIGHT + PADDING * 2,
        };
    }
    if (align === 'left') {
        return {
            x: x + (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.getMaxLengthLabelWidth)(labels) + HEIGHT + PADDING * 2,
            y: y + barHeight * colorRatio + PADDING,
        };
    }
    if (align === 'right') {
        return {
            x: x + width - ((0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.getMaxLengthLabelWidth)(labels) + _store_layout__WEBPACK_IMPORTED_MODULE_1__.padding.X + PADDING * 3 + HEIGHT),
            y: y + barHeight * colorRatio + PADDING,
        };
    }
}
function spectrumLegend(ctx, model) {
    const labelsStartPoint = getLabelsStartPoint(model);
    const barStartPoint = getBarStartPoint(model);
    drawLabels(ctx, Object.assign(Object.assign({}, model), labelsStartPoint));
    drawBar(ctx, Object.assign(Object.assign({}, model), barStartPoint));
}
function spectrumTooltip(ctx, model) {
    const { x, y } = getTooltipArrowPoint(model);
    const { PADDING, POINT_HEIGHT, POINT_WIDTH } = spectrumLegendTooltip;
    const { align, text, color } = model;
    const labelWidth = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.getTextWidth)(text);
    const width = labelWidth + PADDING * 2;
    const height = SPECTRUM_LEGEND_LABEL_HEIGHT + PADDING * 2;
    const direction = align;
    let boxStartX = x;
    let boxStartY = y;
    if (align === 'top') {
        boxStartY += POINT_HEIGHT;
    }
    else if (align === 'right') {
        boxStartX -= width / 2 + POINT_HEIGHT;
        boxStartY -= height / 2;
    }
    else if (align === 'left') {
        boxStartX += width / 2 + POINT_HEIGHT;
        boxStartY -= height / 2;
    }
    else if (align === 'bottom') {
        boxStartY -= height + POINT_HEIGHT;
    }
    const points = (0,_dataLabel__WEBPACK_IMPORTED_MODULE_3__.getBubbleArrowPoints)(align, { x, y }, { visible: true, width: POINT_WIDTH, height: POINT_HEIGHT });
    (0,_label__WEBPACK_IMPORTED_MODULE_2__.bubbleLabel)(ctx, {
        type: 'bubbleLabel',
        bubble: {
            x: boxStartX - width / 2,
            y: boxStartY,
            width,
            height,
            points,
            direction,
            fill: color,
        },
        label: {
            text,
            x: boxStartX,
            y: boxStartY + height / 2,
            style: [
                {
                    font: 'normal 11px Arial',
                    fillStyle: '#333333',
                    textAlign: 'center',
                    textBaseline: 'middle',
                },
            ],
        },
    });
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/areaChart.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/areaChart.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AreaChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _store_dataRange__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/dataRange */ "./node_modules/@toast-ui/chart/dist/esm/store/dataRange.js");
/* harmony import */ var _store_scale__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/scale */ "./node_modules/@toast-ui/chart/dist/esm/store/scale.js");
/* harmony import */ var _store_axes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../store/axes */ "./node_modules/@toast-ui/chart/dist/esm/store/axes.js");
/* harmony import */ var _store_plot__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../store/plot */ "./node_modules/@toast-ui/chart/dist/esm/store/plot.js");
/* harmony import */ var _store_stackSeriesData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/stackSeriesData */ "./node_modules/@toast-ui/chart/dist/esm/store/stackSeriesData.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_plot__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/plot */ "./node_modules/@toast-ui/chart/dist/esm/component/plot.js");
/* harmony import */ var _component_areaSeries__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/areaSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/areaSeries.js");
/* harmony import */ var _component_axis__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../component/axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");
/* harmony import */ var _component_dataLabels__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../component/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/component/dataLabels.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_axisTitle__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../component/axisTitle */ "./node_modules/@toast-ui/chart/dist/esm/component/axisTitle.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_resetButton__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../component/resetButton */ "./node_modules/@toast-ui/chart/dist/esm/component/resetButton.js");
/* harmony import */ var _component_legend__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/legend */ "./node_modules/@toast-ui/chart/dist/esm/component/legend.js");
/* harmony import */ var _component_rangeSelection__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../component/rangeSelection */ "./node_modules/@toast-ui/chart/dist/esm/component/rangeSelection.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _brushes_lineSeries__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../brushes/lineSeries */ "./node_modules/@toast-ui/chart/dist/esm/brushes/lineSeries.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");
/* harmony import */ var _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../brushes/dataLabel */ "./node_modules/@toast-ui/chart/dist/esm/brushes/dataLabel.js");
/* harmony import */ var _brushes_resetButton__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../brushes/resetButton */ "./node_modules/@toast-ui/chart/dist/esm/brushes/resetButton.js");





























/**
 * @class
 * @classdesc Area Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making Area Chart.
 *     @param {Array<string>} props.data.categories - Categories.
 *     @param {Array<Object>} props.data.series - Series data.
 *       @param {string} props.data.series.name - Series name.
 *       @param {Array<number|Array<number>>} props.data.series.data - Series data.
 *   @param {Object} [props.options] - Options for making Area Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series]
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *       @param {boolean} [props.options.series.showDot=false] - Whether to show dot or not.
 *       @param {boolean} [props.options.series.spline=false] - Whether to make spline chart or not.
 *       @param {boolean} [props.options.series.zoomable=false] - Whether to use zoom feature or not.
 *       @param {boolean} [props.options.series.rangeSelectable=false] - Whether to use range selection feature or not.
 *       @param {string} [props.options.series.eventDetectType] - Event detect type. 'near', 'nearest', 'grouped', 'point' is available.
 *       @param {boolean} [props.options.series.shift=false] - Whether to use shift when addData or not.
 *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.
 *       @param {boolean|Object} [props.options.series.stack] - Option to decide whether to use stack chart and type of stack chart. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Area Chart guide} on github.
 *     @param {Object} [props.options.xAxis]
 *       @param {string|Object} [props.options.xAxis.title] - Axis title.
 *       @param {boolean} [props.options.xAxis.pointOnColumn=false] - Whether to move the start of the chart to the center of the column.
 *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.
 *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.
 *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.xAxis.width] - Width of xAxis.
 *       @param {number} [props.options.xAxis.height] - Height of xAxis.
 *     @param {Object|Array<Object>} [props.options.yAxis] - If this option is an array type, use the secondary y axis.
 *       @param {string|Object} [props.options.yAxis.title] - Axis title.
 *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.yAxis.width] - Width of yAxis.
 *       @param {number} [props.options.yAxis.height] - Height of yAxis.
 *     @param {Object} [props.options.plot]
 *       @param {number} [props.options.plot.width] - Width of plot.
 *       @param {number} [props.options.plot.height] - Height of plot.
 *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.
 *       @param {Array<Object>} [props.options.plot.lines] - Plot lines information. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Plot guide} on github.
 *       @param {Array<Object>} [props.options.plot.bands] - Plot bands information. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Plot guide} on github.
 *     @param {Object} [props.options.legend]
 *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.
 *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.
 *       @param {boolean} [props.options.legend.visible] - Whether to show legend.
 *       @param {number} [props.options.legend.width] - Width of legend.
 *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.
 *       @param {Object} [props.options.lang.noData] - No Data Layer Text.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Area Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.
 *       @param {Object} [props.options.theme.series] - Series theme.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.xAxis] - X Axis theme.
 *       @param {Object|Array<Object>} [props.options.theme.yAxis] - Y Axis theme. In the case of an arrangement, the first is the main axis and the second is the theme for the secondary axis.
 *       @param {Object} [props.options.theme.legend] - Legend theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.plot] - Plot theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 * @extends Chart
 */
class AreaChart extends _chart__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(props) {
        super({
            el: props.el,
            options: props.options,
            series: {
                area: props.data.series,
            },
            categories: props.data.categories,
            modules: [_store_stackSeriesData__WEBPACK_IMPORTED_MODULE_1__["default"], _store_dataRange__WEBPACK_IMPORTED_MODULE_2__["default"], _store_scale__WEBPACK_IMPORTED_MODULE_3__["default"], _store_axes__WEBPACK_IMPORTED_MODULE_4__["default"], _store_plot__WEBPACK_IMPORTED_MODULE_5__["default"]],
        });
    }
    initialize() {
        super.initialize();
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_6__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_7__["default"]);
        this.componentManager.add(_component_plot__WEBPACK_IMPORTED_MODULE_8__["default"]);
        this.componentManager.add(_component_legend__WEBPACK_IMPORTED_MODULE_9__["default"]);
        this.componentManager.add(_component_areaSeries__WEBPACK_IMPORTED_MODULE_10__["default"]);
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_11__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_11__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_11__["default"], { name: 'secondaryYAxis' });
        this.componentManager.add(_component_dataLabels__WEBPACK_IMPORTED_MODULE_12__["default"]);
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_13__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_13__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_13__["default"], { name: 'secondaryYAxis' });
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_14__["default"], { chartEl: this.el });
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_15__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_16__["default"]);
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_17__["default"], { chartEl: this.el });
        this.componentManager.add(_component_resetButton__WEBPACK_IMPORTED_MODULE_18__["default"]);
        this.componentManager.add(_component_rangeSelection__WEBPACK_IMPORTED_MODULE_19__["default"]);
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_20__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_21__,
            _brushes_axis__WEBPACK_IMPORTED_MODULE_22__,
            _brushes_lineSeries__WEBPACK_IMPORTED_MODULE_23__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_24__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_25__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_26__,
            _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_27__,
            _brushes_resetButton__WEBPACK_IMPORTED_MODULE_28__,
        ]);
    }
    /**
     * Add data.
     * @param {Array} data - Array of data to be added.
     * @param {string} category - Category to be added.
     * @api
     * @example
     * chart.addData([10, 20], '6');
     */
    addData(data, category) {
        this.resetSeries();
        this.animationControlFlag.updating = true;
        this.store.dispatch('addData', { data, category });
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added.
     *   @param {string} data.name - Series name.
     *   @param {Array<number|Array<number>>} data.data - Array of data to be added.
     * @api
     * @example
     * chart.addSeries({
     *   name: 'newSeries',
     *   data: [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],
     * });
     */
    addSeries(data) {
        this.resetSeries();
        this.store.dispatch('addSeries', { data });
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set
     * @api
     * @example
     * chart.setData({
     *   categories: ['1', '2', '3'],
     *   series: [
     *     {
     *       name: 'new series',
     *       data: [1, 2, 3],
     *     },
     *     {
     *       name: 'new series2',
     *       data: [4, 5, 6],
     *     }
     *   ]
     * });
     */
    setData(data) {
        const { categories, series } = data;
        this.resetSeries();
        this.store.dispatch('setData', { series: { area: series }, categories });
    }
    /**
     * Add plot line.
     * @param {Object} data - Plot info.
     *   @param {string|number} data.value - The value where the plot line will be drawn.
     *   @param {string} data.color - Plot line color.
     *   @param {string} [data.id] - Plot id. The value on which the removePlotLine is based.
     * @api
     * @example
     * chart.addPlotLine({
     *   value: 2,
     *   color: '#00ff22',
     *   id: 'plot-1',
     * });
     */
    addPlotLine(data) {
        this.store.dispatch('addPlotLine', { data });
    }
    /**
     * Remove plot line with id.
     * @param {string} id - Id of the plot line to be removed.
     * @api
     * @example
     * chart.removePlotLine('plot-1');
     */
    removePlotLine(id) {
        this.store.dispatch('removePlotLine', { id });
    }
    /**
     * Add plot band.
     * @param {Object} data - Plot info.
     * @param {Array<string|number>} data.range - The range to be drawn.
     * @param {string} data.color - Plot band color.
     * @param {string} [data.id] - Plot id. The value on which the removePlotBand is based.
     * @api
     * @example
     * chart.addPlotBand({
     *   value: [2, 4],
     *   color: '#00ff22',
     *   id: 'plot-1',
     * });
     */
    addPlotBand(data) {
        this.store.dispatch('addPlotBand', { data });
    }
    /**
     * Remove plot band with id.
     * @param {string} id - id of the plot band to be removed.
     * @api
     * @example
     * chart.removePlotBand('plot-1');
     */
    removePlotBand(id) {
        this.store.dispatch('removePlotBand', { id });
    }
    /**
     * Hide series data label.
     * @api
     * @example
     * chart.hideSeriesDataLabel();
     */
    hideSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: false } } },
        });
    }
    /**
     * Show series data label.
     * @api
     * @example
     * chart.showSeriesDataLabel();
     */
    showSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: true } } },
        });
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   xAxis: {
     *     title: 'Month',
     *     date: { format: 'yy/MM' },
     *   },
     *   yAxis: {
     *     title: 'Energy (kWh)',
     *   },
     *   series: {
     *     selectable: true,
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    setOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.
     *      @param {number} seriesInfo.index - Index of data within series. If 'series.eventDetectType' is "grouped", only seriesIndex is needed.
     *      @param {number} [seriesInfo.seriesIndex] - Index of series.
     * @api
     * @example
     * chart.showTooltip({index: 1, seriesIndex: 2});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign({}, seriesInfo));
    }
    /**
     * Hide tooltip.
     * @api
     * @example
     * chart.hideTooltip();
     */
    hideTooltip() {
        this.eventBus.emit('hideTooltip');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/barChart.js":
/*!******************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/barChart.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BarChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _store_dataRange__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/dataRange */ "./node_modules/@toast-ui/chart/dist/esm/store/dataRange.js");
/* harmony import */ var _store_stackSeriesData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/stackSeriesData */ "./node_modules/@toast-ui/chart/dist/esm/store/stackSeriesData.js");
/* harmony import */ var _store_scale__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/scale */ "./node_modules/@toast-ui/chart/dist/esm/store/scale.js");
/* harmony import */ var _store_axes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../store/axes */ "./node_modules/@toast-ui/chart/dist/esm/store/axes.js");
/* harmony import */ var _store_plot__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../store/plot */ "./node_modules/@toast-ui/chart/dist/esm/store/plot.js");
/* harmony import */ var _component_axis__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../component/axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");
/* harmony import */ var _component_boxSeries__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/boxSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/boxSeries.js");
/* harmony import */ var _component_boxStackSeries__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../component/boxStackSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/boxStackSeries.js");
/* harmony import */ var _component_plot__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/plot */ "./node_modules/@toast-ui/chart/dist/esm/component/plot.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_legend__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/legend */ "./node_modules/@toast-ui/chart/dist/esm/component/legend.js");
/* harmony import */ var _component_dataLabels__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../component/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/component/dataLabels.js");
/* harmony import */ var _component_axisTitle__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../component/axisTitle */ "./node_modules/@toast-ui/chart/dist/esm/component/axisTitle.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_zeroAxis__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../component/zeroAxis */ "./node_modules/@toast-ui/chart/dist/esm/component/zeroAxis.js");
/* harmony import */ var _component_axisUsingCenterY__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../component/axisUsingCenterY */ "./node_modules/@toast-ui/chart/dist/esm/component/axisUsingCenterY.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../brushes/dataLabel */ "./node_modules/@toast-ui/chart/dist/esm/brushes/dataLabel.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");




























/**
 * @class
 * @classdesc Bar Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making Bar Chart.
 *     @param {Array<string>} props.data.categories - Categories.
 *     @param {Array<Object>} props.data.series - Series data.
 *       @param {string} props.data.series.name - Series name.
 *       @param {string} props.data.series.colorByCategories - Paint Rect with color based on categories.
 *       @param {Array<number|Array<number>>} props.data.series.data - Series data.
 *   @param {Object} [props.options] - Options for making Bar Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series]
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *       @param {number} [props.options.series.barWidth] - Bar width.
 *       @param {boolean} [props.options.series.diverging] - Whether to use diverging chart or not.
 *       @param {Object} [props.options.series.stack] - Option to use the stack chart or, if so, what type of stack to use.
 *       @param {string} [props.options.series.eventDetectType] - Event detect type. 'grouped', 'point' is available.
 *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.
 *     @param {Object} [props.options.xAxis]
 *       @param {string|Object} [props.options.xAxis.title] - Axis title.
 *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.
 *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.
 *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.xAxis.width] - Width of xAxis.
 *       @param {number} [props.options.xAxis.height] - Height of xAxis.
 *     @param {Object|Array<Object>} [props.options.yAxis] - If this option is an array type, use the secondary y axis.
 *       @param {string|Object} [props.options.yAxis.title] - Axis title.
 *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.yAxis.width] - Width of yAxis.
 *       @param {number} [props.options.yAxis.height] - Height of yAxis.
 *     @param {Object} [props.options.plot]
 *       @param {number} [props.options.plot.width] - Width of plot.
 *       @param {number} [props.options.plot.height] - Height of plot.
 *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.
 *     @param {Object} [props.options.legend]
 *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.
 *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.
 *       @param {boolean} [props.options.legend.visible] - Whether to show legend.
 *       @param {number} [props.options.legend.width] - Width of legend.
 *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.
 *       @param {Object} [props.options.lang.noData] - No Data Layer Text.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Bar Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.
 *       @param {Object} [props.options.theme.series] - Series theme.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.xAxis] - X Axis theme.
 *       @param {Object|Array<Object>} [props.options.theme.yAxis] - Y Axis theme. In the case of an arrangement, the first is the main axis and the second is the theme for the secondary axis.
 *       @param {Object} [props.options.theme.legend] - Legend theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.plot] - Plot theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 * @extends Chart
 */
class BarChart extends _chart__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor({ el, options, data }) {
        super({
            el,
            options,
            series: {
                bar: data.series,
            },
            categories: data.categories,
            modules: [_store_stackSeriesData__WEBPACK_IMPORTED_MODULE_1__["default"], _store_dataRange__WEBPACK_IMPORTED_MODULE_2__["default"], _store_scale__WEBPACK_IMPORTED_MODULE_3__["default"], _store_axes__WEBPACK_IMPORTED_MODULE_4__["default"], _store_plot__WEBPACK_IMPORTED_MODULE_5__["default"]],
        });
    }
    initialize() {
        var _a;
        super.initialize();
        const stackChart = !!((_a = this.store.initStoreState.options.series) === null || _a === void 0 ? void 0 : _a.stack);
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_6__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_7__["default"]);
        this.componentManager.add(_component_plot__WEBPACK_IMPORTED_MODULE_8__["default"]);
        this.componentManager.add(_component_legend__WEBPACK_IMPORTED_MODULE_9__["default"]);
        this.componentManager.add(_component_boxSeries__WEBPACK_IMPORTED_MODULE_10__["default"], { name: 'bar', stackChart });
        this.componentManager.add(_component_boxStackSeries__WEBPACK_IMPORTED_MODULE_11__["default"], { name: 'bar', stackChart });
        this.componentManager.add(_component_zeroAxis__WEBPACK_IMPORTED_MODULE_12__["default"]);
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_13__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_13__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_13__["default"], { name: 'secondaryYAxis' });
        this.componentManager.add(_component_axisUsingCenterY__WEBPACK_IMPORTED_MODULE_14__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axisUsingCenterY__WEBPACK_IMPORTED_MODULE_14__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_15__["default"], { name: 'secondaryYAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_15__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_15__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_16__["default"], { chartEl: this.el });
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_17__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_18__["default"]);
        this.componentManager.add(_component_dataLabels__WEBPACK_IMPORTED_MODULE_19__["default"]);
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_20__["default"], { chartEl: this.el });
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_21__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_22__,
            _brushes_axis__WEBPACK_IMPORTED_MODULE_23__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_24__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_25__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_26__,
            _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_27__,
        ]);
    }
    /**
     * Add data.
     * @param {Array} data - Array of data to be added.
     * @param {string} category - Category to be added.
     * @api
     * @example
     * chart.addData([10, 20], '6');
     */
    addData(data, category) {
        this.animationControlFlag.updating = true;
        this.resetSeries();
        this.store.dispatch('addData', { data, category });
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added.
     *   @param {string} data.name - Series name.
     *   @param {Array<number|Array<number>>} data.data - Array of data to be added.
     * @api
     * @example
     * chart.addSeries({
     *   name: 'newSeries',
     *   data: [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],
     * });
     */
    addSeries(data) {
        this.resetSeries();
        this.store.dispatch('addSeries', { data });
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set.
     * @api
     * @example
     * chart.setData({
     *   categories: ['1', '2', '3'],
     *   series: [
     *     {
     *       name: 'new series',
     *       data: [1, 2, 3],
     *     },
     *     {
     *       name: 'new series2',
     *       data: [4, 5, 6],
     *     }
     *   ]
     * });
     */
    setData(data) {
        const { categories, series } = data;
        this.resetSeries();
        this.store.dispatch('setData', { series: { bar: series }, categories });
    }
    /**
     * Hide series data label.
     * @api
     * @example
     * chart.hideSeriesDataLabel();
     */
    hideSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: false } } },
        });
    }
    /**
     * Show series data label.
     * @api
     * @example
     * chart.showSeriesDataLabel();
     */
    showSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: true } } },
        });
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   xAxis: {
     *     title: 'Month',
     *     date: { format: 'yy/MM' },
     *   },
     *   yAxis: {
     *     title: 'Energy (kWh)',
     *   },
     *   series: {
     *     selectable: true,
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    setOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.
     *   @param {number} seriesInfo.index - Index of data within series. If 'series.eventDetectType' is "grouped", only seriesIndex is needed.
     *   @param {number} [seriesInfo.seriesIndex] - Index of series
     * @api
     * @example
     * chart.showTooltip({index: 1, seriesIndex: 2});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign({}, seriesInfo));
    }
    /**
     * Hide tooltip.
     * @api
     * @example
     * chart.hideTooltip();
     */
    hideTooltip() {
        this.eventBus.emit('hideTooltip');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/boxPlotChart.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/boxPlotChart.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BoxPlotChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _store_dataRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/dataRange */ "./node_modules/@toast-ui/chart/dist/esm/store/dataRange.js");
/* harmony import */ var _store_scale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/scale */ "./node_modules/@toast-ui/chart/dist/esm/store/scale.js");
/* harmony import */ var _store_axes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/axes */ "./node_modules/@toast-ui/chart/dist/esm/store/axes.js");
/* harmony import */ var _store_plot__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../store/plot */ "./node_modules/@toast-ui/chart/dist/esm/store/plot.js");
/* harmony import */ var _component_axis__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");
/* harmony import */ var _component_boxPlotSeries__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/boxPlotSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/boxPlotSeries.js");
/* harmony import */ var _component_plot__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/plot */ "./node_modules/@toast-ui/chart/dist/esm/component/plot.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_legend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/legend */ "./node_modules/@toast-ui/chart/dist/esm/component/legend.js");
/* harmony import */ var _component_axisTitle__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../component/axisTitle */ "./node_modules/@toast-ui/chart/dist/esm/component/axisTitle.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");
/* harmony import */ var _brushes_boxPlot__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../brushes/boxPlot */ "./node_modules/@toast-ui/chart/dist/esm/brushes/boxPlot.js");























/**
 * @class
 * @classdesc BoxPlot Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making BoxPlot Chart.
 *     @param {Array<string>} props.data.categories - Categories.
 *     @param {Array<Object>} props.data.series - Series data.
 *       @param {string} props.data.series.name - Series name.
 *       @param {Array<Array<number>>} props.data.series.data - Series data.
 *       @param {Array<Array<number>>} props.data.series.outliers - Series outliers data.
 *   @param {Object} [props.options] - Options for making BoxPlot Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series]
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *       @param {string} [props.options.series.eventDetectType] - Event detect type. 'grouped', 'point' is available.
 *     @param {Object} [props.options.xAxis]
 *       @param {string|Object} [props.options.xAxis.title] - Axis title.
 *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.
 *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.
 *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.xAxis.width] - Width of xAxis.
 *       @param {number} [props.options.xAxis.height] - Height of xAxis.
 *     @param {Object} [props.options.yAxis]
 *       @param {string|Object} [props.options.yAxis.title] - Axis title.
 *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.yAxis.width] - Width of yAxis.
 *       @param {number} [props.options.yAxis.height] - Height of yAxis.
 *     @param {Object} [props.options.plot]
 *       @param {number} [props.options.plot.width] - Width of plot.
 *       @param {number} [props.options.plot.height] - Height of plot.
 *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.
 *     @param {Object} [props.options.legend]
 *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.
 *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.
 *       @param {boolean} [props.options.legend.visible] - Whether to show legend.
 *       @param {number} [props.options.legend.width] - Width of legend.
 *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.
 *       @param {Object} [props.options.lang.noData] - No Data Layer Text.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|BoxPlot Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.
 *       @param {Object} [props.options.theme.series] - Series theme.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.xAxis] - X Axis theme.
 *       @param {Object} [props.options.theme.yAxis] - Y Axis theme.
 *       @param {Object} [props.options.theme.legend] - Legend theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.plot] - Plot theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 * @extends Chart
 */
class BoxPlotChart extends _chart__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor({ el, options, data: { series, categories } }) {
        super({
            el,
            options,
            series: {
                boxPlot: series,
            },
            categories,
            modules: [_store_dataRange__WEBPACK_IMPORTED_MODULE_1__["default"], _store_scale__WEBPACK_IMPORTED_MODULE_2__["default"], _store_axes__WEBPACK_IMPORTED_MODULE_3__["default"], _store_plot__WEBPACK_IMPORTED_MODULE_4__["default"]],
        });
    }
    initialize() {
        super.initialize();
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_5__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_6__["default"]);
        this.componentManager.add(_component_plot__WEBPACK_IMPORTED_MODULE_7__["default"]);
        this.componentManager.add(_component_legend__WEBPACK_IMPORTED_MODULE_8__["default"]);
        this.componentManager.add(_component_boxPlotSeries__WEBPACK_IMPORTED_MODULE_9__["default"]);
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_10__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_10__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_11__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_11__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_12__["default"], { chartEl: this.el });
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_13__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_14__["default"]);
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_15__["default"], { chartEl: this.el });
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_16__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_17__,
            _brushes_axis__WEBPACK_IMPORTED_MODULE_18__,
            _brushes_boxPlot__WEBPACK_IMPORTED_MODULE_19__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_20__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_21__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_22__,
        ]);
    }
    /**
     * Add data.
     * @param {Array<<Array<number>>} data - Array of data to be added.
     * @param {string} category - Category to be added.
     * @api
     * @example
     * chart.addData(
        [
           [3000, 4000, 4714, 6000, 7000],
           [3000, 5750, 7571, 8250, 9000],
        ],
        'newCategory'
      );
     */
    addData(data, category) {
        this.animationControlFlag.updating = true;
        this.resetSeries();
        this.store.dispatch('addData', { data, category });
    }
    /**
     * add outlier.
     * @param {number} seriesIndex - Index of series.
     * @param {number} outliers - Array of outlier.
     * @api
     * @example
     * chart.addOutlier(1, [[1, 10000], [3, 12000]]);
     */
    addOutlier(seriesIndex, outliers) {
        this.animationControlFlag.updating = true;
        this.resetSeries();
        this.store.dispatch('addOutlier', { seriesIndex, outliers });
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added.
     *   @param {string} data.name - Series name.
     *   @param {Array<Array<number>>} data.data - Array of data to be added.
     *   @param {Array<Array<number>>} data.outliers - Series outliers data.
     * @api
     * @example
     * chart.addSeries({
     *   name: 'newSeries',
     *   data: [
     *     [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],
     *   ],
     *   outliers: [
     *     [0, 14000],
     *     [2, 10000],
     *   ]
     * });
     */
    addSeries(data) {
        this.resetSeries();
        this.store.dispatch('addSeries', { data });
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set.
     * @api
     * @example
     * chart.setData({
     *   categories: ['1', '2', '3'],
     *   series: [
     *     {
     *       name: 'newSeries',
     *       data: [
     *         [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],
     *       ],
     *       outliers: [
     *         [0, 14000],
     *         [2, 10000],
     *       ]
     *     }
     *   ]
     * });
     */
    setData(data) {
        const { categories, series } = data;
        this.resetSeries();
        this.store.dispatch('setData', { series: { boxPlot: series }, categories });
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   xAxis: {
     *     title: 'Month',
     *     date: { format: 'yy/MM' },
     *   },
     *   yAxis: {
     *     title: 'Energy (kWh)',
     *   },
     *   series: {
     *     selectable: true,
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    setOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.
     *      @param {number} seriesInfo.seriesIndex - Index of series.
     *      @param {number} seriesInfo.index - Index of data within series.
     * @api
     * @example
     * chart.showTooltip({index: 1, seriesIndex: 2});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));
    }
    /**
     * Hide tooltip.
     * @api
     * @example
     * chart.hideTooltip();
     */
    hideTooltip() {
        this.eventBus.emit('hideTooltip');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/bubbleChart.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/bubbleChart.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BubbleChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _store_scale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/scale */ "./node_modules/@toast-ui/chart/dist/esm/store/scale.js");
/* harmony import */ var _store_axes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/axes */ "./node_modules/@toast-ui/chart/dist/esm/store/axes.js");
/* harmony import */ var _store_dataRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/dataRange */ "./node_modules/@toast-ui/chart/dist/esm/store/dataRange.js");
/* harmony import */ var _store_plot__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../store/plot */ "./node_modules/@toast-ui/chart/dist/esm/store/plot.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_plot__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/plot */ "./node_modules/@toast-ui/chart/dist/esm/component/plot.js");
/* harmony import */ var _component_bubbleSeries__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/bubbleSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/bubbleSeries.js");
/* harmony import */ var _component_axis__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");
/* harmony import */ var _component_circleLegend__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../component/circleLegend */ "./node_modules/@toast-ui/chart/dist/esm/component/circleLegend.js");
/* harmony import */ var _component_legend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/legend */ "./node_modules/@toast-ui/chart/dist/esm/component/legend.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_axisTitle__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../component/axisTitle */ "./node_modules/@toast-ui/chart/dist/esm/component/axisTitle.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");
/* harmony import */ var _brushes_circleLegend__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../brushes/circleLegend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/circleLegend.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");
























/**
 * @class
 * @classdesc Bubble Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making Bubble Chart.
 *     @param {Array<string>} props.data.categories - Categories.
 *     @param {Array<Object>} props.data.series - Series data.
 *       @param {string} props.data.series.name - Series name.
 *       @param {Array<Object>} props.data.series.data - Series data. Coordinates x, y values, radius r, and label values are required.
 *   @param {Object} [props.options] - Options for making Bubble Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series]
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *     @param {Object} [props.options.xAxis]
 *       @param {string|Object} [props.options.xAxis.title] - Axis title.
 *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.
 *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.
 *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.xAxis.width] - Width of xAxis.
 *       @param {number} [props.options.xAxis.height] - Height of xAxis.
 *     @param {Object} [props.options.yAxis]
 *       @param {string|Object} [props.options.yAxis.title] - Axis title.
 *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.yAxis.width] - Width of yAxis.
 *       @param {number} [props.options.yAxis.height] - Height of yAxis.
 *     @param {Object} [props.options.plot]
 *       @param {number} [props.options.plot.width] - Width of plot.
 *       @param {number} [props.options.plot.height] - Height of plot.
 *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.
 *     @param {Object} [props.options.legend]
 *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.
 *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.
 *       @param {boolean} [props.options.legend.visible] - Whether to show legend.
 *       @param {number} [props.options.legend.width] - Width of legend.
 *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.
 *     @param {Object} [props.options.circleLegend]
 *       @param {boolean} [props.options.circleLegend.visible] - Whether to show circle legend.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.
 *       @param {Object} [props.options.lang.noData] - No Data Layer Text.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Bubble Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.
 *       @param {Object} [props.options.theme.series] - Series theme.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.xAxis] - X Axis theme.
 *       @param {Object} [props.options.theme.yAxis] - Y Axis theme.
 *       @param {Object} [props.options.theme.legend] - Legend theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.plot] - Plot theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 * @extends Chart
 */
class BubbleChart extends _chart__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(props) {
        super({
            el: props.el,
            options: props.options,
            series: {
                bubble: props.data.series,
            },
            modules: [_store_dataRange__WEBPACK_IMPORTED_MODULE_1__["default"], _store_scale__WEBPACK_IMPORTED_MODULE_2__["default"], _store_axes__WEBPACK_IMPORTED_MODULE_3__["default"], _store_plot__WEBPACK_IMPORTED_MODULE_4__["default"]],
        });
    }
    initialize() {
        super.initialize();
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_5__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_6__["default"]);
        this.componentManager.add(_component_plot__WEBPACK_IMPORTED_MODULE_7__["default"]);
        this.componentManager.add(_component_legend__WEBPACK_IMPORTED_MODULE_8__["default"]);
        this.componentManager.add(_component_bubbleSeries__WEBPACK_IMPORTED_MODULE_9__["default"]);
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_10__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_10__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_11__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_11__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_12__["default"], { chartEl: this.el });
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_13__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_14__["default"]);
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_15__["default"], { chartEl: this.el });
        this.componentManager.add(_component_circleLegend__WEBPACK_IMPORTED_MODULE_16__["default"]);
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_17__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_18__,
            _brushes_axis__WEBPACK_IMPORTED_MODULE_19__,
            _brushes_circleLegend__WEBPACK_IMPORTED_MODULE_20__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_21__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_22__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_23__,
        ]);
    }
    /**
     * Add data.
     * @param {Array<Object>} data - Array of data to be added.
     * @api
     * @example
     * chart.addData([
     *   {x: 10, y: 20, r: 10, label: 'label1'},
     *   {x: 30, y: 40, r: 10, label: 'label2'},
     * ]);
     */
    addData(data) {
        this.animationControlFlag.updating = true;
        this.resetSeries();
        this.store.dispatch('addData', { data });
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added.
     *   @param {string} data.name - Series name.
     *   @param {Array<Object>} data.data - Array of data to be added.
     * @api
     * @example
     * chart.addSeries({
     *   name: 'newSeries',
     *   data: [
     *     {x: 10, y: 20, r: 10, label: 'label1'},
     *     {x: 30, y: 40, r: 10, label: 'label2'},
     *   ],
     * });
     */
    addSeries(data) {
        this.resetSeries();
        this.store.dispatch('addSeries', { data });
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set.
     * @api
     * @example
     * chart.setData({
     *   series: [
     *     {
     *       name: 'name'
     *       data: [
     *         {x: 10, y: 20, r: 10, label: 'label1'},
     *         {x: 30, y: 40, r: 10, label: 'label2'},
     *       ]
     *     }
     *   ]
     * });
     */
    setData(data) {
        this.resetSeries();
        this.store.dispatch('setData', { series: { bubble: data.series } });
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   xAxis: {
     *     title: 'Month',
     *     date: { format: 'yy/MM' },
     *   },
     *   yAxis: {
     *     title: 'Energy (kWh)',
     *   },
     *   series: {
     *     selectable: true,
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    setOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.
     *      @param {number} seriesInfo.seriesIndex - Index of series.
     *      @param {number} seriesInfo.index - Index of data within series.
     * @api
     * @example
     * chart.showTooltip({index: 1, seriesIndex: 2});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));
    }
    /**
     * Hide tooltip.
     * @api
     * @example
     * chart.hideTooltip();
     */
    hideTooltip() {
        this.eventBus.emit('hideTooltip');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/bulletChart.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/bulletChart.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BulletChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _store_dataRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/dataRange */ "./node_modules/@toast-ui/chart/dist/esm/store/dataRange.js");
/* harmony import */ var _store_scale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/scale */ "./node_modules/@toast-ui/chart/dist/esm/store/scale.js");
/* harmony import */ var _store_axes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/axes */ "./node_modules/@toast-ui/chart/dist/esm/store/axes.js");
/* harmony import */ var _store_plot__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../store/plot */ "./node_modules/@toast-ui/chart/dist/esm/store/plot.js");
/* harmony import */ var _component_axis__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");
/* harmony import */ var _component_bulletSeries__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/bulletSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/bulletSeries.js");
/* harmony import */ var _component_plot__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/plot */ "./node_modules/@toast-ui/chart/dist/esm/component/plot.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_legend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/legend */ "./node_modules/@toast-ui/chart/dist/esm/component/legend.js");
/* harmony import */ var _component_axisTitle__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../component/axisTitle */ "./node_modules/@toast-ui/chart/dist/esm/component/axisTitle.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_dataLabels__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../component/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/component/dataLabels.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../brushes/dataLabel */ "./node_modules/@toast-ui/chart/dist/esm/brushes/dataLabel.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");
























/**
 * @class
 * @classdesc Bullet Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making Bullet Chart.
 *     @param {Array<string>} props.data.categories - Categories.
 *     @param {Array<Object>} props.data.series - Series data.
 *       @param {string} props.data.series.name - Series name.
 *       @param {number} props.data.series.data - Series data.
 *       @param {Array<number>} props.data.series.markers - Series markers. It specifies the marker for comparing.
 *       @param {Array<Array<number>>} props.data.series.ranges - Series ranges. It specifies the range of values that can be compared.
 *   @param {Object} [props.options] - Options for making Bullet Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series]
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *       @param {number} [props.options.series.vertical] - Whether to use vertical bullet series or not.
 *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.
 *     @param {Object} [props.options.xAxis]
 *       @param {string|Object} [props.options.xAxis.title] - Axis title.
 *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.
 *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.
 *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.xAxis.width] - Width of xAxis.
 *       @param {number} [props.options.xAxis.height] - Height of xAxis.
 *     @param {Object} [props.options.yAxis]
 *       @param {string|Object} [props.options.yAxis.title] - Axis title.
 *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.yAxis.width] - Width of yAxis.
 *       @param {number} [props.options.yAxis.height] - Height of yAxis.
 *     @param {Object} [props.options.plot]
 *       @param {number} [props.options.plot.width] - Width of plot.
 *       @param {number} [props.options.plot.height] - Height of plot.
 *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.
 *     @param {Object} [props.options.legend]
 *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.
 *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.
 *       @param {boolean} [props.options.legend.visible] - Whether to show legend.
 *       @param {number} [props.options.legend.width] - Width of legend.
 *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.
 *       @param {Object} [props.options.lang.noData] - No Data Layer Text.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Bullets Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.
 *       @param {Object} [props.options.theme.series] - Series theme.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.xAxis] - X Axis theme.
 *       @param {Object} [props.options.theme.yAxis] - Y Axis theme.
 *       @param {Object} [props.options.theme.legend] - Legend theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.plot] - Plot theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 * @extends Chart
 */
class BulletChart extends _chart__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor({ el, options, data: { series } }) {
        super({
            el,
            options,
            series: {
                bullet: series,
            },
            modules: [_store_dataRange__WEBPACK_IMPORTED_MODULE_1__["default"], _store_scale__WEBPACK_IMPORTED_MODULE_2__["default"], _store_axes__WEBPACK_IMPORTED_MODULE_3__["default"], _store_plot__WEBPACK_IMPORTED_MODULE_4__["default"]],
        });
        /**
         * Hide tooltip.
         * @api
         * @example
         * chart.hideTooltip();
         */
        this.hideTooltip = () => {
            this.eventBus.emit('hideTooltip');
        };
    }
    initialize() {
        super.initialize();
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_5__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_6__["default"]);
        this.componentManager.add(_component_plot__WEBPACK_IMPORTED_MODULE_7__["default"]);
        this.componentManager.add(_component_legend__WEBPACK_IMPORTED_MODULE_8__["default"]);
        this.componentManager.add(_component_bulletSeries__WEBPACK_IMPORTED_MODULE_9__["default"]);
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_10__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_10__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_11__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_11__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_12__["default"], { chartEl: this.el });
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_13__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_14__["default"]);
        this.componentManager.add(_component_dataLabels__WEBPACK_IMPORTED_MODULE_15__["default"]);
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_16__["default"], { chartEl: this.el });
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_17__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_18__,
            _brushes_axis__WEBPACK_IMPORTED_MODULE_19__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_20__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_21__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_22__,
            _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_23__,
        ]);
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added
     *   @param {string} data.name - Series name
     *   @param {Array<<Array<number>>} data.data - Array of data to be added
     *   @param {Array<number>} data.markers - Series markers. It specifies the marker for comparing.
     *   @param {Array<Array<number>>} data.ranges - Series ranges. It specifies the range of values that can be compared.
     * @api
     * @example
     * chart.addSeries({
     *   name: 'newSeries',
     *   data: 20,
     *   markers: [28, 2, 15],
     *   ranges: [
     *     [-1, 10],
     *     [10, 20],
     *     [20, 30],
     *   ],
     * });
     */
    addSeries(data) {
        this.resetSeries();
        this.store.dispatch('addSeries', { data });
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set
     * @api
     * @example
     * chart.setData({
     *   series: [
     *     {
     *       name: 'newSeries',
     *       data: 20,
     *       markers: [28, 2, 15],
     *       ranges: [
     *         [-1, 10],
     *         [10, 20],
     *         [20, 30],
     *       ],
     *     }
     *   ]
     * });
     */
    setData(data) {
        this.resetSeries();
        this.store.dispatch('setData', { series: { bullet: data.series } });
    }
    /**
     * Hide series data label.
     * @api
     * @example
     * chart.hideSeriesDataLabel();
     */
    hideSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: false } } },
        });
    }
    /**
     * Show series data label.
     * @api
     * @example
     * chart.showSeriesDataLabel();
     */
    showSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: true } } },
        });
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   xAxis: {
     *     title: 'Month',
     *   },
     *   yAxis: {
     *     title: 'Energy (kWh)',
     *   },
     *   series: {
     *     selectable: true,
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    setOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.
     *      @param {number} seriesInfo.seriesIndex - Index of series.
     * @api
     * @example
     * chart.showTooltip({seriesIndex: 1});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js":
/*!***************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/chart.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_ANIM_DURATION": () => (/* binding */ DEFAULT_ANIM_DURATION),
/* harmony export */   "default": () => (/* binding */ Chart)
/* harmony export */ });
/* harmony import */ var _store_store__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../store/store */ "./node_modules/@toast-ui/chart/dist/esm/store/store.js");
/* harmony import */ var _store_root__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../store/root */ "./node_modules/@toast-ui/chart/dist/esm/store/root.js");
/* harmony import */ var _store_layout__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../store/layout */ "./node_modules/@toast-ui/chart/dist/esm/store/layout.js");
/* harmony import */ var _store_seriesData__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../store/seriesData */ "./node_modules/@toast-ui/chart/dist/esm/store/seriesData.js");
/* harmony import */ var _store_category__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../store/category */ "./node_modules/@toast-ui/chart/dist/esm/store/category.js");
/* harmony import */ var _store_legend__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../store/legend */ "./node_modules/@toast-ui/chart/dist/esm/store/legend.js");
/* harmony import */ var _store_options__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../store/options */ "./node_modules/@toast-ui/chart/dist/esm/store/options.js");
/* harmony import */ var _store_theme__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../store/theme */ "./node_modules/@toast-ui/chart/dist/esm/store/theme.js");
/* harmony import */ var _eventEmitter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../eventEmitter */ "./node_modules/@toast-ui/chart/dist/esm/eventEmitter.js");
/* harmony import */ var _component_componentManager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/componentManager */ "./node_modules/@toast-ui/chart/dist/esm/component/componentManager.js");
/* harmony import */ var _painter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../painter */ "./node_modules/@toast-ui/chart/dist/esm/painter.js");
/* harmony import */ var _animator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../animator */ "./node_modules/@toast-ui/chart/dist/esm/animator.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _responderDetectors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../responderDetectors */ "./node_modules/@toast-ui/chart/dist/esm/responderDetectors.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");
/* harmony import */ var _helpers_googleAnalytics__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/googleAnalytics */ "./node_modules/@toast-ui/chart/dist/esm/helpers/googleAnalytics.js");
/* harmony import */ var _store_reactive__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/reactive */ "./node_modules/@toast-ui/chart/dist/esm/store/reactive.js");
/* harmony import */ var _helpers_coordinate__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../helpers/coordinate */ "./node_modules/@toast-ui/chart/dist/esm/helpers/coordinate.js");


















const DEFAULT_ANIM_DURATION = 500;
function getUsingContainerSize(eventName, usingContainerSize, width, height) {
    const { width: usingContainerWidth, height: usingContainerHeight } = usingContainerSize;
    const isAutoWidth = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isAutoValue)(width);
    const isAutoHeight = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isAutoValue)(height);
    return eventName === 'updateOptions'
        ? {
            width: !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(width) && usingContainerWidth !== isAutoWidth
                ? isAutoWidth
                : usingContainerWidth,
            height: !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(height) && usingContainerHeight !== isAutoHeight
                ? isAutoHeight
                : usingContainerHeight,
        }
        : {
            width: isAutoWidth,
            height: isAutoHeight,
        };
}
/**
 * @class
 * @abstract
 * Abstract class used to implement each chart.
 */
class Chart {
    constructor(props) {
        var _a, _b, _c, _d;
        this.___animId___ = null;
        this.painter = new _painter__WEBPACK_IMPORTED_MODULE_1__["default"](this);
        this.eventBus = new _eventEmitter__WEBPACK_IMPORTED_MODULE_2__["default"]();
        this.enteredComponents = [];
        this.animationControlFlag = {
            resizing: false,
            updating: false,
        };
        this.resizeObserver = null;
        this.debounceResizeEvent = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.debounce)(() => {
            const { offsetWidth, offsetHeight } = this.containerEl;
            this.resizeChartSize(offsetWidth, offsetHeight);
        }, 100);
        /**
         * Get checked legend chart type and label, checked state.
         * @returns {Array<{checked: boolean, chartType: string, label: string}>} Array data that whether series has checked
         * @api
         * @example
         * const checkedLegend = chart.getCheckedLegend()
         */
        this.getCheckedLegend = () => {
            const { data } = this.store.state.legend;
            return data
                .filter((datum) => datum.checked)
                .map((datum) => (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.pick)(datum, 'chartType', 'label', 'checked'));
        };
        /**
         * Returns the currently applied chart options.
         * @returns {Object} options
         * @api
         * @example
         * const options = chart.getOptions();
         */
        this.getOptions = () => {
            return (0,_store_reactive__WEBPACK_IMPORTED_MODULE_3__.makeObservableObjectToNormal)(this.store.initStoreState.options);
        };
        /**
         * Register of user custom event.
         * @param {string} eventName - Event name. 'clickLegendLabel', 'clickLegendCheckbox', 'selectSeries', 'unselectSeries', 'hoverSeries', 'unhoverSeries', 'zoom', 'resetZoom' is available.
         * @param {Function} handler - Event handler
         * @api
         */
        this.on = (eventName, handler) => {
            /**
             * Register Events that occur when click legend label
             * @event ChartBase#clickLegendLabel
             * @param {object} info selected legend information
             * @api
             * @example
             * chart.on('clickLegendLabel', (info) => {
             *   console.log(info);
             * });
             */
            /**
             * Register Events that occur when click legend checkbox
             * @event ChartBase#clickLegendCheckbox
             * @param {object} info selected legend info
             * @api
             * @example
             * chart.on('clickLegendCheckbox', (info) => {
             *   console.log(info);
             * });
             */
            /**
             * Register Events that occur when select series
             * @event ChartBase#selectSeries
             * @param {object} info selected series info
             * @api
             * @example
             * chart.on('selectSeries', (info) => {
             *   console.log(info);
             * });
             */
            /**
             * Register Events that occur when unselect series
             * @event ChartBase#unselectSeries
             * @param {object} info unselected series info
             * @api
             * @example
             * chart.on('unselectSeries', (info) => {
             *   console.log(info);
             * });
             */
            /**
             * Register Events that occur when hover to series
             * @event ChartBase#hoverSeries
             * @param {object} info hovered series info
             * @api
             * @example
             * chart.on('hoverSeries', (info) => {
             *   console.log(info);
             * });
             */
            /**
             * Register Events that occur when unhover from series
             * @event ChartBase#unhoverSeries
             * @param {object} info unhovered series info
             * @api
             * @example
             * chart.on('unhoverSeries', (info) => {
             *  console.log(info);
             * });
             */
            /**
             * Register Events that occur when zooming
             * @event ChartBase#zoom
             * @param {string[]} dataRange - []
             * @api
             * @example
             * chart.on('zoom', (dataRange) => {
             *    console.log(dataRange);
             * });
             */
            /**
             * Register Events that occur when zoom is reset
             * @event ChartBase#resetZoom
             * @api
             * @example
             * chart.on('resetZoom', () => {});
             */
            this.eventBus.on(eventName, handler);
        };
        /**
         * Destroys the instance.
         * @api
         * @example
         * chart.destroy();
         */
        this.destroy = () => {
            this.componentManager.clear();
            this.clearResizeEvent();
            this.containerEl.innerHTML = '';
        };
        /**
         * Select series. It works only when the selectable option is true.
         * @param {Object} seriesInfo - Information of the series to be selected
         *      @param {number} [seriesInfo.seriesIndex] - Index of series
         *      @param {number} [seriesInfo.index] - Index of data within series
         *      @param {string} [seriesInfo.name] - Specify name for NestedPie Chart
         *      @param {string} [seriesInfo.chartType] - Specify which chart to select when using LineArea, LineScatter, and ColumnLine charts.specifies which chart to select when using LineArea, LineScatter, and ColumnLine charts.
         * @api
         * @example
         * chart.selectSeries({index: 1, seriesIndex: 2});
         */
        this.selectSeries = (seriesInfo) => {
            if (!this.isSelectableSeries()) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_4__.message.SELECT_SERIES_API_SELECTABLE_ERROR);
            }
            this.eventBus.emit('selectSeries', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));
        };
        /**
         * Unselect selected series. It works only when the selectable option is true.
         * @api
         * @example
         * chart.unselectSeries();
         */
        this.unselectSeries = () => {
            if (!this.isSelectableSeries()) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_4__.message.SELECT_SERIES_API_SELECTABLE_ERROR);
            }
            this.store.dispatch('setAllLegendActiveState', true);
            this.eventBus.emit('resetSelectedSeries');
        };
        /**
         * Resize chart size.
         * @param {Object} size Chart size
         *   @param {number} [size.width] Width
         *   @param {number} [size.height] Height
         * @api
         * @example
         * chart.resize({height: 100, width: 200});
         */
        this.resize = (size) => {
            this.resetSeries();
            this.dispatchOptionsEvent('updateOptions', { chart: Object.assign({}, size) });
        };
        this.resetSeries = () => {
            this.eventBus.emit('resetHoveredSeries');
            this.eventBus.emit('resetSelectedSeries');
        };
        this.setResizeEventListeners = (eventName, options) => {
            var _a, _b, _c, _d;
            const { usingContainerSize } = this.store.state;
            const { width: usingContainerWidth, height: usingContainerHeight } = usingContainerSize;
            const width = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.chart) === null || _b === void 0 ? void 0 : _b.width;
            const height = (_d = (_c = options) === null || _c === void 0 ? void 0 : _c.chart) === null || _d === void 0 ? void 0 : _d.height;
            const isAutoWidth = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isAutoValue)(width);
            const isAutoHeight = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isAutoValue)(height);
            this.store.dispatch('setUsingContainerSize', getUsingContainerSize(eventName, usingContainerSize, width, height));
            if ((usingContainerWidth || usingContainerHeight) && (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(width) && (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(height)) {
                this.clearResizeEvent();
            }
            else if (!(usingContainerWidth || usingContainerHeight) && (isAutoWidth || isAutoHeight)) {
                this.setResizeEvent();
            }
        };
        const { el, options, series, categories, modules } = props;
        this.modules = (modules !== null && modules !== void 0 ? modules : []);
        if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(options.usageStatistics) || options.usageStatistics) {
            (0,_helpers_googleAnalytics__WEBPACK_IMPORTED_MODULE_5__.sendHostname)();
        }
        this.containerEl = el;
        this.el = this.createChartWrapper();
        this.containerEl.appendChild(this.el);
        this.animator = new _animator__WEBPACK_IMPORTED_MODULE_6__["default"]();
        this.store = new _store_store__WEBPACK_IMPORTED_MODULE_7__["default"]({
            series,
            categories,
            options,
        });
        this.componentManager = new _component_componentManager__WEBPACK_IMPORTED_MODULE_8__["default"]({
            store: this.store,
            eventBus: this.eventBus,
        });
        this.eventBus.on('needLoop', (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.debounce)(() => {
            var _a, _b;
            let duration = this.getAnimationDuration((_a = options.chart) === null || _a === void 0 ? void 0 : _a.animation);
            if (this.animationControlFlag.resizing) {
                duration = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(options.responsive)
                    ? this.getAnimationDuration()
                    : this.getAnimationDuration((_b = options.responsive) === null || _b === void 0 ? void 0 : _b.animation);
                this.animationControlFlag.resizing = false;
            }
            this.eventBus.emit('loopStart');
            this.animator.add({
                onCompleted: () => {
                    this.eventBus.emit('loopComplete');
                },
                chart: this,
                duration,
                requester: this,
            });
        }, 10));
        this.eventBus.on('needSubLoop', (opts) => {
            this.animator.add(Object.assign(Object.assign({}, opts), { chart: this }));
        });
        this.eventBus.on('needDraw', (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.debounce)(() => {
            this.draw();
        }, 10));
        this.initialize();
        this.store.observe(() => {
            this.painter.setup();
        });
        if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isAutoValue)((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.chart) === null || _b === void 0 ? void 0 : _b.width) || (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isAutoValue)((_d = (_c = options) === null || _c === void 0 ? void 0 : _c.chart) === null || _d === void 0 ? void 0 : _d.height)) {
            this.setResizeEvent();
        }
    }
    getAnimationDuration(animationOption) {
        const { firstRendering } = this.animator;
        const { resizing, updating } = this.animationControlFlag;
        let duration;
        if ((!firstRendering && !resizing) || (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(animationOption)) {
            duration = DEFAULT_ANIM_DURATION;
        }
        else if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isBoolean)(animationOption)) {
            duration = animationOption ? DEFAULT_ANIM_DURATION : 0;
        }
        else if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(animationOption.duration)) {
            duration = animationOption.duration;
        }
        if (updating) {
            duration = 0;
        }
        this.animationControlFlag.updating = false;
        return duration;
    }
    createChartWrapper() {
        const el = document.createElement('div');
        el.classList.add('toastui-chart-wrapper');
        return el;
    }
    resizeChartSize(containerWidth, containerHeight) {
        this.animationControlFlag.resizing = true;
        const { usingContainerSize: { width: usingContainerWidth, height: usingContainerHeight }, chart: { width, height }, } = this.store.state;
        if (!(usingContainerWidth || usingContainerHeight) ||
            !(containerWidth || containerHeight) ||
            (containerWidth === width && containerHeight === height)) {
            this.animationControlFlag.resizing = false;
            return;
        }
        // @TODO: For updates where the data doesn't change, it looks good to recalculate the selected series position.
        this.resetSeries();
        this.store.dispatch('setChartSize', {
            width: usingContainerWidth ? containerWidth : width,
            height: usingContainerHeight ? containerHeight : height,
        });
        this.draw();
    }
    setResizeEvent() {
        const { usingContainerSize } = this.store.state;
        if ((usingContainerSize.height && !this.containerEl.style.height.length) ||
            (usingContainerSize.width && !this.containerEl.style.width.length)) {
            throw new Error(_message__WEBPACK_IMPORTED_MODULE_4__.message.AUTO_LAYOUT_CONTAINER_SIZE_ERROR);
        }
        const isResizeObserverAPIExist = typeof ResizeObserver === 'undefined';
        if (isResizeObserverAPIExist) {
            window.addEventListener('resize', this.debounceResizeEvent);
        }
        else {
            this.resizeObserver = new ResizeObserver((entries) => {
                entries.forEach(() => {
                    this.debounceResizeEvent();
                });
            });
            this.resizeObserver.observe(this.containerEl);
        }
    }
    clearResizeEvent() {
        if (this.resizeObserver) {
            this.resizeObserver.unobserve(this.containerEl);
            this.resizeObserver.disconnect();
            this.resizeObserver = null;
        }
        else {
            window.removeEventListener('resize', this.debounceResizeEvent);
        }
    }
    handleCanvasMouseEvent(eventType, mousePosition) {
        const newEnteredComponents = [];
        this.componentManager.forEach((component) => {
            if (eventType === 'mousemove') {
                const exist = this.enteredComponents.some((enteredComponent) => enteredComponent === component);
                if ((0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_9__.isMouseInRect)(component.rect, mousePosition)) {
                    newEnteredComponents.push(component);
                    if (!exist && component.onMouseenterComponent) {
                        component.onMouseenterComponent();
                    }
                }
                else if (exist && component.onMouseoutComponent) {
                    component.onMouseoutComponent();
                }
            }
            else if (eventType === 'mouseout' && component.onMouseoutComponent) {
                component.onMouseoutComponent();
            }
        });
        this.enteredComponents = newEnteredComponents;
    }
    handleResponderEvent(event, mousePosition) {
        const eventType = event.type;
        const delegationMethod = `on${eventType[0].toUpperCase() + eventType.substring(1)}`;
        const allResponders = [];
        this.componentManager.forEach((component) => {
            if (!component[delegationMethod]) {
                return;
            }
            if (!_responderDetectors__WEBPACK_IMPORTED_MODULE_10__.responderDetectors.rect(mousePosition, component.rect)) {
                return;
            }
            const detected = (component.responders || []).filter((m) => {
                return _responderDetectors__WEBPACK_IMPORTED_MODULE_10__.responderDetectors[m.type](mousePosition, m, component.rect);
            });
            if (detected.length) {
                allResponders.push({ component, detected });
            }
            component[delegationMethod]({ mousePosition, responders: detected }, event);
        });
        if (this.handleEventForAllResponders) {
            this.handleEventForAllResponders(event, allResponders, delegationMethod, mousePosition);
        }
    }
    handleEvent(event) {
        const { clientX, clientY, type: eventType } = event;
        const canvas = this.painter.ctx.canvas;
        const { width, height, left, top } = canvas.getBoundingClientRect();
        // Calculate scale for chart affected by a CSS transform.
        const scaleX = width / canvas.offsetWidth;
        const scaleY = height / canvas.offsetHeight;
        const mousePosition = {
            x: (clientX - left) / scaleX,
            y: (clientY - top) / scaleY,
        };
        if (eventType === 'mousemove' || eventType === 'mouseout') {
            this.handleCanvasMouseEvent(eventType, mousePosition);
        }
        this.handleResponderEvent(event, mousePosition);
    }
    initStore() {
        [
            _store_root__WEBPACK_IMPORTED_MODULE_11__["default"],
            _store_options__WEBPACK_IMPORTED_MODULE_12__["default"],
            _store_theme__WEBPACK_IMPORTED_MODULE_13__["default"],
            _store_seriesData__WEBPACK_IMPORTED_MODULE_14__["default"],
            _store_legend__WEBPACK_IMPORTED_MODULE_15__["default"],
            _store_layout__WEBPACK_IMPORTED_MODULE_16__["default"],
            _store_category__WEBPACK_IMPORTED_MODULE_17__["default"],
            ...this.modules,
        ].forEach((module) => this.store.setModule(module));
    }
    initialize() {
        this.initStore();
        this.store.dispatch('initChartSize', this.containerEl);
    }
    draw() {
        this.painter.beforeFrame();
        this.componentManager.forEach((component) => {
            if (!component.isShow) {
                return;
            }
            this.painter.beforeDraw(component.rect.x, component.rect.y);
            if (component.beforeDraw) {
                component.beforeDraw(this.painter);
            }
            component.draw(this.painter);
            this.painter.afterDraw();
        });
    }
    update(delta) {
        this.componentManager.invoke('update', delta);
    }
    initUpdate(delta) {
        this.componentManager.invoke('initUpdate', delta);
    }
    isSelectableSeries() {
        var _a;
        return (_a = this.store.initStoreState.options.series) === null || _a === void 0 ? void 0 : _a.selectable;
    }
    /**
     * Set tooltip offset.
     * @param {Object} offset - Offset size
     *   @param {number} [offset.x] Offset value to move title horizontally
     *   @param {number} [offset.y] Offset value to move title vertically
     * @api
     * @example
     * chart.setTooltipOffset({x: 10, y: -20});
     */
    setTooltipOffset(offset) {
        const { x: offsetX, y: offsetY } = offset;
        this.store.dispatch('updateOptions', { options: { tooltip: { offsetX, offsetY } } });
    }
    dispatchOptionsEvent(eventName, options) {
        this.setResizeEventListeners(eventName, options);
        const { offsetWidth, offsetHeight } = this.containerEl;
        this.store.dispatch(eventName, {
            options,
            containerSize: { width: offsetWidth, height: offsetHeight },
        });
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/columnChart.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/columnChart.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ColumnChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _store_dataRange__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/dataRange */ "./node_modules/@toast-ui/chart/dist/esm/store/dataRange.js");
/* harmony import */ var _store_stackSeriesData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/stackSeriesData */ "./node_modules/@toast-ui/chart/dist/esm/store/stackSeriesData.js");
/* harmony import */ var _store_scale__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/scale */ "./node_modules/@toast-ui/chart/dist/esm/store/scale.js");
/* harmony import */ var _store_axes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../store/axes */ "./node_modules/@toast-ui/chart/dist/esm/store/axes.js");
/* harmony import */ var _store_plot__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../store/plot */ "./node_modules/@toast-ui/chart/dist/esm/store/plot.js");
/* harmony import */ var _component_axis__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../component/axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");
/* harmony import */ var _component_boxSeries__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../component/boxSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/boxSeries.js");
/* harmony import */ var _component_boxStackSeries__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/boxStackSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/boxStackSeries.js");
/* harmony import */ var _component_plot__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/plot */ "./node_modules/@toast-ui/chart/dist/esm/component/plot.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_legend__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/legend */ "./node_modules/@toast-ui/chart/dist/esm/component/legend.js");
/* harmony import */ var _component_dataLabels__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../component/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/component/dataLabels.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_axisTitle__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../component/axisTitle */ "./node_modules/@toast-ui/chart/dist/esm/component/axisTitle.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_zeroAxis__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../component/zeroAxis */ "./node_modules/@toast-ui/chart/dist/esm/component/zeroAxis.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _component_rangeSelection__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../component/rangeSelection */ "./node_modules/@toast-ui/chart/dist/esm/component/rangeSelection.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");
/* harmony import */ var _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../brushes/dataLabel */ "./node_modules/@toast-ui/chart/dist/esm/brushes/dataLabel.js");




























/**
 * @class
 * @classdesc Column Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making Column Chart.
 *     @param {Array<string>} props.data.categories - Categories.
 *     @param {Array<Object>} props.data.series - Series data.
 *       @param {string} props.data.series.name - Series name.
 *       @param {string} props.data.series.colorByCategories - Paint Rect with color based on categories.
 *       @param {Array<number|Array<number>>} props.data.series.data - Series data.
 *   @param {Object} [props.options] - Options for making Column Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series]
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *       @param {boolean} [props.options.series.rangeSelectable=false] - Whether to use range selection feature or not.
 *       @param {number} [props.options.series.barWidth] - Bar width.
 *       @param {boolean} [props.options.series.diverging] - Whether to use diverging chart or not.
 *       @param {Object} [props.options.series.stack] - Option to use the stack chart or, if so, what type of stack to use.
 *       @param {string} [props.options.series.eventDetectType] - Event detect type. 'grouped', 'point' is available.
 *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.
 *       @param {boolean} [props.options.series.shift=false] - Whether to use shift when addData or not.
 *     @param {Object} [props.options.xAxis]
 *       @param {string|Object} [props.options.xAxis.title] - Axis title.
 *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.
 *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.
 *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.xAxis.width] - Width of xAxis.
 *       @param {number} [props.options.xAxis.height] - Height of xAxis.
 *     @param {Object|Array<Object>} [props.options.yAxis] - If this option is an array type, use the secondary y axis.
 *       @param {string|Object} [props.options.yAxis.title] - Axis title.
 *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.yAxis.width] - Width of yAxis.
 *       @param {number} [props.options.yAxis.height] - Height of yAxis.
 *     @param {Object} [props.options.plot]
 *       @param {number} [props.options.plot.width] - Width of plot.
 *       @param {number} [props.options.plot.height] - Height of plot.
 *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.
 *     @param {Object} [props.options.legend]
 *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.
 *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.
 *       @param {boolean} [props.options.legend.visible] - Whether to show legend.
 *       @param {number} [props.options.legend.width] - Width of legend.
 *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.
 *       @param {Object} [props.options.lang.noData] - No Data Layer Text.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Bar Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.
 *       @param {Object} [props.options.theme.series] - Series theme.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.xAxis] - X Axis theme.
 *       @param {Object|Array<Object>} [props.options.theme.yAxis] - Y Axis theme. In the case of an arrangement, the first is the main axis and the second is the theme for the secondary axis.
 *       @param {Object} [props.options.theme.legend] - Legend theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.plot] - Plot theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 * @extends Chart
 */
class ColumnChart extends _chart__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor({ el, options, data }) {
        super({
            el,
            options,
            series: {
                column: data.series,
            },
            categories: data.categories,
            modules: [_store_stackSeriesData__WEBPACK_IMPORTED_MODULE_1__["default"], _store_dataRange__WEBPACK_IMPORTED_MODULE_2__["default"], _store_scale__WEBPACK_IMPORTED_MODULE_3__["default"], _store_axes__WEBPACK_IMPORTED_MODULE_4__["default"], _store_plot__WEBPACK_IMPORTED_MODULE_5__["default"]],
        });
    }
    initialize() {
        var _a;
        super.initialize();
        const stackChart = !!((_a = this.store.initStoreState.options.series) === null || _a === void 0 ? void 0 : _a.stack);
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_6__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_7__["default"]);
        this.componentManager.add(_component_plot__WEBPACK_IMPORTED_MODULE_8__["default"]);
        this.componentManager.add(_component_legend__WEBPACK_IMPORTED_MODULE_9__["default"]);
        this.componentManager.add(_component_boxStackSeries__WEBPACK_IMPORTED_MODULE_10__["default"], { name: 'column', stackChart });
        this.componentManager.add(_component_boxSeries__WEBPACK_IMPORTED_MODULE_11__["default"], { name: 'column', stackChart });
        this.componentManager.add(_component_zeroAxis__WEBPACK_IMPORTED_MODULE_12__["default"]);
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_13__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_13__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_14__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_14__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_15__["default"], { chartEl: this.el });
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_16__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_17__["default"]);
        this.componentManager.add(_component_dataLabels__WEBPACK_IMPORTED_MODULE_18__["default"]);
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_19__["default"], { chartEl: this.el });
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_20__["default"]);
        this.componentManager.add(_component_rangeSelection__WEBPACK_IMPORTED_MODULE_21__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_22__,
            _brushes_axis__WEBPACK_IMPORTED_MODULE_23__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_24__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_25__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_26__,
            _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_27__,
        ]);
    }
    /**
     * Add data.
     * @param {Array<number|Array<number>>} data - Array of data to be added
     * @param {string} category - Category to be added
     * @api
     * @example
     * chart.addData([10, 20], '6');
     */
    addData(data, category) {
        this.animationControlFlag.updating = true;
        this.resetSeries();
        this.store.dispatch('addData', { data, category });
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added
     *   @param {string} data.name - Series name
     *   @param {Array<number|Array<number>>} data.data - Array of data to be added
     * @api
     * @example
     * chart.addSeries({
     *   name: 'newSeries',
     *   data: [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],
     * });
     */
    addSeries(data) {
        this.resetSeries();
        this.store.dispatch('addSeries', { data });
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set
     * @api
     * @example
     * chart.setData({
     *   categories: ['1', '2', '3'],
     *   series: [
     *     {
     *       name: 'new series',
     *       data: [1, 2, 3],
     *     },
     *     {
     *       name: 'new series2',
     *       data: [4, 5, 6],
     *     }
     *   ]
     * });
     */
    setData(data) {
        const { categories, series } = data;
        this.resetSeries();
        this.store.dispatch('setData', { series: { column: series }, categories });
    }
    /**
     * Hide series data label.
     * @api
     * @example
     * chart.hideSeriesDataLabel();
     */
    hideSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: false } } },
        });
    }
    /**
     * Show series data label.
     * @api
     * @example
     * chart.showSeriesDataLabel();
     */
    showSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: true } } },
        });
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   xAxis: {
     *     title: 'Month',
     *     date: { format: 'yy/MM' },
     *   },
     *   yAxis: {
     *     title: 'Energy (kWh)',
     *   },
     *   series: {
     *     selectable: true,
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    setOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.
     *      @param {number} seriesInfo.index - Index of data within series. If 'series.eventDetectType' is "grouped", only seriesIndex is needed.
     *      @param {number} [seriesInfo.seriesIndex] - Index of series.
     * @api
     * @example
     * chart.showTooltip({index: 1, seriesIndex: 2});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign({}, seriesInfo));
    }
    /**
     * Hide tooltip.
     * @api
     * @example
     * chart.hideTooltip();
     */
    hideTooltip() {
        this.eventBus.emit('hideTooltip');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/columnLineChart.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/columnLineChart.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ColumnLineChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _store_stackSeriesData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/stackSeriesData */ "./node_modules/@toast-ui/chart/dist/esm/store/stackSeriesData.js");
/* harmony import */ var _store_plot__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../store/plot */ "./node_modules/@toast-ui/chart/dist/esm/store/plot.js");
/* harmony import */ var _store_axes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../store/axes */ "./node_modules/@toast-ui/chart/dist/esm/store/axes.js");
/* harmony import */ var _store_scale__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../store/scale */ "./node_modules/@toast-ui/chart/dist/esm/store/scale.js");
/* harmony import */ var _store_dataRange__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/dataRange */ "./node_modules/@toast-ui/chart/dist/esm/store/dataRange.js");
/* harmony import */ var _component_legend__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/legend */ "./node_modules/@toast-ui/chart/dist/esm/component/legend.js");
/* harmony import */ var _component_boxStackSeries__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../component/boxStackSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/boxStackSeries.js");
/* harmony import */ var _component_boxSeries__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../component/boxSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/boxSeries.js");
/* harmony import */ var _component_lineSeries__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../component/lineSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/lineSeries.js");
/* harmony import */ var _component_plot__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/plot */ "./node_modules/@toast-ui/chart/dist/esm/component/plot.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_zeroAxis__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../component/zeroAxis */ "./node_modules/@toast-ui/chart/dist/esm/component/zeroAxis.js");
/* harmony import */ var _component_axis__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../component/axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");
/* harmony import */ var _component_axisTitle__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../component/axisTitle */ "./node_modules/@toast-ui/chart/dist/esm/component/axisTitle.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_dataLabels__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../component/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/component/dataLabels.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_rangeSelection__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../component/rangeSelection */ "./node_modules/@toast-ui/chart/dist/esm/component/rangeSelection.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");
/* harmony import */ var _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../brushes/dataLabel */ "./node_modules/@toast-ui/chart/dist/esm/brushes/dataLabel.js");
/* harmony import */ var _brushes_lineSeries__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../brushes/lineSeries */ "./node_modules/@toast-ui/chart/dist/esm/brushes/lineSeries.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");































function hasPointEventType(respondersModel, name) {
    return respondersModel.find(({ component }) => component.name === name && component.eventDetectType === 'point');
}
function hasColumnLineUsingPointEventType(respondersModel) {
    return ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isExist)(hasPointEventType(respondersModel, 'column')) &&
        (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isExist)(hasPointEventType(respondersModel, 'line')));
}
/**
 * @class
 * @classdesc ColumnLine Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making ColumnLine Chart.
 *     @param {Array<string>} props.data.categories - Categories.
 *     @param {Array<Object>} props.data.series - Series data.
 *       @param {Array<Object>} props.data.series.line - Line series data. Coordinate types data is not possible.
 *       @param {Array<Object>} props.data.series.column - Column series data.
 *   @param {Object} [props.options] - Options for making ColumnLine Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series] - Write common options in the upper depth and separate options to be applied to each chart.
 *       @param {Object} [props.options.series.line] - Options to be applied to the line chart. 'spline', 'showDot', 'dataLabels' is available. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Line Chart guide} on github.
 *       @param {Object} [props.options.series.column] - Options to be applied to the column chart. 'barWidth', 'stack', 'dataLabels' is available. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Column Chart guide} on github.
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *       @param {boolean} [props.options.series.rangeSelectable=false] - Whether to use range selection feature or not.
 *       @param {string} [props.options.series.eventDetectType] - Event detect type. 'near', 'nearest', 'grouped', 'point' is available.
 *       @param {boolean} [props.options.series.shift=false] - Whether to use shift when addData or not.
 *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.
 *     @param {Object} [props.options.xAxis]
 *       @param {string|Object} [props.options.xAxis.title] - Axis title.
 *       @param {boolean} [props.options.xAxis.pointOnColumn=false] - Whether to move the start of the chart to the center of the column.
 *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.
 *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.
 *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.xAxis.width] - Width of xAxis.
 *       @param {number} [props.options.xAxis.height] - Height of xAxis.
 *     @param {Object|Array<Object>} [props.options.yAxis] - If this option is an array type, use the secondary y axis.
 *       @param {string|Object} [props.options.yAxis.title] - Axis title.
 *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.yAxis.width] - Width of yAxis.
 *       @param {number} [props.options.yAxis.height] - Height of yAxis.
 *     @param {Object} [props.options.plot]
 *       @param {number} [props.options.plot.width] - Width of plot.
 *       @param {number} [props.options.plot.height] - Height of plot.
 *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.
 *       @param {Array<Object>} [props.options.plot.lines] - Plot lines information. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Plot guide} on github.
 *       @param {Array<Object>} [props.options.plot.bands] - Plot bands information. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Plot guide} on github.
 *     @param {Object} [props.options.legend]
 *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.
 *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.
 *       @param {boolean} [props.options.legend.visible] - Whether to show legend.
 *       @param {number} [props.options.legend.width] - Width of legend.
 *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.
 *       @param {Object} [props.options.lang.noData] - No Data Layer Text.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|ColumnLine Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.
 *       @param {Object} [props.options.theme.series] - Series theme. Each theme to be applied to the two charts should be written separately.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.xAxis] - X Axis theme.
 *       @param {Object|Array<Object>} [props.options.theme.yAxis] - Y Axis theme. In the case of an arrangement, the first is the main axis and the second is the theme for the secondary axis.
 *       @param {Object} [props.options.theme.legend] - Legend theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.plot] - Plot theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 * @extends Chart
 */
class ColumnLineChart extends _chart__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor({ el, options, data: { series, categories } }) {
        super({
            el,
            options,
            series: series,
            categories,
            modules: [_store_stackSeriesData__WEBPACK_IMPORTED_MODULE_2__["default"], _store_dataRange__WEBPACK_IMPORTED_MODULE_3__["default"], _store_scale__WEBPACK_IMPORTED_MODULE_4__["default"], _store_axes__WEBPACK_IMPORTED_MODULE_5__["default"], _store_plot__WEBPACK_IMPORTED_MODULE_6__["default"]],
        });
    }
    initialize() {
        super.initialize();
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_7__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_8__["default"]);
        this.componentManager.add(_component_plot__WEBPACK_IMPORTED_MODULE_9__["default"]);
        this.componentManager.add(_component_legend__WEBPACK_IMPORTED_MODULE_10__["default"]);
        this.componentManager.add(_component_boxStackSeries__WEBPACK_IMPORTED_MODULE_11__["default"], { name: 'column' });
        this.componentManager.add(_component_boxSeries__WEBPACK_IMPORTED_MODULE_12__["default"], { name: 'column' });
        this.componentManager.add(_component_lineSeries__WEBPACK_IMPORTED_MODULE_13__["default"]);
        this.componentManager.add(_component_zeroAxis__WEBPACK_IMPORTED_MODULE_14__["default"]);
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_15__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_15__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_15__["default"], { name: 'secondaryYAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_16__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_16__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_16__["default"], { name: 'secondaryYAxis' });
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_17__["default"], { chartEl: this.el });
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_18__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_19__["default"]);
        this.componentManager.add(_component_dataLabels__WEBPACK_IMPORTED_MODULE_20__["default"]);
        this.componentManager.add(_component_rangeSelection__WEBPACK_IMPORTED_MODULE_21__["default"]);
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_22__["default"], { chartEl: this.el });
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_23__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_24__,
            _brushes_axis__WEBPACK_IMPORTED_MODULE_25__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_26__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_27__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_28__,
            _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_29__,
            _brushes_lineSeries__WEBPACK_IMPORTED_MODULE_30__,
        ]);
    }
    handleEventForAllResponders(event, responderModels, delegationMethod, mousePosition) {
        if (hasColumnLineUsingPointEventType(responderModels)) {
            const columnSeries = responderModels.find(({ component }) => component.name === 'column');
            columnSeries.component[delegationMethod]({ mousePosition, responders: [] }, event);
        }
    }
    /**
     * Add data.
     * @param {Array} data - Array of data to be added.
     * @param {string} category - Category to be added.
     * @param {string} chartType - Which type of chart to add.
     * @api
     * @example
     * chart.addData([10, 20], '6', 'line');
     */
    addData(data, category, chartType) {
        this.animationControlFlag.updating = true;
        this.resetSeries();
        this.store.dispatch('addData', { data, category, chartType });
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added.
     * @param {string} data.name - Series name.
     * @param {Array<number>} data.data - Array of data to be added.
     * @param {Object} dataInfo - Which type of chart to add.
     * @param {Object} dataInfo.chartType - Chart type.
     * @api
     * @example
     * chart.addSeries(
     *   {
     *     name: 'newSeries',
     *     data: [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],
     *   },
     *   {
     *     chartType: 'line'
     *   });
     */
    addSeries(data, dataInfo) {
        this.resetSeries();
        this.store.dispatch('addSeries', Object.assign({ data }, dataInfo));
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set
     * @api
     * @example
     * chart.setData({
     *   categories: ['1', '2', '3'],
     *   series: {
     *     column: [
     *       {
     *         name: 'A',
     *         data: [1, 2, 3],
     *       }
     *     ],
     *     line: [
     *       {
     *         name: 'B',
     *         data: [4, 5, 6],
     *       }
     *     ]
     *   }
     * });
     */
    setData(data) {
        this.resetSeries();
        this.store.dispatch('setData', data);
    }
    /**
     * Add plot line.
     * @param {Object} data - Plot info.
     *   @param {string|number} data.value - The value where the plot line will be drawn.
     *   @param {string} data.color - Plot line color.
     *   @param {string} [data.id] - Plot id. The value on which the removePlotLine is based.
     * @api
     * @example
     * chart.addPlotLine({
     *   value: 2,
     *   color: '#00ff22',
     *   id: 'plot-1',
     * });
     */
    addPlotLine(data) {
        this.store.dispatch('addPlotLine', { data });
    }
    /**
     * Remove plot line with id.
     * @param {string} id - Id of the plot line to be removed
     * @api
     * @example
     * chart.removePlotLine('plot-1');
     */
    removePlotLine(id) {
        this.store.dispatch('removePlotLine', { id });
    }
    /**
     * Add plot band.
     * @param {Object} data - plot info
     *   @param {Array<string|number>} data.range - The range to be drawn
     *   @param {string} data.color - Plot band color
     *   @param {string} [data.id] - Plot id. The value on which the removePlotBand is based
     * @api
     * @example
     * chart.addPlotBand({
     *   value: [2, 4],
     *   color: '#00ff22',
     *   id: 'plot-1',
     * });
     */
    addPlotBand(data) {
        this.store.dispatch('addPlotBand', { data });
    }
    /**
     * Remove plot band with id.
     * @param {string} id - id of the plot band to be removed
     * @api
     * @example
     * chart.removePlotBand('plot-1');
     */
    removePlotBand(id) {
        this.store.dispatch('removePlotBand', { id });
    }
    /**
     * Hide series data label.
     * @api
     * @example
     * chart.hideSeriesDataLabel();
     */
    hideSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: false } } },
        });
    }
    /**
     * Show series data label.
     * @api
     * @example
     * chart.showSeriesDataLabel();
     */
    showSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: true } } },
        });
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   xAxis: {
     *     title: 'Month',
     *     date: { format: 'yy/MM' },
     *   },
     *   yAxis: {
     *     title: 'Energy (kWh)',
     *   },
     *   series: {
     *     line: {
     *       showDot: true,
     *     },
     *     selectable: true,
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    setOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   series: {
     *     line: {
     *       showDot: true,
     *     },
     *   },
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.
     *      @param {number} seriesInfo.seriesIndex - Index of series.
     *      @param {number} seriesInfo.index - Index of data within series.
     *      @param {string} seriesInfo.chartType - Specify which chart to select.
     * @api
     * @example
     * chart.showTooltip({index: 1, seriesIndex: 2, chartType: 'column'});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign({}, seriesInfo));
    }
    /**
     * Hide tooltip.
     * @api
     * @example
     * chart.hideTooltip();
     */
    hideTooltip() {
        this.eventBus.emit('hideTooltip');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/gaugeChart.js":
/*!********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/gaugeChart.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GaugeChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _store_dataRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/dataRange */ "./node_modules/@toast-ui/chart/dist/esm/store/dataRange.js");
/* harmony import */ var _store_scale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/scale */ "./node_modules/@toast-ui/chart/dist/esm/store/scale.js");
/* harmony import */ var _store_gaugeAxes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/gaugeAxes */ "./node_modules/@toast-ui/chart/dist/esm/store/gaugeAxes.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_gaugeSeries__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/gaugeSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/gaugeSeries.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_dataLabels__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../component/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/component/dataLabels.js");
/* harmony import */ var _component_axisTitle__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/axisTitle */ "./node_modules/@toast-ui/chart/dist/esm/component/axisTitle.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_radialAxis__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/radialAxis */ "./node_modules/@toast-ui/chart/dist/esm/component/radialAxis.js");
/* harmony import */ var _component_radialPlot__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../component/radialPlot */ "./node_modules/@toast-ui/chart/dist/esm/component/radialPlot.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");
/* harmony import */ var _brushes_sector__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../brushes/sector */ "./node_modules/@toast-ui/chart/dist/esm/brushes/sector.js");
/* harmony import */ var _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../brushes/dataLabel */ "./node_modules/@toast-ui/chart/dist/esm/brushes/dataLabel.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");
/* harmony import */ var _brushes_gauge__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../brushes/gauge */ "./node_modules/@toast-ui/chart/dist/esm/brushes/gauge.js");
























/**
 * @class
 * @classdesc Gauge Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making Gauge Chart.
 *     @param {Array<string>} [props.data.categories] - Categories.
 *     @param {Array<Object>} props.data.series - Series data.
 *       @param {string} props.data.series.name - Series name.
 *       @param {number} props.data.series.data - Series data.
 *   @param {Object} [props.options] - Options for making Gauge Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series]
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Gauge Chart guide} on github.
 *       @param {Array<number>} [props.options.series.angleRange] - The range of angles to which the circle will be drawn. It is specified by putting number in start and end.
 *       @param {boolean} [props.options.series.clockwise] - Whether it will be drawn clockwise.
 *       @param {boolean | Object} [props.options.series.solid] - When this option is set, the radial bar is displayed. It can be used when there is one series data. The default value is 'false'.
 *     @param {Object} [props.options.circularAxis]
 *       @param {string|Object} [props.options.circularAxis.title] - Axis title.
 *       @param {Object} [props.options.circularAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.circularAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.circularAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *     @param {Object} [props.options.plot]
 *       @param {number} [props.options.plot.width] - Width of plot.
 *       @param {number} [props.options.plot.height] - Height of plot.
 *       @param {Array<Object>} [props.options.plot.bands] - Plot bands information. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Gauge Chart guide} on github.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Gauge Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.series] - Series theme.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.circularAxis] - Circular Axis theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 *       @param {Object} [props.options.theme.plot] - Plot Theme.
 * @extends Chart
 */
class GaugeChart extends _chart__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor({ el, options, data }) {
        super({
            el,
            options,
            series: {
                gauge: data.series,
            },
            categories: data.categories,
            modules: [_store_dataRange__WEBPACK_IMPORTED_MODULE_1__["default"], _store_scale__WEBPACK_IMPORTED_MODULE_2__["default"], _store_gaugeAxes__WEBPACK_IMPORTED_MODULE_3__["default"]],
        });
    }
    initialize() {
        super.initialize();
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_4__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_5__["default"]);
        this.componentManager.add(_component_radialPlot__WEBPACK_IMPORTED_MODULE_6__["default"], { name: 'gauge' });
        this.componentManager.add(_component_radialAxis__WEBPACK_IMPORTED_MODULE_7__["default"], { name: 'gauge' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_8__["default"], { name: 'circularAxis' });
        this.componentManager.add(_component_gaugeSeries__WEBPACK_IMPORTED_MODULE_9__["default"]);
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_10__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_11__["default"]);
        this.componentManager.add(_component_dataLabels__WEBPACK_IMPORTED_MODULE_12__["default"]);
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_13__["default"], { chartEl: this.el });
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_14__["default"], { chartEl: this.el });
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_15__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_16__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_17__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_18__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_19__,
            _brushes_sector__WEBPACK_IMPORTED_MODULE_20__,
            _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_21__,
            _brushes_axis__WEBPACK_IMPORTED_MODULE_22__,
            _brushes_gauge__WEBPACK_IMPORTED_MODULE_23__,
        ]);
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added.
     *   @param {string} data.name - Series name.
     *   @param {Array<number|Array<number>>} data.data - Array of data to be added.
     * @api
     * @example
     * chart.addSeries({
     *   name: 'newSeries',
     *   data: [10, 20],
     * });
     */
    addSeries(data) {
        this.resetSeries();
        this.store.dispatch('addSeries', { data });
    }
    /**
     * Add data.
     * @param {Array} data - Array of data to be added.
     * @param {string} [category] - Category to be added.
     * @api
     * @example
     * // without categories
     * chart.addData([10], '6');
     *
     * // with categories
     * chart.addData([10], '6');
     */
    addData(data, category) {
        this.resetSeries();
        this.animationControlFlag.updating = true;
        this.store.dispatch('addData', { data, category });
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set.
     * @api
     * @example
     * chart.setData({
     *   categories: ['1', '2', '3'],
     *   series: [
     *     {
     *       name: 'new series',
     *       data: [1, 2, 3],
     *     },
     *     {
     *       name: 'new series2',
     *       data: [4, 5, 6],
     *     }
     *   ]
     * });
     */
    setData(data) {
        const { categories, series } = data;
        this.resetSeries();
        this.store.dispatch('setData', { series: { gauge: series }, categories });
    }
    /**
     * Hide series data label.
     * @api
     * @example
     * chart.hideSeriesDataLabel();
     */
    hideSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: false } } },
        });
    }
    /**
     * Show series data label.
     * @api
     * @example
     * chart.showSeriesDataLabel();
     */
    showSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: true } } },
        });
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 500,
     *     title: 'Olympic Medals',
     *   },
     *   series: {
     *     selectable: true
     *   }
     * });
     */
    setOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     title: 'Olympic Medals',
     *   }
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.
     *      @param {number} seriesInfo.index - Index of data within series.
     * @api
     * @example
     * chart.showTooltip({index: 1});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));
    }
    /**
     * Hide tooltip.
     * @api
     * @example
     * chart.hideTooltip();
     */
    hideTooltip() {
        this.eventBus.emit('hideTooltip');
    }
    /**
     * Add plot band.
     * @param {Object} data - Plot info.
     *   @param {Array<string|number>} data.range - The range to be drawn.
     *   @param {string} data.color - Plot band color.
     *   @param {string} [data.id] - Plot id. The value on which the removePlotBand is based.
     * @api
     * @example
     * chart.addPlotBand({
     *   range: [10, 20],
     *   color: '#00ff22',
     *   id: 'plot-1',
     * });
     */
    addPlotBand(data) {
        this.store.dispatch('addGaugePlotBand', { data });
    }
    /**
     * Remove plot band with id.
     * @param {string} id - id of the plot band to be removed
     * @api
     * @example
     * chart.removePlotBand('plot-1');
     */
    removePlotBand(id) {
        this.store.dispatch('removeGaugePlotBand', { id });
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/heatmapChart.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/heatmapChart.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ HeatmapChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _store_heatmapAxes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/heatmapAxes */ "./node_modules/@toast-ui/chart/dist/esm/store/heatmapAxes.js");
/* harmony import */ var _store_heatmapSeriesData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/heatmapSeriesData */ "./node_modules/@toast-ui/chart/dist/esm/store/heatmapSeriesData.js");
/* harmony import */ var _store_colorValueScale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/colorValueScale */ "./node_modules/@toast-ui/chart/dist/esm/store/colorValueScale.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_dataLabels__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../component/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/component/dataLabels.js");
/* harmony import */ var _component_spectrumLegend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../component/spectrumLegend */ "./node_modules/@toast-ui/chart/dist/esm/component/spectrumLegend.js");
/* harmony import */ var _component_heatmapSeries__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/heatmapSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/heatmapSeries.js");
/* harmony import */ var _component_axisTitle__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/axisTitle */ "./node_modules/@toast-ui/chart/dist/esm/component/axisTitle.js");
/* harmony import */ var _component_axis__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");
/* harmony import */ var _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../brushes/dataLabel */ "./node_modules/@toast-ui/chart/dist/esm/brushes/dataLabel.js");
/* harmony import */ var _brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../brushes/spectrumLegend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/spectrumLegend.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");























function getSeriesWithYCategory(series, categories) {
    return series.map((rowSeries, y) => ({
        data: rowSeries,
        yCategory: categories.y[y],
    }));
}
/**
 * @class
 * @classdesc Heatmap Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making Heatmap Chart.
 *     @param {Object} props.data.categories
 *       @param {Array<string>} props.data.categories.x - X Categories.
 *       @param {Array<string>} props.data.categories.y - Y Categories.
 *     @param {Array<Array<number>>} props.data.series - Series data.
 *   @param {Object} [props.options] - Options for making Heatmap Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series]
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *       @param {boolean} [props.options.series.shift=false] - Whether to use shift when addData or not.
 *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.
 *     @param {Object} [props.options.xAxis]
 *       @param {string|Object} [props.options.xAxis.title] - Axis title.
 *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.
 *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.
 *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.xAxis.width] - Width of xAxis.
 *       @param {number} [props.options.xAxis.height] - Height of xAxis.
 *     @param {Object|Array<Object>} [props.options.yAxis] - If this option is an array type, use the secondary y axis.
 *       @param {string|Object} [props.options.yAxis.title] - Axis title.
 *       @param {boolean|Object} [props.options.yAxis.date] - Whether the y axis label is of date type. Format option used for date type. Whether the y axis label is of date type. If use date type, format option used for date type.
 *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.yAxis.width] - Width of yAxis.
 *       @param {number} [props.options.yAxis.height] - Height of yAxis.
 *     @param {Object} [props.options.plot]
 *       @param {number} [props.options.plot.width] - Width of plot.
 *       @param {number} [props.options.plot.height] - Height of plot.
 *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.
 *     @param {Object} [props.options.legend]
 *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.
 *       @param {boolean} [props.options.legend.visible] - Whether to show legend.
 *       @param {number} [props.options.legend.width] - Width of legend.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.
 *       @param {Object} [props.options.lang.noData] - No Data Layer Text.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Heatmap Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.
 *       @param {Object} [props.options.theme.series] - Series theme.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.xAxis] - X Axis theme.
 *       @param {Object} [props.options.theme.yAxis] - Y Axis theme.
 *       @param {Object} [props.options.theme.legend] - Legend theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.plot] - Plot theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 * @extends Chart
 */
class HeatmapChart extends _chart__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(props) {
        super({
            el: props.el,
            categories: props.data.categories,
            options: props.options,
            series: {
                heatmap: getSeriesWithYCategory(props.data.series, props.data.categories),
            },
            modules: [_store_heatmapSeriesData__WEBPACK_IMPORTED_MODULE_1__["default"], _store_colorValueScale__WEBPACK_IMPORTED_MODULE_2__["default"], _store_heatmapAxes__WEBPACK_IMPORTED_MODULE_3__["default"]],
        });
    }
    initialize() {
        super.initialize();
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_4__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_5__["default"]);
        this.componentManager.add(_component_spectrumLegend__WEBPACK_IMPORTED_MODULE_6__["default"]);
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_7__["default"], { chartEl: this.el });
        this.componentManager.add(_component_heatmapSeries__WEBPACK_IMPORTED_MODULE_8__["default"]);
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_9__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_9__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_10__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_10__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_11__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_12__["default"]);
        this.componentManager.add(_component_dataLabels__WEBPACK_IMPORTED_MODULE_13__["default"]);
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_14__["default"], { chartEl: this.el });
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_15__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_16__,
            _brushes_axis__WEBPACK_IMPORTED_MODULE_17__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_18__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_19__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_20__,
            _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_21__,
            _brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_22__,
        ]);
    }
    /**
     * Add data.
     * @param {Array} data - Array of data to be added.
     * @param {string} category - Category to be added.
     * @api
     * @example
     * chart.addData([10, 20], '6');
     */
    addData(data, category) {
        this.animationControlFlag.updating = true;
        this.resetSeries();
        this.store.dispatch('addData', { data, category });
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added.
     *   @param {string} data.name - Series name.
     *   @param {Array<number>} data.data - Array of data to be added.
     * @param {Object} dataInfo - Category information of the series.
     *   @param {Object} dataInfo.category - Y category.
     * @api
     * @example
     * chart.addSeries({
     *   name: 'newSeries',
     *   data: [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],
     * });
     */
    addSeries(data, dataInfo) {
        this.resetSeries();
        this.store.dispatch('addHeatmapSeries', Object.assign({ data }, dataInfo));
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set.
     *   @param {Array<string>} data.categories.x - X Categories.
     *   @param {Array<string>} data.categories.y - Y Categories.
     * @param {Array<Array<number>>} data.series - Series data.
     * @api
     * @example
     * chart.setData({
     *   categories: {
     *     x: ['1', '2', '3' ],
     *     y: ['A', 'B'],
     *   },
     *   series: [
     *     [1, 2, 3],
     *     [4, 5, 6],
     *   ]
     * });
     */
    setData(data) {
        const { categories, series } = data;
        this.resetSeries();
        this.store.dispatch('setData', {
            series: { heatmap: getSeriesWithYCategory(series, categories) },
            categories,
        });
    }
    /**
     * Hide series data label.
     * @api
     * @example
     * chart.hideSeriesDataLabel();
     */
    hideSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: false } } },
        });
    }
    /**
     * Show series data label.
     * @api
     * @example
     * chart.showSeriesDataLabel();
     */
    showSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: true } } },
        });
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   xAxis: {
     *     title: 'Month',
     *   },
     *   yAxis: {
     *     title: 'Energy (kWh)',
     *   },
     *   series: {
     *     selectable: true,
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    setOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.
     *      @param {number} seriesInfo.seriesIndex - Index of series.
     *      @param {number} seriesInfo.index - Index of data within series.
     * @api
     * @example
     * chart.showTooltip({index: 1, seriesIndex: 2});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));
    }
    /**
     * Hide tooltip.
     * @api
     * @example
     * chart.hideTooltip();
     */
    hideTooltip() {
        this.eventBus.emit('hideTooltip');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/lineAreaChart.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/lineAreaChart.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LineAreaChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _store_dataRange__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/dataRange */ "./node_modules/@toast-ui/chart/dist/esm/store/dataRange.js");
/* harmony import */ var _store_scale__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/scale */ "./node_modules/@toast-ui/chart/dist/esm/store/scale.js");
/* harmony import */ var _store_axes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../store/axes */ "./node_modules/@toast-ui/chart/dist/esm/store/axes.js");
/* harmony import */ var _store_plot__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../store/plot */ "./node_modules/@toast-ui/chart/dist/esm/store/plot.js");
/* harmony import */ var _store_stackSeriesData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/stackSeriesData */ "./node_modules/@toast-ui/chart/dist/esm/store/stackSeriesData.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_plot__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/plot */ "./node_modules/@toast-ui/chart/dist/esm/component/plot.js");
/* harmony import */ var _component_lineSeries__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../component/lineSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/lineSeries.js");
/* harmony import */ var _component_areaSeries__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/areaSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/areaSeries.js");
/* harmony import */ var _component_axis__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../component/axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");
/* harmony import */ var _component_legend__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/legend */ "./node_modules/@toast-ui/chart/dist/esm/component/legend.js");
/* harmony import */ var _component_dataLabels__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../component/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/component/dataLabels.js");
/* harmony import */ var _component_axisTitle__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../component/axisTitle */ "./node_modules/@toast-ui/chart/dist/esm/component/axisTitle.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_rangeSelection__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../component/rangeSelection */ "./node_modules/@toast-ui/chart/dist/esm/component/rangeSelection.js");
/* harmony import */ var _component_resetButton__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../component/resetButton */ "./node_modules/@toast-ui/chart/dist/esm/component/resetButton.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _brushes_lineSeries__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../brushes/lineSeries */ "./node_modules/@toast-ui/chart/dist/esm/brushes/lineSeries.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");
/* harmony import */ var _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../brushes/dataLabel */ "./node_modules/@toast-ui/chart/dist/esm/brushes/dataLabel.js");
/* harmony import */ var _brushes_resetButton__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../brushes/resetButton */ "./node_modules/@toast-ui/chart/dist/esm/brushes/resetButton.js");






























/**
 * @class
 * @classdesc LineArea Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making LineArea Chart.
 *     @param {Array<string>} props.data.categories - Categories.
 *     @param {Array<Object>} props.data.series - Series data.
 *       @param {Array<Object>} props.data.series.line - Line series data. Coordinate types data is not possible.
 *       @param {Array<Object>} props.data.series.area - Area series data.
 *   @param {Object} [props.options] - Options for making LineArea Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series] - Write common options in the upper depth and separate options to be applied to each chart.
 *       @param {Object} [props.options.series.line] - Options to be applied to the line chart. 'spline', 'showDot', 'dataLabels' is available. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Line Chart guide} on github.
 *       @param {Object} [props.options.series.area] - Options to be applied to the area chart. 'stack', 'spline', 'showDot', 'dataLabels' is available. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Area Chart guide} on github.
 *       @param {boolean} [props.options.series.zoomable=false] - Whether to use zoom feature or not.
 *       @param {boolean} [props.options.series.rangeSelectable=false] - Whether to use range selection feature or not.
 *       @param {boolean} [props.options.series.showDot=false] - Whether to show dot or not.
 *       @param {boolean} [props.options.series.spline=false] - Whether to make spline chart or not.
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *       @param {boolean} [props.options.series.shift=false] - Whether to use shift when addData or not.
 *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.
 *     @param {Object} [props.options.xAxis]
 *       @param {string|Object} [props.options.xAxis.title] - Axis title.
 *       @param {boolean} [props.options.xAxis.pointOnColumn=false] - Whether to move the start of the chart to the center of the column.
 *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.
 *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.
 *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.xAxis.width] - Width of xAxis.
 *       @param {number} [props.options.xAxis.height] - Height of xAxis.
 *     @param {Object|Array<Object>} [props.options.yAxis] - If this option is an array type, use the secondary y axis.
 *       @param {string|Object} [props.options.yAxis.title] - Axis title.
 *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.yAxis.width] - Width of yAxis.
 *       @param {number} [props.options.yAxis.height] - Height of yAxis.
 *     @param {Object} [props.options.plot]
 *       @param {number} [props.options.plot.width] - Width of plot.
 *       @param {number} [props.options.plot.height] - Height of plot.
 *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.
 *       @param {Array<Object>} [props.options.plot.lines] - Plot lines information. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Plot guide} on github.
 *       @param {Array<Object>} [props.options.plot.bands] - Plot bands information. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Plot guide} on github.
 *     @param {Object} [props.options.legend]
 *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.
 *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.
 *       @param {boolean} [props.options.legend.visible] - Whether to show legend.
 *       @param {number} [props.options.legend.width] - Width of legend.
 *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.
 *       @param {Object} [props.options.lang.noData] - No Data Layer Text.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|LineArea Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.
 *       @param {Object} [props.options.theme.series] - Series theme. Each theme to be applied to the two charts should be written separately.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.xAxis] - X Axis theme.
 *       @param {Object|Array<Object>} [props.options.theme.yAxis] - Y Axis theme. In the case of an arrangement, the first is the main axis and the second is the theme for the secondary axis.
 *       @param {Object} [props.options.theme.legend] - Legend theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.plot] - Plot theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 * @extends Chart
 */
class LineAreaChart extends _chart__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(props) {
        super({
            el: props.el,
            options: props.options,
            series: props.data.series,
            categories: props.data.categories,
            modules: [_store_stackSeriesData__WEBPACK_IMPORTED_MODULE_1__["default"], _store_dataRange__WEBPACK_IMPORTED_MODULE_2__["default"], _store_scale__WEBPACK_IMPORTED_MODULE_3__["default"], _store_axes__WEBPACK_IMPORTED_MODULE_4__["default"], _store_plot__WEBPACK_IMPORTED_MODULE_5__["default"]],
        });
    }
    initialize() {
        super.initialize();
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_6__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_7__["default"]);
        this.componentManager.add(_component_plot__WEBPACK_IMPORTED_MODULE_8__["default"]);
        this.componentManager.add(_component_legend__WEBPACK_IMPORTED_MODULE_9__["default"]);
        this.componentManager.add(_component_areaSeries__WEBPACK_IMPORTED_MODULE_10__["default"]);
        this.componentManager.add(_component_lineSeries__WEBPACK_IMPORTED_MODULE_11__["default"]);
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_12__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_12__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_12__["default"], { name: 'secondaryYAxis' });
        this.componentManager.add(_component_dataLabels__WEBPACK_IMPORTED_MODULE_13__["default"]);
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_14__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_14__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_14__["default"], { name: 'secondaryYAxis' });
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_15__["default"], { chartEl: this.el });
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_16__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_17__["default"]);
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_18__["default"], { chartEl: this.el });
        this.componentManager.add(_component_rangeSelection__WEBPACK_IMPORTED_MODULE_19__["default"]);
        this.componentManager.add(_component_resetButton__WEBPACK_IMPORTED_MODULE_20__["default"]);
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_21__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_22__,
            _brushes_axis__WEBPACK_IMPORTED_MODULE_23__,
            _brushes_lineSeries__WEBPACK_IMPORTED_MODULE_24__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_25__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_26__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_27__,
            _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_28__,
            _brushes_resetButton__WEBPACK_IMPORTED_MODULE_29__,
        ]);
    }
    /**
     * Add data.
     * @param {Array<number>} data - Array of data to be added.
     * @param {string} category - Category to be added.
     * @param {string} chartType - Which type of chart to add.
     * @api
     * @example
     * chart.addData([10, 20], '6', 'line');
     */
    addData(data, category, chartType) {
        this.animationControlFlag.updating = true;
        this.resetSeries();
        this.store.dispatch('addData', { data, category, chartType });
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added.
     *   @param {string} data.name - Series name.
     *   @param {Array<number>} data.data - Array of data to be added.
     * @param {Object} dataInfo - Which type of chart to add.
     *   @param {Object} dataInfo.chartType - Chart type.
     * @api
     * @example
     * chart.addSeries(
     *   {
     *     name: 'newSeries',
     *     data: [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],
     *   },
     *   {
     *     chartType: 'line'
     *   });
     */
    addSeries(data, dataInfo) {
        this.resetSeries();
        this.store.dispatch('addSeries', Object.assign({ data }, dataInfo));
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set
     * @api
     * @example
     * chart.setData({
     *   categories: ['1', '2', '3'],
     *   series: {
     *     line: [
     *       {
     *         name: 'A',
     *         data: [1, 2, 3],
     *       }
     *     ],
     *     area: [
     *       {
     *         name: 'B',
     *         data: [4, 5, 6],
     *       }
     *     ]
     *   }
     * });
     */
    setData(data) {
        this.resetSeries();
        this.store.dispatch('setData', data);
    }
    /**
     * Add plot line.
     * @param {Object} data - plot info
     *   @param {string|number} data.value - The value where the plot line will be drawn.
     *   @param {string} data.color - Plot line color.
     *   @param {string} [data.id] - Plot id. The value on which the removePlotLine is based.
     * @api
     * @example
     * chart.addPlotLine({
     *   value: 2,
     *   color: '#00ff22',
     *   id: 'plot-1',
     * });
     */
    addPlotLine(data) {
        this.store.dispatch('addPlotLine', { data });
    }
    /**
     * Remove plot line with id.
     * @param {string} id - Id of the plot line to be removed.
     * @api
     * @example
     * chart.removePlotLine('plot-1');
     */
    removePlotLine(id) {
        this.store.dispatch('removePlotLine', { id });
    }
    /**
     * Add plot band.
     * @param {Object} data - Plot info.
     * @param {Array<string|number>} data.range - The range to be drawn.
     * @param {string} data.color - Plot band color.
     * @param {string} [data.id] - Plot id. The value on which the removePlotBand is based.
     * @api
     * @example
     * chart.addPlotBand({
     *   value: [2, 4],
     *   color: '#00ff22',
     *   id: 'plot-1',
     * });
     */
    addPlotBand(data) {
        this.store.dispatch('addPlotBand', { data });
    }
    /**
     * Remove plot band with id.
     * @param {string} id - Id of the plot band to be removed.
     * @api
     * @example
     * chart.removePlotBand('plot-1');
     */
    removePlotBand(id) {
        this.store.dispatch('removePlotBand', { id });
    }
    /**
     * Hide series data label.
     * @api
     * @example
     * chart.hideSeriesDataLabel();
     */
    hideSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: false } } },
        });
    }
    /**
     * Show series data label.
     * @api
     * @example
     * chart.showSeriesDataLabel();
     */
    showSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: true } } },
        });
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   xAxis: {
     *     title: 'Month',
     *     date: { format: 'yy/MM' },
     *   },
     *   yAxis: {
     *     title: 'Energy (kWh)',
     *   },
     *   series: {
     *     line: {
     *       showDot: true
     *     },
     *     selectable: true,
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    setOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   series: {
     *     line: {
     *       showDot: true,
     *     },
     *   },
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.
     *      @param {number} seriesInfo.seriesIndex - Index of series.
     *      @param {number} seriesInfo.index - Index of data within series.
     *      @param {string} seriesInfo.chartType - Specify which chart to select.
     * @api
     * @example
     * chart.showTooltip({index: 1, seriesIndex: 2, chartType: 'line'});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign({}, seriesInfo));
    }
    /**
     * Hide tooltip.
     * @api
     * @example
     * chart.hideTooltip();
     */
    hideTooltip() {
        this.eventBus.emit('hideTooltip');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/lineChart.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/lineChart.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LineChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _store_dataRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/dataRange */ "./node_modules/@toast-ui/chart/dist/esm/store/dataRange.js");
/* harmony import */ var _store_scale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/scale */ "./node_modules/@toast-ui/chart/dist/esm/store/scale.js");
/* harmony import */ var _store_axes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/axes */ "./node_modules/@toast-ui/chart/dist/esm/store/axes.js");
/* harmony import */ var _store_plot__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../store/plot */ "./node_modules/@toast-ui/chart/dist/esm/store/plot.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_plot__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/plot */ "./node_modules/@toast-ui/chart/dist/esm/component/plot.js");
/* harmony import */ var _component_lineSeries__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/lineSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/lineSeries.js");
/* harmony import */ var _component_axis__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");
/* harmony import */ var _component_legend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/legend */ "./node_modules/@toast-ui/chart/dist/esm/component/legend.js");
/* harmony import */ var _component_dataLabels__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../component/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/component/dataLabels.js");
/* harmony import */ var _component_axisTitle__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../component/axisTitle */ "./node_modules/@toast-ui/chart/dist/esm/component/axisTitle.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_rangeSelection__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../component/rangeSelection */ "./node_modules/@toast-ui/chart/dist/esm/component/rangeSelection.js");
/* harmony import */ var _component_resetButton__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../component/resetButton */ "./node_modules/@toast-ui/chart/dist/esm/component/resetButton.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _brushes_lineSeries__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../brushes/lineSeries */ "./node_modules/@toast-ui/chart/dist/esm/brushes/lineSeries.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");
/* harmony import */ var _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../brushes/dataLabel */ "./node_modules/@toast-ui/chart/dist/esm/brushes/dataLabel.js");
/* harmony import */ var _brushes_resetButton__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../brushes/resetButton */ "./node_modules/@toast-ui/chart/dist/esm/brushes/resetButton.js");




























/**
 * @class
 * @classdesc Line Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making Line Chart.
 *     @param {Array<string>} [props.data.categories] - Categories.
 *     @param {Array<Object>} props.data.series - Series data.
 *       @param {string} props.data.series.name - Series name.
 *       @param {Array<number|Object|Array>} props.data.series.data - Series data.
 *   @param {Object} [props.options] - Options for making Line Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series]
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *       @param {boolean} [props.options.series.showDot=false] - Whether to show dot or not.
 *       @param {boolean} [props.options.series.spline=false] - Whether to make spline chart or not.
 *       @param {boolean} [props.options.series.zoomable=false] - Whether to use zoom feature or not.
 *       @param {boolean} [props.options.series.rangeSelectable=false] - Whether to use range selection feature or not.
 *       @param {string} [props.options.series.eventDetectType] - Event detect type. 'near', 'nearest', 'grouped', 'point' is available.
 *       @param {boolean} [props.options.series.shift=false] - Whether to use shift when addData or not.
 *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.
 *     @param {Object} [props.options.xAxis]
 *       @param {string|Object} [props.options.xAxis.title] - Axis title.
 *       @param {boolean} [props.options.xAxis.pointOnColumn=false] - Whether to move the start of the chart to the center of the column.
 *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.
 *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.
 *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.xAxis.width] - Width of xAxis.
 *       @param {number} [props.options.xAxis.height] - Height of xAxis.
 *     @param {Object|Array<Object>} [props.options.yAxis] - If this option is an array type, use the secondary y axis.
 *       @param {string|Object} [props.options.yAxis.title] - Axis title.
 *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.yAxis.width] - Width of yAxis.
 *       @param {number} [props.options.yAxis.height] - Height of yAxis.
 *     @param {Object} [props.options.plot]
 *       @param {number} [props.options.plot.width] - Width of plot.
 *       @param {number} [props.options.plot.height] - Height of plot.
 *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.
 *       @param {Array<Object>} [props.options.plot.lines] - Plot lines information. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Plot guide} on github.
 *       @param {Array<Object>} [props.options.plot.bands] - Plot bands information. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Plot guide} on github.
 *     @param {Object} [props.options.legend]
 *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.
 *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.
 *       @param {boolean} [props.options.legend.visible] - Whether to show legend.
 *       @param {number} [props.options.legend.width] - Width of legend.
 *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.
 *       @param {Object} [props.options.lang.noData] - No Data Layer Text.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Line Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.
 *       @param {Object} [props.options.theme.series] - Series theme.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.xAxis] - X Axis theme.
 *       @param {Object|Array<Object>} [props.options.theme.yAxis] - Y Axis theme. In the case of an arrangement, the first is the main axis and the second is the theme for the secondary axis.
 *       @param {Object} [props.options.theme.legend] - Legend theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.plot] - Plot theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 * @extends Chart
 */
class LineChart extends _chart__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(props) {
        var _a;
        super({
            el: props.el,
            options: props.options,
            series: {
                line: props.data.series,
            },
            categories: (_a = props.data) === null || _a === void 0 ? void 0 : _a.categories,
            modules: [_store_dataRange__WEBPACK_IMPORTED_MODULE_1__["default"], _store_scale__WEBPACK_IMPORTED_MODULE_2__["default"], _store_axes__WEBPACK_IMPORTED_MODULE_3__["default"], _store_plot__WEBPACK_IMPORTED_MODULE_4__["default"]],
        });
    }
    initialize() {
        super.initialize();
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_5__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_6__["default"]);
        this.componentManager.add(_component_plot__WEBPACK_IMPORTED_MODULE_7__["default"]);
        this.componentManager.add(_component_legend__WEBPACK_IMPORTED_MODULE_8__["default"]);
        this.componentManager.add(_component_lineSeries__WEBPACK_IMPORTED_MODULE_9__["default"]);
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_10__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_10__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_10__["default"], { name: 'secondaryYAxis' });
        this.componentManager.add(_component_dataLabels__WEBPACK_IMPORTED_MODULE_11__["default"]);
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_12__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_12__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_12__["default"], { name: 'secondaryYAxis' });
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_13__["default"], { chartEl: this.el });
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_14__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_15__["default"]);
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_16__["default"], { chartEl: this.el });
        this.componentManager.add(_component_rangeSelection__WEBPACK_IMPORTED_MODULE_17__["default"]);
        this.componentManager.add(_component_resetButton__WEBPACK_IMPORTED_MODULE_18__["default"]);
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_19__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_20__,
            _brushes_axis__WEBPACK_IMPORTED_MODULE_21__,
            _brushes_lineSeries__WEBPACK_IMPORTED_MODULE_22__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_23__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_24__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_25__,
            _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_26__,
            _brushes_resetButton__WEBPACK_IMPORTED_MODULE_27__,
        ]);
    }
    /**
     * Add data.
     * @param {Array<number|Object|Array>} data - Array of data to be added.
     * @param {string} category - Category to be added.
     * @api
     * @example
     * chart.addData([10, 20], '6');
     */
    addData(data, category) {
        var _a;
        if ((_a = this.store.state.options.series) === null || _a === void 0 ? void 0 : _a.showDot) {
            this.animationControlFlag.updating = true;
        }
        this.resetSeries();
        this.store.dispatch('addData', { data, category });
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added.
     *   @param {string} data.name - Series name.
     *   @param {Array<number|Object|Array>} data.data - Array of data to be added.
     * @api
     * @example
     * chart.addSeries({
     *   name: 'newSeries',
     *   data: [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],
     * });
     */
    addSeries(data) {
        this.resetSeries();
        this.store.dispatch('addSeries', { data });
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set.
     * @api
     * @example
     * chart.setData({
     *   categories: ['1', '2', '3'],
     *   series: [
     *     {
     *       name: 'new series',
     *       data: [1, 2, 3],
     *     },
     *     {
     *       name: 'new series2',
     *       data: [4, 5, 6],
     *     }
     *   ]
     * });
     */
    setData(data) {
        const { categories, series } = data;
        this.resetSeries();
        this.store.dispatch('setData', { series: { line: series }, categories });
    }
    /**
     * Add plot line.
     * @param {Object} data - Plot info.
     *    @param {string|number} data.value - The value where the plot line will be drawn.
     *    @param {string} data.color - Plot line color.
     *    @param {string} [data.id] - Plot id. The value on which the removePlotLine is based.
     * @api
     * @example
     * chart.addPlotLine({
     *   value: 2,
     *   color: '#00ff22',
     *   id: 'plot-1',
     * });
     */
    addPlotLine(data) {
        this.store.dispatch('addPlotLine', { data });
    }
    /**
     * Remove plot line with id.
     * @param {string} id - Id of the plot line to be removed.
     * @api
     * @example
     * chart.removePlotLine('plot-1');
     */
    removePlotLine(id) {
        this.store.dispatch('removePlotLine', { id });
    }
    /**
     * Add plot band.
     * @param {Object} data - Plot info.
     *   @param {Array<string|number>} data.range - The range to be drawn.
     *   @param {string} data.color - Plot band color.
     *   @param {string} [data.id] - Plot id. The value on which the removePlotBand is based.
     * @api
     * @example
     * chart.addPlotBand({
     *   value: [2, 4],
     *   color: '#00ff22',
     *   id: 'plot-1',
     * });
     */
    addPlotBand(data) {
        this.store.dispatch('addPlotBand', { data });
    }
    /**
     * Remove plot band with id.
     * @param {string} id - id of the plot band to be removed
     * @api
     * @example
     * chart.removePlotBand('plot-1');
     */
    removePlotBand(id) {
        this.store.dispatch('removePlotBand', { id });
    }
    /**
     * Hide series data label.
     * @api
     * @example
     * chart.hideSeriesDataLabel();
     */
    hideSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: false } } },
        });
    }
    /**
     * Show series data label.
     * @api
     * @example
     * chart.showSeriesDataLabel();
     */
    showSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: true } } },
        });
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   xAxis: {
     *     title: 'Month',
     *     date: { format: 'yy/MM' },
     *   },
     *   yAxis: {
     *     title: 'Energy (kWh)',
     *   },
     *   series: {
     *     selectable: true,
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    setOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.
     *      @param {number} seriesInfo.index - Index of data within series. If 'series.eventDetectType' is "grouped", only seriesIndex is needed.
     *      @param {number} [seriesInfo.seriesIndex] - Index of series.
     * @api
     * @example
     * chart.showTooltip({index: 1, seriesIndex: 2});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign({}, seriesInfo));
    }
    /**
     * Hide tooltip.
     * @api
     * @example
     * chart.hideTooltip();
     */
    hideTooltip() {
        this.eventBus.emit('hideTooltip');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/lineScatterChart.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/lineScatterChart.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LineScatterChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _store_dataRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/dataRange */ "./node_modules/@toast-ui/chart/dist/esm/store/dataRange.js");
/* harmony import */ var _store_scale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/scale */ "./node_modules/@toast-ui/chart/dist/esm/store/scale.js");
/* harmony import */ var _store_axes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/axes */ "./node_modules/@toast-ui/chart/dist/esm/store/axes.js");
/* harmony import */ var _store_plot__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../store/plot */ "./node_modules/@toast-ui/chart/dist/esm/store/plot.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_plot__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/plot */ "./node_modules/@toast-ui/chart/dist/esm/component/plot.js");
/* harmony import */ var _component_lineSeries__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/lineSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/lineSeries.js");
/* harmony import */ var _component_scatterSeries__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/scatterSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/scatterSeries.js");
/* harmony import */ var _component_axis__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../component/axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");
/* harmony import */ var _component_legend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/legend */ "./node_modules/@toast-ui/chart/dist/esm/component/legend.js");
/* harmony import */ var _component_dataLabels__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../component/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/component/dataLabels.js");
/* harmony import */ var _component_axisTitle__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../component/axisTitle */ "./node_modules/@toast-ui/chart/dist/esm/component/axisTitle.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_rangeSelection__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../component/rangeSelection */ "./node_modules/@toast-ui/chart/dist/esm/component/rangeSelection.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _brushes_lineSeries__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../brushes/lineSeries */ "./node_modules/@toast-ui/chart/dist/esm/brushes/lineSeries.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");
/* harmony import */ var _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../brushes/dataLabel */ "./node_modules/@toast-ui/chart/dist/esm/brushes/dataLabel.js");
/* harmony import */ var _brushes_resetButton__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../brushes/resetButton */ "./node_modules/@toast-ui/chart/dist/esm/brushes/resetButton.js");
/* harmony import */ var _brushes_scatterSeries__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../brushes/scatterSeries */ "./node_modules/@toast-ui/chart/dist/esm/brushes/scatterSeries.js");





























/**
 * @class
 * @classdesc LineScatter Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making LineArea Chart.
 *     @param {Array<Object>} props.data.series - Series data.
 *       @param {Array<Object>} props.data.series.line - Line series data. Only coordinate type data is possible.
 *       @param {Array<Object>} props.data.series.scatter - Scatter series data.
 *   @param {Object} [props.options] - Options for making LineScatter Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series] - Write common options in the upper depth and separate options to be applied to each chart.
 *       @param {Object} [props.options.series.line] - Options to be applied to the line chart. 'spline', 'showDot' is available. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Line Chart guide} on github.
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.
 *     @param {Object} [props.options.xAxis]
 *       @param {string|Object} [props.options.xAxis.title] - Axis title.
 *       @param {boolean} [props.options.xAxis.pointOnColumn=false] - Whether to move the start of the chart to the center of the column.
 *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.
 *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.
 *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.xAxis.width] - Width of xAxis.
 *       @param {number} [props.options.xAxis.height] - Height of xAxis.
 *     @param {Object|Array<Object>} [props.options.yAxis] - If this option is an array type, use the secondary y axis.
 *       @param {string|Object} [props.options.yAxis.title] - Axis title.
 *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.yAxis.width] - Width of yAxis.
 *       @param {number} [props.options.yAxis.height] - Height of yAxis.
 *     @param {Object} [props.options.plot]
 *       @param {number} [props.options.plot.width] - Width of plot.
 *       @param {number} [props.options.plot.height] - Height of plot.
 *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.
 *     @param {Object} [props.options.legend]
 *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.
 *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.
 *       @param {boolean} [props.options.legend.visible] - Whether to show legend.
 *       @param {number} [props.options.legend.width] - Width of legend.
 *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.
 *       @param {Object} [props.options.lang.noData] - No Data Layer Text.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|LineScatter Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.
 *       @param {Object} [props.options.theme.series] - Series theme. Each theme to be applied to the two charts should be written separately.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.xAxis] - X Axis theme.
 *       @param {Object|Array<Object>} [props.options.theme.yAxis] - Y Axis theme. In the case of an arrangement, the first is the main axis and the second is the theme for the secondary axis.
 *       @param {Object} [props.options.theme.legend] - Legend theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.plot] - Plot theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 * @extends Chart
 */
class LineScatterChart extends _chart__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(props) {
        super({
            el: props.el,
            options: props.options,
            series: props.data.series,
            modules: [_store_dataRange__WEBPACK_IMPORTED_MODULE_1__["default"], _store_scale__WEBPACK_IMPORTED_MODULE_2__["default"], _store_axes__WEBPACK_IMPORTED_MODULE_3__["default"], _store_plot__WEBPACK_IMPORTED_MODULE_4__["default"]],
        });
    }
    initialize() {
        super.initialize();
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_5__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_6__["default"]);
        this.componentManager.add(_component_plot__WEBPACK_IMPORTED_MODULE_7__["default"]);
        this.componentManager.add(_component_legend__WEBPACK_IMPORTED_MODULE_8__["default"]);
        this.componentManager.add(_component_lineSeries__WEBPACK_IMPORTED_MODULE_9__["default"]);
        this.componentManager.add(_component_scatterSeries__WEBPACK_IMPORTED_MODULE_10__["default"]);
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_11__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_11__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_11__["default"], { name: 'secondaryYAxis' });
        this.componentManager.add(_component_dataLabels__WEBPACK_IMPORTED_MODULE_12__["default"]);
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_13__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_13__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_13__["default"], { name: 'secondaryYAxis' });
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_14__["default"], { chartEl: this.el });
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_15__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_16__["default"]);
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_17__["default"], { chartEl: this.el });
        this.componentManager.add(_component_rangeSelection__WEBPACK_IMPORTED_MODULE_18__["default"]);
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_19__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_20__,
            _brushes_axis__WEBPACK_IMPORTED_MODULE_21__,
            _brushes_lineSeries__WEBPACK_IMPORTED_MODULE_22__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_23__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_24__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_25__,
            _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_26__,
            _brushes_resetButton__WEBPACK_IMPORTED_MODULE_27__,
            _brushes_scatterSeries__WEBPACK_IMPORTED_MODULE_28__,
        ]);
    }
    /**
     * Add data.
     * @param {Array} data - Array of data to be added.
     * @param {string} chartType - Which type of chart to add.
     * @api
     * @example
     * chart.addData([{x: 10, y: 20}, {x: 30, y: 40}], 'line');
     */
    addData(data, chartType) {
        this.animationControlFlag.updating = true;
        this.resetSeries();
        this.store.dispatch('addData', { data, chartType });
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added.
     *   @param {string} data.name - Series name.
     *   @param {Array<Object>} data.data - Array of data to be added.
     * @param {Object} dataInfo - Which type of chart to add.
     *   @param {Object} dataInfo.chartType - Chart type.
     * @api
     * @example
     * chart.addSeries(
     *   {
     *     name: 'newSeries',
     *     data: [{x: 10, y: 20}, {x: 30, y: 40}],
     *   },
     *   {
     *     chartType: 'line'
     *   });
     */
    addSeries(data, dataInfo) {
        this.resetSeries();
        this.store.dispatch('addSeries', Object.assign({ data }, dataInfo));
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set
     * @api
     * @example
     * chart.setData({
     *   series: {
     *     line: [
     *       {
     *         name: 'A',
     *         data: [{x: 10, y: 20}, {x: 30, y: 40}],
     *       }
     *     ],
     *     scatter: [
     *       {
     *         name: 'B',
     *         data: [{x: 30, y: 20}, {x: 40, y: 40}],
     *       }
     *     ]
     *   }
     * });
     */
    setData(data) {
        this.resetSeries();
        this.store.dispatch('setData', data);
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   xAxis: {
     *     title: 'Month',
     *     date: { format: 'yy/MM' },
     *   },
     *   yAxis: {
     *     title: 'Energy (kWh)',
     *   },
     *   series: {
     *     line: {
     *       showDot: true,
     *     },
     *     selectable: true,
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    setOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   series: {
     *     line: {
     *       showDot: true,
     *     },
     *   },
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed
     *      @param {number} seriesInfo.seriesIndex - Index of series
     *      @param {number} seriesInfo.index - Index of data within series
     *      @param {string} seriesInfo.chartType - Specify which chart to select.
     * @api
     * @example
     * chart.showTooltip({index: 1, seriesIndex: 2, chartType: 'scatter'});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));
    }
    /**
     * Hide tooltip.
     * @api
     * @example
     * chart.hideTooltip();
     */
    hideTooltip() {
        this.eventBus.emit('hideTooltip');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/nestedPieChart.js":
/*!************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/nestedPieChart.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NestedPieChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _store_nestedPieSeriesData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/nestedPieSeriesData */ "./node_modules/@toast-ui/chart/dist/esm/store/nestedPieSeriesData.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_legend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../component/legend */ "./node_modules/@toast-ui/chart/dist/esm/component/legend.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_dataLabels__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/component/dataLabels.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_pieSeries__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../component/pieSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/pieSeries.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");
/* harmony import */ var _brushes_sector__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../brushes/sector */ "./node_modules/@toast-ui/chart/dist/esm/brushes/sector.js");
/* harmony import */ var _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../brushes/dataLabel */ "./node_modules/@toast-ui/chart/dist/esm/brushes/dataLabel.js");


















/**
 * @class
 * @classdesc NestedPie Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making NestedPie Chart.
 *     @param {Array<string>} [props.data.categories] - Categories.
 *     @param {Array<Object>} props.data.series - Series data.
 *       @param {string} props.data.series.name - Series name.
 *       @param {number} props.data.series.data - Series data.
 *       @param {string} [props.data.series.parentName] - Value specifying parent data when using group nested pie chart.
 *   @param {Object} [props.options] - Options for making NestedPie Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series]
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.
 *       @param {Object} [props.options.series.aliasName] - Chart options are specified based on the alias name. 'radiusRange', 'angleRange', 'clockwise', 'dataLabels' is available. For specific information, refer to the {@link https://github.com/nhn/tui.chart|NestedPie Chart guide} on github.
 *     @param {Object} [props.options.legend]
 *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.
 *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.
 *       @param {boolean} [props.options.legend.visible] - Whether to show legend.
 *       @param {number} [props.options.legend.width] - Width of legend.
 *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.
 *       @param {Object} [props.options.lang.noData] - No Data Layer Text.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|NestedPie Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.
 *       @param {Object} [props.options.theme.series] - Series theme.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.legend] - Legend theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 * @extends Chart
 */
class NestedPieChart extends _chart__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor({ el, options, data: { series, categories } }) {
        super({
            el,
            options,
            series: { pie: series },
            categories,
            modules: [_store_nestedPieSeriesData__WEBPACK_IMPORTED_MODULE_1__["default"]],
        });
    }
    initialize() {
        var _a;
        super.initialize();
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_2__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_3__["default"]);
        this.componentManager.add(_component_legend__WEBPACK_IMPORTED_MODULE_4__["default"]);
        (_a = this.store.initStoreState.series.pie, (_a !== null && _a !== void 0 ? _a : [])).forEach(({ name }) => {
            this.componentManager.add(_component_pieSeries__WEBPACK_IMPORTED_MODULE_5__["default"], { alias: name });
        });
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_6__["default"], { chartEl: this.el });
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_7__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_8__["default"]);
        this.componentManager.add(_component_dataLabels__WEBPACK_IMPORTED_MODULE_9__["default"]);
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_10__["default"], { chartEl: this.el });
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_11__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_12__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_13__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_14__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_15__,
            _brushes_sector__WEBPACK_IMPORTED_MODULE_16__,
            _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_17__,
        ]);
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added.
     *   @param {string} data.name - Series name.
     *   @param {Array<Object>} data.data - Array of data to be added.
     * @param {Object} dataInfo - Which name of chart to add.
     *   @param {string} dataInfo.name - Chart series name.
     * @api
     * @example
     * chart.addSeries(
     *   {
     *     name: 'newSeries',
     *     data: [
     *       { name: 'A', data: 10 },
     *       { name: 'B', data: 20 },
     *     ],
     *   },
     *   {
     *     name: 'series name'
     *   });
     */
    addSeries(data, dataInfo) {
        this.resetSeries();
        this.store.dispatch('addSeries', Object.assign({ data }, dataInfo));
        this.componentManager.add(_component_pieSeries__WEBPACK_IMPORTED_MODULE_5__["default"], { alias: data.name });
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set
     * @api
     * @example
     * chart.setData({
     *   categories: ['A', 'B'],
     *   series: [
     *     {
     *       name: 'browsers',
     *       data: [
     *         {
     *           name: 'Chrome',
     *           data: 50,
     *         },
     *         {
     *           name: 'Safari',
     *           data: 20,
     *         },
     *       ]
     *     },
     *     {
     *       name: 'versions',
     *       data: [
     *         {
     *           name: '1',
     *           data: 50,
     *         },
     *         {
     *           name: '2',
     *           data: 20,
     *         },
     *       ]
     *     }
     *   ]
     * });
     */
    setData(data) {
        var _a;
        this.componentManager.remove(_component_pieSeries__WEBPACK_IMPORTED_MODULE_5__["default"]);
        this.resetSeries();
        this.store.dispatch('setData', { series: { pie: data.series } });
        (_a = this.store.initStoreState.series.pie, (_a !== null && _a !== void 0 ? _a : [])).forEach(({ name }) => {
            this.componentManager.add(_component_pieSeries__WEBPACK_IMPORTED_MODULE_5__["default"], { alias: name });
        });
    }
    /**
     * Hide series data label.
     * @api
     * @example
     * chart.hideSeriesDataLabel();
     */
    hideSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: false } } },
        });
    }
    /**
     * Show series data label.
     * @api
     * @example
     * chart.showSeriesDataLabel();
     */
    showSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: true } } },
        });
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   series: {
     *     alias2: {
     *       radiusRange: [20%, 50%],
     *     },
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    setOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   series: {
     *     alias1: {
     *       showDot: true,
     *     },
     *   },
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.
     *      @param {number} seriesInfo.seriesIndex - Index of series.
     *      @param {number} seriesInfo.alias - alias name.
     * @api
     * @example
     * chart.showTooltip({seriesIndex: 1, alias: 'name'});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign({}, seriesInfo));
    }
    /**
     * Hide tooltip.
     * @api
     * @example
     * chart.hideTooltip();
     */
    hideTooltip() {
        this.eventBus.emit('hideTooltip');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/pieChart.js":
/*!******************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/pieChart.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PieChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_legend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../component/legend */ "./node_modules/@toast-ui/chart/dist/esm/component/legend.js");
/* harmony import */ var _component_pieSeries__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../component/pieSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/pieSeries.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_dataLabels__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/component/dataLabels.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");
/* harmony import */ var _brushes_sector__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../brushes/sector */ "./node_modules/@toast-ui/chart/dist/esm/brushes/sector.js");
/* harmony import */ var _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../brushes/dataLabel */ "./node_modules/@toast-ui/chart/dist/esm/brushes/dataLabel.js");

















/**
 * @class
 * @classdesc Pie Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making Pie Chart.
 *     @param {Array<string>} [props.data.categories] - Categories.
 *     @param {Array<Object>} props.data.series - Series data.
 *       @param {string} props.data.series.name - Series name.
 *       @param {number} props.data.series.data - Series data.
 *   @param {Object} [props.options] - Options for making Pie Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series]
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.
 *       @param {Array<number>|Array<string>} [props.options.series.radiusRange] - Specifies the radius of the circle drawn. It is specified by entering a number or percent string value in start and end.
 *       @param {Array<number>} [props.options.series.angleRange] - The range of angles to which the circle will be drawn. It is specified by putting number in start and end.
 *       @param {boolean} [props.options.series.clockwise] - Whether it will be drawn clockwise.
 *     @param {Object} [props.options.legend]
 *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.
 *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.
 *       @param {boolean} [props.options.legend.visible] - Whether to show legend.
 *       @param {number} [props.options.legend.width] - Width of legend.
 *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.
 *       @param {Object} [props.options.lang.noData] - No Data Layer Text.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Pie Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.
 *       @param {Object} [props.options.theme.series] - Series theme.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.legend] - Legend theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 * @extends Chart
 */
class PieChart extends _chart__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor({ el, options, data }) {
        super({
            el,
            options,
            series: {
                pie: data.series,
            },
            categories: data.categories,
        });
    }
    initialize() {
        super.initialize();
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_1__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_2__["default"]);
        this.componentManager.add(_component_legend__WEBPACK_IMPORTED_MODULE_3__["default"]);
        this.componentManager.add(_component_pieSeries__WEBPACK_IMPORTED_MODULE_4__["default"]);
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_5__["default"], { chartEl: this.el });
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_6__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_7__["default"]);
        this.componentManager.add(_component_dataLabels__WEBPACK_IMPORTED_MODULE_8__["default"]);
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_9__["default"], { chartEl: this.el });
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_10__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_11__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_12__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_13__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_14__,
            _brushes_sector__WEBPACK_IMPORTED_MODULE_15__,
            _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_16__,
        ]);
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added.
     *   @param {string} data.name - Series name.
     *   @param {Array<Object>} data.data - Array of data to be added.
     * @api
     * @example
     * chart.addSeries({
     *   name: 'newSeries',
     *   data: 10,
     * });
     */
    addSeries(data) {
        this.resetSeries();
        this.store.dispatch('addSeries', { data });
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set.
     * @api
     * @example
     * chart.setData({
     *   categories: ['A'],
     *   series: [
     *     {name: 'a', data: 10},
     *     {name: 'b', data: 20},
     *   ]
     * });
     */
    setData(data) {
        const { categories, series } = data;
        this.resetSeries();
        this.store.dispatch('setData', { series: { pie: series }, categories });
    }
    /**
     * Hide series data label.
     * @api
     * @example
     * chart.hideSeriesDataLabel();
     */
    hideSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: false } } },
        });
    }
    /**
     * Show series data label.
     * @api
     * @example
     * chart.showSeriesDataLabel();
     */
    showSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: true } } },
        });
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   series: {
     *     selectable: true,
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    setOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.
     *      @param {number} seriesInfo.seriesIndex - Index of series.
     *      @param {number} seriesInfo.alias - alias name.
     * @api
     * @example
     * chart.showTooltip({seriesIndex: 1, alias: 'name'});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));
    }
    /**
     * Hide tooltip.
     * @api
     * @example
     * chart.hideTooltip();
     */
    hideTooltip() {
        this.eventBus.emit('hideTooltip');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/radarChart.js":
/*!********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/radarChart.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RadarChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _store_dataRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/dataRange */ "./node_modules/@toast-ui/chart/dist/esm/store/dataRange.js");
/* harmony import */ var _store_scale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/scale */ "./node_modules/@toast-ui/chart/dist/esm/store/scale.js");
/* harmony import */ var _store_radialAxes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/radialAxes */ "./node_modules/@toast-ui/chart/dist/esm/store/radialAxes.js");
/* harmony import */ var _component_legend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../component/legend */ "./node_modules/@toast-ui/chart/dist/esm/component/legend.js");
/* harmony import */ var _component_radarSeries__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/radarSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/radarSeries.js");
/* harmony import */ var _component_radialPlot__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/radialPlot */ "./node_modules/@toast-ui/chart/dist/esm/component/radialPlot.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_radialAxis__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/radialAxis */ "./node_modules/@toast-ui/chart/dist/esm/component/radialAxis.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");
/* harmony import */ var _brushes_polygon__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../brushes/polygon */ "./node_modules/@toast-ui/chart/dist/esm/brushes/polygon.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");
/* harmony import */ var _brushes_lineSeries__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../brushes/lineSeries */ "./node_modules/@toast-ui/chart/dist/esm/brushes/lineSeries.js");






















/**
 * @class
 * @classdesc Radar Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making Radar Chart.
 *     @param {Array<string>} props.data.categories - Categories.
 *     @param {Array<Object>} props.data.series - Series data.
 *       @param {string} props.data.series.name - Series name.
 *       @param {Array<number>} props.data.series.data - Series data.
 *   @param {Object} [props.options] - Options for making Radar Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series]
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *       @param {boolean} [props.options.series.showDot=false] - Whether to show dot or not.
 *       @param {boolean} [props.options.series.showArea=false] - Whether to fill area or not.
 *     @param {Object} [props.options.circularAxis]
 *       @param {Object} [props.options.circularAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.circularAxis.label] - Option to adjust label interval.
 *     @param {Object} [props.options.verticalAxis]
 *       @param {Object} [props.options.verticalAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.verticalAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.verticalAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *     @param {Object} [props.options.plot]
 *       @param {number} [props.options.plot.width] - Width of plot.
 *       @param {number} [props.options.plot.height] - Height of plot.
 *       @param {boolean} [props.options.plot.type] - Radar plot type. 'spiderweb', 'circle' is available.
 *     @param {Object} [props.options.legend]
 *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.
 *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.
 *       @param {boolean} [props.options.legend.visible] - Whether to show legend.
 *       @param {number} [props.options.legend.width] - Width of legend.
 *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.
 *       @param {Object} [props.options.lang.noData] - No Data Layer Text.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Radar Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.
 *       @param {Object} [props.options.theme.series] - Series theme.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.circularAxis] - Circular Axis theme.
 *       @param {Object} [props.options.theme.verticalAxis] - Vertical Axis theme.
 *       @param {Object} [props.options.theme.legend] - Legend theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.plot] - Plot theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 * @extends Chart
 */
class RadarChart extends _chart__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor({ el, options, data }) {
        super({
            el,
            options,
            series: {
                radar: data.series,
            },
            categories: data.categories,
            modules: [_store_dataRange__WEBPACK_IMPORTED_MODULE_1__["default"], _store_scale__WEBPACK_IMPORTED_MODULE_2__["default"], _store_radialAxes__WEBPACK_IMPORTED_MODULE_3__["default"]],
        });
    }
    initialize() {
        super.initialize();
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_4__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_5__["default"]);
        this.componentManager.add(_component_legend__WEBPACK_IMPORTED_MODULE_6__["default"]);
        this.componentManager.add(_component_radialPlot__WEBPACK_IMPORTED_MODULE_7__["default"]);
        this.componentManager.add(_component_radialAxis__WEBPACK_IMPORTED_MODULE_8__["default"]);
        this.componentManager.add(_component_radarSeries__WEBPACK_IMPORTED_MODULE_9__["default"]);
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_10__["default"], { chartEl: this.el });
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_11__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_12__["default"]);
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_13__["default"], { chartEl: this.el });
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_14__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_15__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_16__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_17__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_18__,
            _brushes_polygon__WEBPACK_IMPORTED_MODULE_19__,
            _brushes_axis__WEBPACK_IMPORTED_MODULE_20__,
            _brushes_lineSeries__WEBPACK_IMPORTED_MODULE_21__,
        ]);
    }
    /**
     * Add data.
     * @param {Array<number>} data - Array of data to be added.
     * @param {string} category - Category to be added.
     * @api
     * @example
     * chart.addData([10, 20], '6');
     */
    addData(data, category) {
        this.animationControlFlag.updating = true;
        this.resetSeries();
        this.store.dispatch('addData', { data, category });
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added.
     *   @param {string} data.name - Series name.
     *   @param {Array<number>} data.data - Array of data to be added.
     * @api
     * @example
     * chart.addSeries({
     *   name: 'newSeries',
     *   data: [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],
     * });
     */
    addSeries(data) {
        this.resetSeries();
        this.store.dispatch('addSeries', { data });
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set.
     * @api
     * @example
     * chart.setData({
     *   categories: ['1', '2', '3'],
     *   series: [
     *     {
     *       name: 'new series',
     *       data: [1, 2, 3],
     *     },
     *     {
     *       name: 'new series2',
     *       data: [4, 5, 6],
     *     }
     *   ]
     * });
     */
    setData(data) {
        const { categories, series } = data;
        this.resetSeries();
        this.store.dispatch('setData', { series: { radar: series }, categories });
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   series: {
     *     selectable: true,
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    setOptions(options) {
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.
     *      @param {number} seriesInfo.seriesIndex - Index of series.
     *      @param {number} seriesInfo.index - Index of data within series.
     * @api
     * @example
     * chart.showTooltip({index: 1, seriesIndex: 2});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));
    }
    /**
     * Hide tooltip.
     * @api
     * @example
     * chart.hideTooltip();
     */
    hideTooltip() {
        this.eventBus.emit('hideTooltip');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/radialBarChart.js":
/*!************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/radialBarChart.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RadialBarChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _store_dataRange__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/dataRange */ "./node_modules/@toast-ui/chart/dist/esm/store/dataRange.js");
/* harmony import */ var _store_stackSeriesData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/stackSeriesData */ "./node_modules/@toast-ui/chart/dist/esm/store/stackSeriesData.js");
/* harmony import */ var _store_scale__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/scale */ "./node_modules/@toast-ui/chart/dist/esm/store/scale.js");
/* harmony import */ var _store_radialAxes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../store/radialAxes */ "./node_modules/@toast-ui/chart/dist/esm/store/radialAxes.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_legend__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/legend */ "./node_modules/@toast-ui/chart/dist/esm/component/legend.js");
/* harmony import */ var _component_radialBarSeries__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/radialBarSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/radialBarSeries.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_dataLabels__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../component/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/component/dataLabels.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_radialPlot__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/radialPlot */ "./node_modules/@toast-ui/chart/dist/esm/component/radialPlot.js");
/* harmony import */ var _component_radialAxis__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../component/radialAxis */ "./node_modules/@toast-ui/chart/dist/esm/component/radialAxis.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");
/* harmony import */ var _brushes_sector__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../brushes/sector */ "./node_modules/@toast-ui/chart/dist/esm/brushes/sector.js");
/* harmony import */ var _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../brushes/dataLabel */ "./node_modules/@toast-ui/chart/dist/esm/brushes/dataLabel.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");
























/**
 * @class
 * @classdesc RadialBar Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making RadialBar Chart.
 *     @param {Array<string>} [props.data.categories] - Categories.
 *     @param {Array<Object>} props.data.series - Series data.
 *       @param {string} props.data.series.name - Series name.
 *       @param {number} props.data.series.data - Series data.
 *   @param {Object} [props.options] - Options for making RadialBar Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series]
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *       @param {string} [props.options.series.eventDetectType] - Event detect type. 'grouped', 'point' is available.
 *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.
 *       @param {Array<number>|Array<string>} [props.options.series.radiusRange] - Specifies the radius of the circle drawn. It is specified by entering a number or percent string value in start and end.
 *       @param {Array<number>} [props.options.series.angleRange] - The range of angles to which the circle will be drawn. It is specified by putting number in start and end.
 *       @param {boolean} [props.options.series.clockwise] - Whether it will be drawn clockwise.
 *     @param {Object} [props.options.circularAxis]
 *       @param {Object} [props.options.circularAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.circularAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.circularAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *     @param {Object} [props.options.verticalAxis]
 *       @param {Object} [props.options.verticalAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.verticalAxis.label] - Option to adjust label interval.
 *     @param {Object} [props.options.legend]
 *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.
 *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.
 *       @param {boolean} [props.options.legend.visible] - Whether to show legend.
 *       @param {number} [props.options.legend.width] - Width of legend.
 *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.
 *       @param {Object} [props.options.lang.noData] - No Data Layer Text.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|RadialBar Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.
 *       @param {Object} [props.options.theme.series] - Series theme.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.circularAxis] - Circular Axis theme.
 *       @param {Object} [props.options.theme.verticalAxis] - Vertical Axis theme.
 *       @param {Object} [props.options.theme.legend] - Legend theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 * @extends Chart
 */
class RadialBarChart extends _chart__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor({ el, options, data }) {
        super({
            el,
            options,
            series: {
                radialBar: data.series,
            },
            categories: data.categories,
            modules: [_store_stackSeriesData__WEBPACK_IMPORTED_MODULE_1__["default"], _store_dataRange__WEBPACK_IMPORTED_MODULE_2__["default"], _store_scale__WEBPACK_IMPORTED_MODULE_3__["default"], _store_radialAxes__WEBPACK_IMPORTED_MODULE_4__["default"]],
        });
    }
    initialize() {
        super.initialize();
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_5__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_6__["default"]);
        this.componentManager.add(_component_legend__WEBPACK_IMPORTED_MODULE_7__["default"]);
        this.componentManager.add(_component_radialPlot__WEBPACK_IMPORTED_MODULE_8__["default"]);
        this.componentManager.add(_component_radialBarSeries__WEBPACK_IMPORTED_MODULE_9__["default"]);
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_10__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_11__["default"]);
        this.componentManager.add(_component_dataLabels__WEBPACK_IMPORTED_MODULE_12__["default"]);
        this.componentManager.add(_component_radialAxis__WEBPACK_IMPORTED_MODULE_13__["default"]);
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_14__["default"], { chartEl: this.el });
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_15__["default"], { chartEl: this.el });
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_16__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_17__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_18__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_19__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_20__,
            _brushes_sector__WEBPACK_IMPORTED_MODULE_21__,
            _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_22__,
            _brushes_axis__WEBPACK_IMPORTED_MODULE_23__,
        ]);
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added.
     *   @param {string} data.name - Series name.
     *   @param {Array<number>} data.data - Array of data to be added.
     * @api
     * @example
     * chart.addSeries({
     *   name: 'newSeries',
     *   data: [10, 20, 30, 40],
     * });
     */
    addSeries(data) {
        this.resetSeries();
        this.store.dispatch('addSeries', { data });
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set.
     * @api
     * @example
     * chart.setData({
     *   categories: ['1', '2', '3'],
     *   series: [
     *     {
     *       name: 'new series',
     *       data: [1, 2, 3],
     *     },
     *     {
     *       name: 'new series2',
     *       data: [4, 5, 6],
     *     }
     *   ]
     * });
     */
    setData(data) {
        const { categories, series } = data;
        this.resetSeries();
        this.store.dispatch('setData', { series: { radialBar: series }, categories });
    }
    /**
     * Hide series data label.
     * @api
     * @example
     * chart.hideSeriesDataLabel();
     */
    hideSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: false } } },
        });
    }
    /**
     * Show series data label.
     * @api
     * @example
     * chart.showSeriesDataLabel();
     */
    showSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: true } } },
        });
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 500,
     *     title: 'Olympic Medals',
     *   },
     *   series: {
     *     selectable: true
     *   }
     * });
     */
    setOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options.
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     title: 'Olympic Medals',
     *   },
     *   series: {
     *     eventDetectType: 'grouped'
     *   }
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.
     *      @param {number} seriesInfo.index - Index of data within series. If 'series.eventDetectType' is "grouped", only index is needed.
     *      @param {number} [seriesInfo.seriesIndex] - Index of series
     * @api
     * @example
     * // eventDetectType is 'grouped'
     * chart.showTooltip({index: 1});
     *
     * // eventDetectType is 'point'
     * chart.showTooltip({index: 1, seriesIndex: 2});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));
    }
    /**
     * Hide tooltip.
     * @api
     * @example
     * chart.hideTooltip();
     */
    hideTooltip() {
        this.eventBus.emit('hideTooltip');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/scatterChart.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/scatterChart.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScatterChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _store_dataRange__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/dataRange */ "./node_modules/@toast-ui/chart/dist/esm/store/dataRange.js");
/* harmony import */ var _store_scale__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../store/scale */ "./node_modules/@toast-ui/chart/dist/esm/store/scale.js");
/* harmony import */ var _store_axes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../store/axes */ "./node_modules/@toast-ui/chart/dist/esm/store/axes.js");
/* harmony import */ var _store_plot__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../store/plot */ "./node_modules/@toast-ui/chart/dist/esm/store/plot.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_plot__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/plot */ "./node_modules/@toast-ui/chart/dist/esm/component/plot.js");
/* harmony import */ var _component_scatterSeries__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../component/scatterSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/scatterSeries.js");
/* harmony import */ var _component_axis__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../component/axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");
/* harmony import */ var _component_legend__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/legend */ "./node_modules/@toast-ui/chart/dist/esm/component/legend.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_axisTitle__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../component/axisTitle */ "./node_modules/@toast-ui/chart/dist/esm/component/axisTitle.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");
/* harmony import */ var _brushes_scatterSeries__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../brushes/scatterSeries */ "./node_modules/@toast-ui/chart/dist/esm/brushes/scatterSeries.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_coordinate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/coordinate */ "./node_modules/@toast-ui/chart/dist/esm/helpers/coordinate.js");

























function clearUnnecessaryData(scatterSeries) {
    return scatterSeries.map((series) => {
        const exist = {};
        return Object.assign(Object.assign({}, series), { data: series.data
                .filter((datum) => !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNull)(datum))
                .reduce((acc, cur) => {
                const x = (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_1__.getCoordinateXValue)(cur);
                const y = (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_1__.getCoordinateYValue)(cur);
                const key = `${x}-${y}`;
                if (!exist[key]) {
                    exist[key] = true;
                    return [...acc, cur];
                }
                return acc;
            }, []) });
    });
}
/**
 * @class
 * @classdesc Scatter Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making Scatter Chart.
 *     @param {Array<Object>} props.data.series - Series data.
 *       @param {string} props.data.series.name - Series name.
 *       @param {Array<Object|Array<number>>} props.data.series.data - Series data.
 *   @param {Object} [props.options] - Options for making Scatter Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series]
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *     @param {Object} [props.options.xAxis]
 *       @param {string|Object} [props.options.xAxis.title] - Axis title.
 *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.
 *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.
 *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.xAxis.width] - Width of xAxis.
 *       @param {number} [props.options.xAxis.height] - Height of xAxis.
 *     @param {Object} [props.options.yAxis]
 *       @param {string|Object} [props.options.yAxis.title] - Axis title.
 *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.
 *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.
 *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.
 *       @param {number} [props.options.yAxis.width] - Width of yAxis.
 *       @param {number} [props.options.yAxis.height] - Height of yAxis.
 *     @param {Object} [props.options.plot]
 *       @param {number} [props.options.plot.width] - Width of plot.
 *       @param {number} [props.options.plot.height] - Height of plot.
 *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.
 *     @param {Object} [props.options.legend]
 *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.
 *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.
 *       @param {boolean} [props.options.legend.visible] - Whether to show legend.
 *       @param {number} [props.options.legend.width] - Width of legend.
 *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.
 *       @param {Object} [props.options.lang.noData] - No Data Layer Text.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Scattter Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.
 *       @param {Object} [props.options.theme.series] - Series theme.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.xAxis] - X Axis theme.
 *       @param {Object} [props.options.theme.yAxis] - Y Axis theme.
 *       @param {Object} [props.options.theme.legend] - Legend theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.plot] - Plot theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 * @extends Chart
 */
class ScatterChart extends _chart__WEBPACK_IMPORTED_MODULE_2__["default"] {
    constructor(props) {
        var _a;
        super({
            el: props.el,
            options: props.options,
            series: {
                scatter: clearUnnecessaryData(props.data.series),
            },
            categories: (_a = props.data) === null || _a === void 0 ? void 0 : _a.categories,
            modules: [_store_dataRange__WEBPACK_IMPORTED_MODULE_3__["default"], _store_scale__WEBPACK_IMPORTED_MODULE_4__["default"], _store_axes__WEBPACK_IMPORTED_MODULE_5__["default"], _store_plot__WEBPACK_IMPORTED_MODULE_6__["default"]],
        });
    }
    initialize() {
        super.initialize();
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_7__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_8__["default"]);
        this.componentManager.add(_component_plot__WEBPACK_IMPORTED_MODULE_9__["default"]);
        this.componentManager.add(_component_legend__WEBPACK_IMPORTED_MODULE_10__["default"]);
        this.componentManager.add(_component_scatterSeries__WEBPACK_IMPORTED_MODULE_11__["default"]);
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_12__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axis__WEBPACK_IMPORTED_MODULE_12__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_13__["default"], { name: 'xAxis' });
        this.componentManager.add(_component_axisTitle__WEBPACK_IMPORTED_MODULE_13__["default"], { name: 'yAxis' });
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_14__["default"], { chartEl: this.el });
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_15__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_16__["default"]);
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_17__["default"], { chartEl: this.el });
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_18__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_19__,
            _brushes_axis__WEBPACK_IMPORTED_MODULE_20__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_21__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_22__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_23__,
            _brushes_scatterSeries__WEBPACK_IMPORTED_MODULE_24__,
        ]);
    }
    /**
     * Add data.
     * @param {Array<Object>} data - Array of data to be added.
     * @api
     * @example
     * chart.addData([
     *   {x: 10, y: 20},
     *   {x: 30, y: 40},
     * ]);
     */
    addData(data) {
        this.animationControlFlag.updating = true;
        this.resetSeries();
        this.store.dispatch('addData', { data });
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added.
     *   @param {string} data.name - Series name.
     *   @param {Array} data.data - Array of data to be added.
     * @api
     * @example
     * chart.addSeries({
     *   name: 'newSeries',
     *   data: [
     *     {x: 10, y: 20},
     *     {x: 30, y: 40},
     *   ],
     * });
     */
    addSeries(data) {
        this.resetSeries();
        this.store.dispatch('addSeries', { data });
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set.
     * @api
     * @example
     * chart.setData({
     *   series: [
     *     {
     *       name: 'name'
     *       data: [
     *         {x: 10, y: 20},
     *         {x: 30, y: 40},
     *       ]
     *     }
     *   ]
     * });
     */
    setData(data) {
        const { categories, series } = data;
        this.resetSeries();
        this.store.dispatch('setData', { series: { scatter: series }, categories });
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   xAxis: {
     *     title: 'Month',
     *   },
     *   yAxis: {
     *     title: 'Energy (kWh)',
     *   },
     *   series: {
     *     selectable: true,
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    setOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.
     *      @param {number} seriesInfo.seriesIndex - Index of series.
     *      @param {number} seriesInfo.index - Index of data within series.
     * @api
     * @example
     * chart.showTooltip({index: 1, seriesIndex: 2});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));
    }
    /**
     * Hide tooltip.
     * @api
     * @example
     * chart.hideTooltip();
     */
    hideTooltip() {
        this.eventBus.emit('hideTooltip');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/charts/treemapChart.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/charts/treemapChart.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TreemapChart)
/* harmony export */ });
/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart */ "./node_modules/@toast-ui/chart/dist/esm/charts/chart.js");
/* harmony import */ var _store_colorValueScale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/colorValueScale */ "./node_modules/@toast-ui/chart/dist/esm/store/colorValueScale.js");
/* harmony import */ var _store_treemapSeriesData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/treemapSeriesData */ "./node_modules/@toast-ui/chart/dist/esm/store/treemapSeriesData.js");
/* harmony import */ var _component_tooltip__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../component/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js");
/* harmony import */ var _component_title__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../component/title */ "./node_modules/@toast-ui/chart/dist/esm/component/title.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _component_hoveredSeries__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../component/hoveredSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js");
/* harmony import */ var _component_dataLabels__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../component/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/component/dataLabels.js");
/* harmony import */ var _component_treemapSeries__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../component/treemapSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/treemapSeries.js");
/* harmony import */ var _component_spectrumLegend__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../component/spectrumLegend */ "./node_modules/@toast-ui/chart/dist/esm/component/spectrumLegend.js");
/* harmony import */ var _component_backButton__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../component/backButton */ "./node_modules/@toast-ui/chart/dist/esm/component/backButton.js");
/* harmony import */ var _component_selectedSeries__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../component/selectedSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js");
/* harmony import */ var _component_background__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../component/background */ "./node_modules/@toast-ui/chart/dist/esm/component/background.js");
/* harmony import */ var _component_noDataText__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../component/noDataText */ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js");
/* harmony import */ var _brushes_basic__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../brushes/basic */ "./node_modules/@toast-ui/chart/dist/esm/brushes/basic.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../brushes/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/brushes/exportMenu.js");
/* harmony import */ var _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../brushes/dataLabel */ "./node_modules/@toast-ui/chart/dist/esm/brushes/dataLabel.js");
/* harmony import */ var _brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../brushes/spectrumLegend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/spectrumLegend.js");
/* harmony import */ var _brushes_resetButton__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../brushes/resetButton */ "./node_modules/@toast-ui/chart/dist/esm/brushes/resetButton.js");





















/**
 * @class
 * @classdesc Treemap Chart
 * @param {Object} props
 *   @param {HTMLElement} props.el - The target element to create chart.
 *   @param {Object} props.data - Data for making Treemap Chart.
 *     @param {Array<string>} props.data.categories - Categories.
 *     @param {Array<Object>} props.data.series - Series data.
 *       @param {string} props.data.series.label - Data name.
 *       @param {number} [props.data.series.data] - data value.
 *       @param {number} [props.data.series.colorValue] - color value. If you use the useColorValue option, the color is painted based on this value.
 *       @param {Array<Object>} [props.data.series.children] - Child element value.
 *   @param {Object} [props.options] - Options for making Treemap Chart.
 *     @param {Object} [props.options.chart]
 *       @param {string|Object} [props.options.chart.title] - Chart title text or options.
 *         @param {string} [props.options.chart.title.text] - Chart title text.
 *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.
 *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.
 *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.
 *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.
 *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.
 *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.
 *     @param {Object} [props.options.series]
 *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.
 *       @param {boolean} [props.options.series.useColorValue] - Whether to use color value or not.
 *       @param {boolean} [props.options.series.zoomable] - Whether to use zoom feature or not.
 *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.
 *     @param {Object} [props.options.legend]
 *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.
 *       @param {boolean} [props.options.legend.visible=false] - Whether to show legend.
 *       @param {number} [props.options.legend.width] - Width of legend.
 *     @param {Object} [props.options.exportMenu]
 *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.
 *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.
 *     @param {Object} [props.options.tooltip]
 *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.
 *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.
 *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.
 *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.
 *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.
 *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.
 *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.
 *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.
 *       @param {Object} [props.options.lang.noData] - No Data Layer Text.
 *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Treemap Chart guide} on github.
 *       @param {Object} [props.options.theme.chart] - Chart font theme.
 *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.
 *       @param {Object} [props.options.theme.series] - Series theme.
 *       @param {Object} [props.options.theme.title] - Title theme.
 *       @param {Object} [props.options.theme.legend] - Legend theme.
 *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.
 *       @param {Object} [props.options.theme.plot] - Plot theme.
 *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.
 * @extends Chart
 */
class TreemapChart extends _chart__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(props) {
        super({
            el: props.el,
            options: props.options,
            series: {
                treemap: props.data.series,
            },
            modules: [_store_treemapSeriesData__WEBPACK_IMPORTED_MODULE_1__["default"], _store_colorValueScale__WEBPACK_IMPORTED_MODULE_2__["default"]],
        });
    }
    initialize() {
        super.initialize();
        this.componentManager.add(_component_background__WEBPACK_IMPORTED_MODULE_3__["default"]);
        this.componentManager.add(_component_title__WEBPACK_IMPORTED_MODULE_4__["default"]);
        this.componentManager.add(_component_spectrumLegend__WEBPACK_IMPORTED_MODULE_5__["default"]);
        this.componentManager.add(_component_treemapSeries__WEBPACK_IMPORTED_MODULE_6__["default"]);
        this.componentManager.add(_component_exportMenu__WEBPACK_IMPORTED_MODULE_7__["default"], { chartEl: this.el });
        this.componentManager.add(_component_hoveredSeries__WEBPACK_IMPORTED_MODULE_8__["default"]);
        this.componentManager.add(_component_selectedSeries__WEBPACK_IMPORTED_MODULE_9__["default"]);
        this.componentManager.add(_component_dataLabels__WEBPACK_IMPORTED_MODULE_10__["default"]);
        this.componentManager.add(_component_tooltip__WEBPACK_IMPORTED_MODULE_11__["default"], { chartEl: this.el });
        this.componentManager.add(_component_backButton__WEBPACK_IMPORTED_MODULE_12__["default"]);
        this.componentManager.add(_component_noDataText__WEBPACK_IMPORTED_MODULE_13__["default"]);
        this.painter.addGroups([
            _brushes_basic__WEBPACK_IMPORTED_MODULE_14__,
            _brushes_legend__WEBPACK_IMPORTED_MODULE_15__,
            _brushes_label__WEBPACK_IMPORTED_MODULE_16__,
            _brushes_exportMenu__WEBPACK_IMPORTED_MODULE_17__,
            _brushes_dataLabel__WEBPACK_IMPORTED_MODULE_18__,
            _brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_19__,
            _brushes_resetButton__WEBPACK_IMPORTED_MODULE_20__,
        ]);
    }
    /**
     * Add series.
     * @param {Object} data - Data to be added.
     *   @param {string} data.name - Series name.
     *   @param {Array<Object>} data.data - Array of data to be added.
     * @api
     * @example
     * chart.addSeries({
     *   label: 'Documents',
     *   children: [
     *     {label: 'A', data: 20},
     *     {label: 'B', data: 40},
     *   ],
     * });
     */
    addSeries(data, dataInfo) {
        this.resetSeries();
        this.store.dispatch('addTreemapSeries', Object.assign({ data }, dataInfo));
    }
    /**
     * Convert the chart data to new data.
     * @param {Object} data - Data to be set.
     * @api
     * @example
     * chart.setData(
     *   series: [
     *     {
     *       label: 'Documents',
     *       children: [
     *         {label: 'A', data: 20},
     *         {label: 'B', data: 40},
     *       ],
     *     },
     *     {
     *       label: 'Documents',
     *       data: 30,
     *     }
     *   ]
     * );
     */
    setData(data) {
        this.resetSeries();
        this.store.dispatch('setData', { series: { treemap: data.series } });
    }
    /**
     * Hide series data label.
     * @api
     * @example
     * chart.hideSeriesDataLabel();
     */
    hideSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: false } } },
        });
    }
    /**
     * Show series data label.
     * @api
     * @example
     * chart.showSeriesDataLabel();
     */
    showSeriesDataLabel() {
        this.store.dispatch('updateOptions', {
            options: { series: { dataLabels: { visible: true } } },
        });
    }
    /**
     * Convert the chart options to new options.
     * @param {Object} options - Chart options
     * @api
     * @example
     * chart.setOptions({
     *   chart: {
     *     width: 500,
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   series: {
     *     selectable: true,
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    setOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('initOptions', options);
    }
    /**
     * Update chart options.
     * @param {Object} options - Chart options
     * @api
     * @example
     * chart.updateOptions({
     *   chart: {
     *     height: 'auto',
     *     title: 'Energy Usage',
     *   },
     *   tooltip: {
     *     formatter: (value) => `${value}kWh`,
     *   },
     * });
     */
    updateOptions(options) {
        this.resetSeries();
        this.dispatchOptionsEvent('updateOptions', options);
    }
    /**
     * Show tooltip.
     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.
     *      @param {number} seriesInfo.seriesIndex - Index of series.
     * @api
     * @example
     * chart.showTooltip({seriesIndex: 1});
     */
    showTooltip(seriesInfo) {
        this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));
    }
    /**
     * Hide tooltip.
     * @api
     * @example
     * chart.hideTooltip();
     */
    hideTooltip() {
        this.eventBus.emit('hideTooltip');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/areaSeries.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/areaSeries.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AreaSeries)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _helpers_color__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../helpers/color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_range__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/range */ "./node_modules/@toast-ui/chart/dist/esm/helpers/range.js");
/* harmony import */ var _helpers_legend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/legend */ "./node_modules/@toast-ui/chart/dist/esm/helpers/legend.js");
/* harmony import */ var _helpers_responders__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/responders */ "./node_modules/@toast-ui/chart/dist/esm/helpers/responders.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _helpers_dataLabels__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/helpers/dataLabels.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");
/* harmony import */ var _helpers_validation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/validation */ "./node_modules/@toast-ui/chart/dist/esm/helpers/validation.js");











const seriesOpacity = {
    INACTIVE: 0.06,
    ACTIVE: 1,
};
class AreaSeries extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = { rect: [], series: [], dot: [] };
        this.activatedResponders = [];
        this.eventDetectType = 'nearest';
        this.isStackChart = false;
        this.isRangeChart = false;
        this.isSplineChart = false;
        this.onMouseoutComponent = () => {
            this.eventBus.emit('seriesPointHovered', { models: [], name: this.name });
            this.eventBus.emit('renderHoveredSeries', {
                models: [],
                name: this.name,
                eventDetectType: this.eventDetectType,
            });
            this.eventBus.emit('needDraw');
        };
        this.selectSeries = (info) => {
            const { index, seriesIndex } = info;
            if (!(0,_helpers_validation__WEBPACK_IMPORTED_MODULE_1__.isAvailableSelectSeries)(info, 'area')) {
                return;
            }
            const category = this.getResponderCategoryByIndex(index);
            if (!category) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.SELECT_SERIES_API_INDEX_ERROR);
            }
            const model = this.tooltipCircleMap[category][seriesIndex];
            if (!model) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.SELECT_SERIES_API_INDEX_ERROR);
            }
            const models = this.getResponderSeriesWithTheme([model], 'select');
            this.eventBus.emit('renderSelectedSeries', { models, name: this.name });
            this.eventBus.emit('needDraw');
        };
        this.showTooltip = (info) => {
            const { index, seriesIndex } = info;
            if (!(0,_helpers_validation__WEBPACK_IMPORTED_MODULE_1__.isAvailableShowTooltipInfo)(info, this.eventDetectType, 'area')) {
                return;
            }
            const category = this.getResponderCategoryByIndex(index);
            if (!category) {
                return;
            }
            const models = this.eventDetectType === 'grouped'
                ? this.tooltipCircleMap[category]
                : [this.tooltipCircleMap[category][seriesIndex]];
            if (!models.length) {
                return;
            }
            this.onMousemoveNearType(models);
            this.eventBus.emit('seriesPointHovered', { models: this.activatedResponders, name: this.name });
            this.eventBus.emit('needDraw');
        };
    }
    initialize() {
        this.type = 'series';
        this.name = 'area';
        this.eventBus.on('selectSeries', this.selectSeries);
        this.eventBus.on('showTooltip', this.showTooltip);
        this.eventBus.on('hideTooltip', this.onMouseoutComponent);
    }
    initUpdate(delta) {
        if (!this.drawModels) {
            return;
        }
        this.drawModels.rect[0].width = this.models.rect[0].width * delta;
    }
    getBaseYPosition(limit) {
        const baseValue = limit.min >= 0 ? limit.min : Math.min(limit.max, 0);
        const intervalSize = this.rect.height / (limit.max - limit.min);
        return (limit.max - baseValue) * intervalSize;
    }
    getStackValue(areaStackSeries, seriesIndex, index) {
        const { type } = areaStackSeries.stack;
        const { values, sum: sumValue } = areaStackSeries.stackData[index];
        const stackedValue = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.sum)(values.slice(0, seriesIndex + 1));
        return type === 'percent' ? (stackedValue * 100) / sumValue : stackedValue;
    }
    setEventDetectType(series, options) {
        var _a, _b;
        if ((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b.eventDetectType) {
            this.eventDetectType = options.series.eventDetectType;
        }
        if (series.line || this.isStackChart) {
            this.eventDetectType = 'grouped';
        }
    }
    getAreaOptions(options) {
        var _a;
        const newOptions = Object.assign({}, options);
        if ((_a = newOptions.series) === null || _a === void 0 ? void 0 : _a.area) {
            newOptions.series = Object.assign(Object.assign({}, newOptions.series), newOptions.series.area);
        }
        return newOptions;
    }
    render(chartState, computed) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const { viewRange } = computed;
        const { layout, series, scale, axes, legend, stackSeries, theme } = chartState;
        if (!series.area) {
            throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.noDataError(this.name));
        }
        let areaStackSeries;
        const options = this.getAreaOptions(chartState.options);
        const categories = chartState.categories;
        const rawCategories = (_a = chartState.rawCategories, (_a !== null && _a !== void 0 ? _a : []));
        this.theme = theme.series.area;
        this.rect = layout.plot;
        this.activeSeriesMap = (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_4__.getActiveSeriesMap)(legend);
        this.startIndex = (_c = (_b = viewRange) === null || _b === void 0 ? void 0 : _b[0], (_c !== null && _c !== void 0 ? _c : 0));
        this.selectable = this.getSelectableOption(options);
        this.isSplineChart = (_e = (_d = options.series) === null || _d === void 0 ? void 0 : _d.spline, (_e !== null && _e !== void 0 ? _e : false));
        const { limit } = scale[(0,_helpers_axes__WEBPACK_IMPORTED_MODULE_5__.getValueAxisName)(options, this.name, 'yAxis')];
        const { tickDistance, pointOnColumn, tickCount } = axes.xAxis;
        const areaData = series.area.data;
        this.baseYPosition = this.getBaseYPosition(limit);
        if ((_f = stackSeries) === null || _f === void 0 ? void 0 : _f.area) {
            this.isStackChart = true;
            areaStackSeries = stackSeries.area;
        }
        else if ((0,_helpers_range__WEBPACK_IMPORTED_MODULE_6__.isRangeData)((_g = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.getFirstValidValue)(areaData)) === null || _g === void 0 ? void 0 : _g.data)) {
            this.isRangeChart = true;
        }
        this.setEventDetectType(series, options);
        const renderOptions = {
            pointOnColumn,
            options: options.series || {},
            tickDistance,
            tickCount,
            areaStackSeries,
        };
        this.linePointsModel = this.renderLinePointsModel(areaData, limit, renderOptions);
        const areaSeriesModel = this.renderAreaPointsModel();
        const showDot = !!((_h = options.series) === null || _h === void 0 ? void 0 : _h.showDot);
        const { dotSeriesModel, responderModel } = this.renderCircleModel(showDot);
        const tooltipDataArr = this.makeTooltipData(areaData, rawCategories);
        this.models = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.deepCopy)({
            rect: [this.renderClipRectAreaModel()],
            series: [...this.linePointsModel, ...areaSeriesModel],
            dot: dotSeriesModel,
        });
        if (!this.drawModels) {
            this.drawModels = Object.assign(Object.assign({}, this.models), { rect: [this.renderClipRectAreaModel(true)] });
        }
        if ((0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_7__.getDataLabelsOptions)(options, this.name).visible) {
            this.renderDataLabels(this.getDataLabels(areaSeriesModel));
        }
        this.tooltipCircleMap = (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_8__.makeTooltipCircleMap)(responderModel, tooltipDataArr);
        this.responders = this.getResponders(responderModel, tooltipDataArr, categories, rawCategories, axes.xAxis);
    }
    getResponders(responderModel, tooltipDataArr, categories, rawCategories, axisData) {
        if (this.eventDetectType === 'near') {
            return this.makeNearTypeResponderModel(responderModel, tooltipDataArr, rawCategories);
        }
        if (this.eventDetectType === 'point') {
            return this.makeNearTypeResponderModel(responderModel, tooltipDataArr, rawCategories, 0);
        }
        return (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_8__.makeRectResponderModel)(this.rect, axisData, categories);
    }
    makeNearTypeResponderModel(seriesCircleModel, tooltipDataArr, categories, detectionSize) {
        const tooltipDataLength = tooltipDataArr.length;
        return seriesCircleModel.map((m, dataIndex) => (Object.assign(Object.assign({}, m), { data: tooltipDataArr[dataIndex % tooltipDataLength], detectionSize, label: categories[m.index] })));
    }
    renderClipRectAreaModel(isDrawModel) {
        return {
            type: 'clipRectArea',
            x: 0,
            y: 0,
            width: isDrawModel ? 0 : this.rect.width,
            height: this.rect.height,
        };
    }
    makeTooltipData(areaData, categories) {
        return areaData.flatMap(({ rawData, name, color }, seriesIndex) => {
            const tooltipData = [];
            rawData.forEach((datum, index) => {
                if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.isNull)(datum)) {
                    const value = this.isRangeChart ? `${datum[0]} ~ ${datum[1]}` : datum;
                    tooltipData.push({
                        label: name,
                        color,
                        value,
                        category: categories[index],
                        seriesIndex,
                        index,
                    });
                }
            });
            return tooltipData;
        });
    }
    getLinePointModelValue(datum, pairModel) {
        if (this.isRangeChart) {
            return pairModel ? datum[0] : datum[1];
        }
        return datum;
    }
    getLinePointModel(series, seriesIndex, limit, renderOptions) {
        const { pointOnColumn, tickDistance, pairModel, areaStackSeries } = renderOptions;
        const { rawData, name, color: seriesColor } = series;
        const active = this.activeSeriesMap[name];
        const points = [];
        const color = (0,_helpers_color__WEBPACK_IMPORTED_MODULE_9__.getRGBA)(seriesColor, active ? seriesOpacity.ACTIVE : seriesOpacity.INACTIVE);
        const { lineWidth, dashSegments } = this.theme;
        rawData.forEach((datum, idx) => {
            if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.isNull)(datum)) {
                points.push(null);
                return;
            }
            const value = this.getLinePointModelValue(datum, pairModel);
            const stackedValue = this.isStackChart
                ? this.getStackValue(areaStackSeries, seriesIndex, idx)
                : value;
            const valueRatio = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_10__.getValueRatio)(stackedValue, limit);
            const x = tickDistance * (idx - this.startIndex) + (pointOnColumn ? tickDistance / 2 : 0);
            const y = (1 - valueRatio) * this.rect.height;
            points.push({ x, y, value });
        });
        if (pairModel) {
            points.reverse(); // for range spline
        }
        if (this.isSplineChart) {
            (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_10__.setSplineControlPoint)(points);
        }
        return {
            type: 'linePoints',
            lineWidth,
            dashSegments,
            color,
            points,
            seriesIndex,
            name,
        };
    }
    renderLinePointsModel(seriesRawData, limit, renderOptions) {
        const linePointsModels = seriesRawData.map((series, seriesIndex) => this.getLinePointModel(series, seriesIndex, limit, renderOptions));
        if (this.isRangeChart) {
            const renderOptionsForPair = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.deepMergedCopy)(renderOptions, { pairModel: true });
            const pair = seriesRawData.map((series, seriesIndex) => this.getLinePointModel(series, seriesIndex, limit, renderOptionsForPair));
            linePointsModels.push(...pair);
        }
        return linePointsModels;
    }
    getCombinedPoints(start, end) {
        const startPoints = start >= 0 ? this.linePointsModel[start].points : [];
        const reversedEndPoints = [...this.linePointsModel[end].points].reverse();
        return [...startPoints, ...reversedEndPoints];
    }
    renderRangeAreaSeries(linePointsModel) {
        const model = [];
        linePointsModel.forEach((m) => {
            let areaPoints = [];
            const { points } = m;
            points.slice(0, points.length / 2 + 1).forEach((point, i) => {
                const lastPoint = i === points.length / 2 - 1;
                const nullPoint = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.isNull)(point);
                if (!nullPoint) {
                    areaPoints.push(point);
                }
                if (areaPoints.length && (lastPoint || nullPoint)) {
                    const pairPoints = areaPoints
                        .map((areaPoint, idx) => {
                        const curIdx = points.length / 2 + i - areaPoints.length + idx + (!nullPoint && lastPoint ? 1 : 0);
                        return points[curIdx];
                    })
                        .reverse();
                    model.push(Object.assign(Object.assign({}, m), { type: 'areaPoints', lineWidth: 0, color: 'rgba(0, 0, 0, 0)', fillColor: this.getAreaOpacity(m.name, m.color), points: [...areaPoints, ...pairPoints] }));
                    areaPoints = [];
                }
            });
        });
        return model;
    }
    renderAreaSeries(linePointsModel) {
        const model = [];
        const bottomYPoint = [];
        linePointsModel.forEach((m) => {
            let areaPoints = [];
            const curBottomYPoint = [...bottomYPoint];
            const { points } = m;
            points.forEach((point, i) => {
                const lastPoint = i === points.length - 1;
                const nullPoint = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.isNull)(point);
                if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.isNull)(point)) {
                    areaPoints.push(point);
                }
                if (areaPoints.length && (nullPoint || lastPoint)) {
                    const pairPoints = areaPoints
                        .map((areaPoint, idx) => {
                        const curIdx = i - areaPoints.length + idx + (!nullPoint && lastPoint ? 1 : 0);
                        const bottom = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(curBottomYPoint[curIdx])
                            ? this.baseYPosition
                            : curBottomYPoint[curIdx];
                        if (this.isStackChart) {
                            bottomYPoint[curIdx] = areaPoint.y;
                        }
                        return { x: areaPoint.x, y: bottom };
                    })
                        .reverse();
                    if (this.isStackChart && this.isSplineChart) {
                        (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_10__.setSplineControlPoint)(pairPoints); // set spline for new stack pair points
                    }
                    model.push(Object.assign(Object.assign({}, m), { type: 'areaPoints', lineWidth: 0, color: 'rgba(0, 0, 0, 0)', fillColor: this.getAreaOpacity(m.name, m.color), points: [...areaPoints, ...pairPoints] }));
                    areaPoints = [];
                }
            });
        });
        return model;
    }
    getCombinedLinePointsModel() {
        if (!this.isRangeChart) {
            return this.linePointsModel;
        }
        const len = this.linePointsModel.length / 2;
        return (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.range)(0, len).reduce((acc, i) => {
            const start = i;
            const end = len + i;
            const points = this.getCombinedPoints(start, end);
            return [...acc, Object.assign(Object.assign({}, this.linePointsModel[i]), { points })];
        }, []);
    }
    getAreaOpacity(name, color) {
        const { select, areaOpacity } = this.theme;
        const active = this.activeSeriesMap[name];
        const selected = Object.values(this.activeSeriesMap).some((elem) => !elem);
        return selected
            ? (0,_helpers_color__WEBPACK_IMPORTED_MODULE_9__.getRGBA)(color, active ? select.areaOpacity : select.restSeries.areaOpacity)
            : (0,_helpers_color__WEBPACK_IMPORTED_MODULE_9__.getRGBA)(color, areaOpacity);
    }
    renderAreaPointsModel() {
        const combinedLinePointsModel = this.getCombinedLinePointsModel();
        return this.isRangeChart
            ? this.renderRangeAreaSeries(combinedLinePointsModel)
            : this.renderAreaSeries(combinedLinePointsModel);
    }
    renderCircleModel(showDot) {
        const dotSeriesModel = [];
        const responderModel = [];
        const { dot: dotTheme } = this.theme;
        this.linePointsModel.forEach(({ points, color, seriesIndex, name }, modelIndex) => {
            const isPairLinePointsModel = this.isRangeChart && modelIndex >= this.linePointsModel.length / 2;
            const active = this.activeSeriesMap[name];
            points.forEach((point, index) => {
                var _a;
                if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.isNull)(point)) {
                    return;
                }
                const model = Object.assign(Object.assign({ type: 'circle' }, point), { seriesIndex,
                    name, index: isPairLinePointsModel ? points.length - index - 1 : index });
                if (showDot) {
                    dotSeriesModel.push(Object.assign(Object.assign({}, model), { radius: dotTheme.radius, color: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_9__.getRGBA)(color, active ? 1 : 0.3), style: [
                            { lineWidth: dotTheme.borderWidth, strokeStyle: (_a = dotTheme.borderColor, (_a !== null && _a !== void 0 ? _a : color)) },
                        ] }));
                }
                responderModel.push(...this.getResponderSeriesWithTheme([model], 'hover', color));
            });
        });
        return { dotSeriesModel, responderModel };
    }
    getPairCircleModel(circleModels) {
        const pairCircleModels = [];
        circleModels.forEach((circle) => {
            const { seriesIndex, y, data } = circle;
            const { category } = data;
            const pairCircleModel = this.tooltipCircleMap[category].find((model) => model.seriesIndex === seriesIndex && model.y !== y);
            pairCircleModels.push(pairCircleModel);
        });
        return pairCircleModels;
    }
    getCircleModelsFromRectResponders(responders, mousePositions) {
        var _a;
        if (!responders.length || !responders[0].label) {
            return [];
        }
        const models = (_a = this.tooltipCircleMap[responders[0].label], (_a !== null && _a !== void 0 ? _a : []));
        return this.eventDetectType === 'grouped'
            ? models
            : (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_8__.getNearestResponder)(models, mousePositions, this.rect);
    }
    onMousemoveGroupedType(responders) {
        const circleModels = this.getCircleModelsFromRectResponders(responders);
        this.eventBus.emit('renderHoveredSeries', {
            models: circleModels,
            name: this.name,
            eventDetectType: this.eventDetectType,
        });
        this.activatedResponders = this.isRangeChart
            ? circleModels.slice(0, circleModels.length / 2) // for rendering unique tooltip data
            : circleModels;
    }
    onMousemoveNearestType(responders, mousePositions) {
        const circleModels = this.getCircleModelsFromRectResponders(responders, mousePositions);
        this.onMousemoveNearType(circleModels);
    }
    onMousemoveNearType(responders) {
        let pairCircleModels = [];
        if (this.isRangeChart) {
            pairCircleModels = this.getPairCircleModel(responders);
        }
        const hoveredSeries = [...responders, ...pairCircleModels];
        this.eventBus.emit('renderHoveredSeries', {
            models: hoveredSeries,
            name: this.name,
            eventDetectType: this.eventDetectType,
        });
        this.activatedResponders = responders;
    }
    onMousemove({ responders, mousePosition }) {
        if (this.eventDetectType === 'nearest') {
            this.onMousemoveNearestType(responders, mousePosition);
        }
        else if (['near', 'point'].includes(this.eventDetectType)) {
            this.onMousemoveNearType(responders);
        }
        else {
            this.onMousemoveGroupedType(responders);
        }
        this.eventBus.emit('seriesPointHovered', { models: this.activatedResponders, name: this.name });
        this.eventBus.emit('needDraw');
    }
    getDataLabels(seriesModels) {
        const dataLabelTheme = this.theme.dataLabels;
        return seriesModels.flatMap(({ points, name, fillColor }) => points.map((point) => (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.isNull)(point)
            ? {}
            : Object.assign(Object.assign({ type: 'point' }, point), { name, theme: Object.assign(Object.assign({}, dataLabelTheme), { color: dataLabelTheme.useSeriesColor ? (0,_helpers_color__WEBPACK_IMPORTED_MODULE_9__.getRGBA)(fillColor, 1) : dataLabelTheme.color }) })));
    }
    getResponderSeriesWithTheme(models, type, seriesColor) {
        const { radius, color, borderWidth, borderColor } = this.theme[type].dot;
        return models.map((model) => {
            var _a;
            const modelColor = (_a = (color !== null && color !== void 0 ? color : model.color), (_a !== null && _a !== void 0 ? _a : seriesColor));
            return Object.assign(Object.assign({}, model), { radius, color: modelColor, style: [{ lineWidth: borderWidth, strokeStyle: (borderColor !== null && borderColor !== void 0 ? borderColor : (0,_helpers_color__WEBPACK_IMPORTED_MODULE_9__.getRGBA)(modelColor, 0.5)) }] });
        });
    }
    onClick({ responders, mousePosition }) {
        if (this.selectable) {
            let models;
            if (this.eventDetectType === 'near') {
                models = responders;
            }
            else {
                models = this.getCircleModelsFromRectResponders(responders, mousePosition);
            }
            this.eventBus.emit('renderSelectedSeries', {
                models: this.getResponderSeriesWithTheme(models, 'select'),
                name: this.name,
            });
            this.eventBus.emit('needDraw');
        }
    }
    getResponderCategoryByIndex(index) {
        var _a, _b;
        const responder = Object.values(this.tooltipCircleMap)
            .flatMap((val) => val)
            .find((model) => model.index === index);
        return (_b = (_a = responder) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.category;
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/axis.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AxisType": () => (/* binding */ AxisType),
/* harmony export */   "default": () => (/* binding */ Axis)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");






var AxisType;
(function (AxisType) {
    AxisType["X"] = "xAxis";
    AxisType["Y"] = "yAxis";
    AxisType["SECONDARY_Y"] = "secondaryYAxis";
    AxisType["CIRCULAR"] = "circularAxis";
    AxisType["VERTICAL"] = "verticalAxis";
})(AxisType || (AxisType = {}));
function getOffsetAndAnchorKey(hasBasedYAxis) {
    return {
        offsetKey: hasBasedYAxis ? 'y' : 'x',
        anchorKey: hasBasedYAxis ? 'x' : 'y',
    };
}
class Axis extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = { label: [], tick: [], axisLine: [] };
        this.axisSize = 0;
    }
    initialize({ name }) {
        this.type = 'axis';
        this.name = name;
        this.yAxisComponent = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.includes)([AxisType.Y, AxisType.SECONDARY_Y], name);
    }
    render({ layout, axes, theme, scale }) {
        var _a;
        if (axes.centerYAxis || !axes[this.name]) {
            return;
        }
        this.theme = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_2__.getAxisTheme)(theme, this.name);
        this.rect = layout[this.name];
        this.axisSize = this.yAxisComponent ? this.rect.height : this.rect.width;
        const { viewLabels } = axes[this.name];
        const { offsetKey, anchorKey } = getOffsetAndAnchorKey(this.yAxisComponent);
        const renderOptions = this.makeRenderOptions(axes[this.name], (_a = scale) === null || _a === void 0 ? void 0 : _a[this.name]);
        const hasOnlyAxisLine = this.hasOnlyAxisLine();
        if (!hasOnlyAxisLine) {
            this.models.label = this.renderLabelModels(viewLabels, offsetKey, anchorKey, renderOptions);
            this.models.tick = this.renderTickModels(offsetKey, anchorKey, renderOptions);
        }
        this.models.axisLine = [this.renderAxisLineModel()];
        if (!this.drawModels) {
            this.drawModels = {
                tick: [],
                label: [],
                axisLine: this.models.axisLine,
            };
            ['tick', 'label'].forEach((type) => {
                this.drawModels[type] = this.models[type].map((m) => {
                    const drawModel = Object.assign({}, m);
                    if (this.yAxisComponent) {
                        drawModel.y = 0;
                    }
                    else {
                        drawModel.x = 0;
                    }
                    return drawModel;
                });
            });
        }
    }
    renderAxisLineModel() {
        const zeroPixel = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(0);
        let lineModel;
        const { color: strokeStyle, width: lineWidth } = this.theme;
        if (this.yAxisComponent) {
            const x = this.getYAxisXPoint();
            lineModel = {
                type: 'line',
                x,
                y: zeroPixel,
                x2: x,
                y2: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(this.axisSize),
                strokeStyle,
                lineWidth,
            };
        }
        else {
            lineModel = {
                type: 'line',
                x: zeroPixel,
                y: zeroPixel,
                x2: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(this.axisSize),
                y2: zeroPixel,
                strokeStyle,
                lineWidth,
            };
        }
        return lineModel;
    }
    renderTickModels(offsetKey, anchorKey, renderOptions) {
        const tickAnchorPoint = this.yAxisComponent ? this.getYAxisXPoint() : (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(0);
        const { tickInterval, relativePositions } = renderOptions;
        const tickSize = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.includes)([AxisType.SECONDARY_Y, AxisType.X], this.name)
            ? _brushes_axis__WEBPACK_IMPORTED_MODULE_4__.TICK_SIZE
            : -_brushes_axis__WEBPACK_IMPORTED_MODULE_4__.TICK_SIZE;
        return relativePositions.reduce((positions, position, index) => {
            return index % tickInterval
                ? positions
                : [
                    ...positions,
                    {
                        type: 'tick',
                        isYAxis: this.yAxisComponent,
                        tickSize,
                        [offsetKey]: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(position),
                        [anchorKey]: tickAnchorPoint,
                        strokeStyle: this.theme.color,
                        lineWidth: this.theme.width,
                    },
                ];
        }, []);
    }
    renderLabelModels(labels, offsetKey, anchorKey, renderOptions) {
        const { needRotateLabel, radian, offsetY } = renderOptions;
        const labelTheme = this.theme.label;
        const font = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_5__.getTitleFontString)(labelTheme);
        const textAlign = this.getLabelTextAlign(needRotateLabel);
        const style = ['default', { textAlign, font, fillStyle: labelTheme.color }];
        const labelAnchorPoint = this.yAxisComponent ? this.getYAxisAnchorPoint() : offsetY;
        return labels.map(({ text, offsetPos }) => ({
            type: 'label',
            text,
            style,
            radian,
            [offsetKey]: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(offsetPos),
            [anchorKey]: labelAnchorPoint,
        }));
    }
    makeRenderOptions(axisData, scale) {
        var _a, _b, _c, _d;
        const { tickCount, tickInterval } = axisData;
        const sizeRatio = (_b = (_a = scale) === null || _a === void 0 ? void 0 : _a.sizeRatio, (_b !== null && _b !== void 0 ? _b : 1));
        const positionRatio = (_d = (_c = scale) === null || _c === void 0 ? void 0 : _c.positionRatio, (_d !== null && _d !== void 0 ? _d : 0));
        const relativePositions = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.makeTickPixelPositions)(this.axisSize * sizeRatio, tickCount, this.axisSize * positionRatio);
        if (this.yAxisComponent) {
            return {
                relativePositions,
                tickInterval,
            };
        }
        const { needRotateLabel, radian, offsetY } = axisData;
        return {
            relativePositions,
            tickInterval,
            needRotateLabel,
            radian,
            offsetY,
        };
    }
    getYAxisAnchorPoint() {
        return this.isRightSide() ? (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(this.rect.width) : (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(0);
    }
    getLabelTextAlign(needRotateLabel) {
        const yAxisTextAlign = this.isRightSide() ? 'right' : 'left';
        const xAxisTextAlign = needRotateLabel ? 'left' : 'center';
        return this.yAxisComponent ? yAxisTextAlign : xAxisTextAlign;
    }
    isRightSide() {
        return this.name === AxisType.SECONDARY_Y;
    }
    getYAxisXPoint() {
        return this.isRightSide() ? (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(0) : (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(this.rect.width);
    }
    hasOnlyAxisLine() {
        return ((this.yAxisComponent && !this.rect.width) || (this.name === AxisType.X && !this.rect.height));
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/axisTitle.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/axisTitle.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AxisTitle)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _axis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");





class AxisTitle extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    initialize({ name }) {
        this.type = 'axisTitle';
        this.name = name;
        this.isYAxis = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.includes)([_axis__WEBPACK_IMPORTED_MODULE_2__.AxisType.Y, _axis__WEBPACK_IMPORTED_MODULE_2__.AxisType.SECONDARY_Y], name);
        this.isCircularAxis = this.name === _axis__WEBPACK_IMPORTED_MODULE_2__.AxisType.CIRCULAR;
    }
    getTitlePosition(offsetX, offsetY) {
        if (this.isCircularAxis) {
            return [this.rect.width / 2 + offsetX, this.rect.height / 2 + offsetY];
        }
        return this.isYAxis
            ? [this.name === _axis__WEBPACK_IMPORTED_MODULE_2__.AxisType.Y ? offsetX : this.rect.width + offsetX, offsetY]
            : [this.rect.width + offsetX, offsetY];
    }
    renderAxisTitle(option, textAlign) {
        const { text, offsetX, offsetY } = option;
        const [x, y] = this.getTitlePosition(offsetX, offsetY);
        const font = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_3__.getTitleFontString)(this.theme);
        const fillStyle = this.theme.color;
        return [
            {
                type: 'label',
                text,
                x,
                y,
                style: ['axisTitle', { textAlign, fillStyle, font }],
            },
        ];
    }
    getTextAlign(hasCenterYAxis = false) {
        if (this.name === _axis__WEBPACK_IMPORTED_MODULE_2__.AxisType.Y) {
            return hasCenterYAxis ? 'center' : 'left';
        }
        if (this.isCircularAxis) {
            return 'center';
        }
        return 'right';
    }
    getCircularAxisTitleRect(option, plotRect, circularAxisData) {
        const { x, y } = plotRect;
        const { centerX, centerY, axisSize, radius: { outer: outerRadius }, } = circularAxisData;
        const { offsetY } = option;
        return {
            x: centerX + x - axisSize / 2,
            y: centerY + y - outerRadius / 2,
            width: axisSize,
            height: this.theme.fontSize + offsetY,
        };
    }
    render({ axes, radialAxes, layout, theme }) {
        var _a, _b, _c;
        const titleOption = this.isCircularAxis ? (_a = radialAxes[this.name]) === null || _a === void 0 ? void 0 : _a.title : (_b = axes[this.name]) === null || _b === void 0 ? void 0 : _b.title;
        this.isShow = !!titleOption;
        if (!this.isShow) {
            return;
        }
        this.theme = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_4__.getAxisTheme)(theme, this.name).title;
        this.rect = layout[`${this.name}Title`];
        this.models = this.renderAxisTitle(titleOption, this.getTextAlign(!!((_c = axes) === null || _c === void 0 ? void 0 : _c.centerYAxis)));
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/axisUsingCenterY.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/axisUsingCenterY.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AxisUsingCenterY)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _axis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");





class AxisUsingCenterY extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = { label: [], tick: [], axisLine: [] };
    }
    initialize({ name }) {
        this.type = 'axis';
        this.name = name;
        this.yAxisComponent = name === _axis__WEBPACK_IMPORTED_MODULE_1__.AxisType.Y;
    }
    render({ layout, axes, theme }) {
        const { centerYAxis } = axes;
        if (!centerYAxis) {
            return;
        }
        this.theme = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_2__.getAxisTheme)(theme, this.name);
        this.rect = layout[this.name];
        if (this.name === 'yAxis') {
            this.rect = Object.assign(Object.assign({}, this.rect), { x: centerYAxis.x });
        }
        const { viewLabels, tickCount, tickInterval, needRotateLabel, radian, offsetY } = axes[this.name];
        const renderOptions = {
            tickInterval,
            centerYAxis,
            needRotateLabel,
            radian,
            offsetY,
            relativePositions: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.makeTickPixelPositions)(this.axisSize(centerYAxis), tickCount),
        };
        const offsetKey = this.yAxisComponent ? 'y' : 'x';
        const anchorKey = this.yAxisComponent ? 'x' : 'y';
        this.models.label = this.renderLabelModels(viewLabels, offsetKey, anchorKey, renderOptions);
        this.models.tick = this.renderTickModels(offsetKey, anchorKey, renderOptions);
        this.models.axisLine = this.renderAxisLineModel(centerYAxis);
        if (!this.drawModels) {
            this.drawModels = {
                tick: [],
                label: [],
                axisLine: this.models.axisLine,
            };
            ['tick', 'label'].forEach((type) => {
                this.drawModels[type] = this.models[type].map((m) => {
                    const drawModel = Object.assign({}, m);
                    if (this.yAxisComponent) {
                        drawModel.y = 0;
                    }
                    else {
                        drawModel.x = 0;
                    }
                    return drawModel;
                });
            });
        }
    }
    renderAxisLineModel({ xAxisHalfSize, secondStartX }) {
        const zeroPixel = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(0);
        const widthPixel = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(this.rect.width);
        let axisLine;
        if (this.yAxisComponent) {
            const heightPixel = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(this.rect.height);
            axisLine = [
                {
                    type: 'line',
                    x: widthPixel,
                    y: zeroPixel,
                    x2: widthPixel,
                    y2: heightPixel,
                },
                {
                    type: 'line',
                    x: zeroPixel,
                    y: zeroPixel,
                    x2: zeroPixel,
                    y2: heightPixel,
                },
            ];
        }
        else {
            axisLine = [
                {
                    type: 'line',
                    x: zeroPixel,
                    y: zeroPixel,
                    x2: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(xAxisHalfSize),
                    y2: zeroPixel,
                },
                {
                    type: 'line',
                    x: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(secondStartX),
                    y: zeroPixel,
                    x2: widthPixel,
                    y2: zeroPixel,
                },
            ];
        }
        return axisLine;
    }
    renderTickModels(offsetKey, anchorKey, renderOptions) {
        const tickAnchorPoint = this.yAxisComponent ? (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(this.rect.width) : (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(0);
        const { tickInterval, centerYAxis: { secondStartX }, relativePositions, } = renderOptions;
        return relativePositions.reduce((positions, position, index) => {
            if (index % tickInterval) {
                return positions;
            }
            const model = {
                type: 'tick',
                isYAxis: this.yAxisComponent,
                tickSize: this.yAxisComponent ? -5 : 5,
                [offsetKey]: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(position),
                [anchorKey]: tickAnchorPoint,
            };
            const addedTickModel = Object.assign({}, model);
            if (this.yAxisComponent) {
                addedTickModel[anchorKey] = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(0);
                addedTickModel.tickSize = 5;
            }
            else {
                addedTickModel[offsetKey] = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(position + secondStartX);
            }
            return [...positions, model, addedTickModel];
        }, []);
    }
    renderLabelModels(labels, offsetKey, anchorKey, renderOptions) {
        const { centerYAxis: { secondStartX, yAxisLabelAnchorPoint }, offsetY, needRotateLabel, radian, } = renderOptions;
        const labelTheme = this.theme.label;
        const font = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_4__.getTitleFontString)(labelTheme);
        let labelAnchorPoint, textAlign, textLabels;
        if (this.yAxisComponent) {
            labelAnchorPoint = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(yAxisLabelAnchorPoint);
            textAlign = 'center';
            textLabels = labels;
        }
        else {
            labelAnchorPoint = offsetY;
            textLabels = [...labels].reverse();
            textAlign = needRotateLabel ? 'left' : 'center';
        }
        const style = ['default', { textAlign, font, fillStyle: labelTheme.color }];
        return textLabels.reduce((positions, { text, offsetPos }, index) => {
            const model = {
                type: 'label',
                text,
                style,
                [offsetKey]: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(offsetPos) + (this.yAxisComponent ? 0 : secondStartX),
                [anchorKey]: labelAnchorPoint,
                radian,
            };
            const models = [model];
            if (!this.yAxisComponent) {
                const addedLabelModel = Object.assign(Object.assign({}, model), { text: labels[index].text, [offsetKey]: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(model[offsetKey] - secondStartX) });
                models.push(addedLabelModel);
            }
            return [...positions, ...models];
        }, []);
    }
    axisSize(centerYAxis) {
        let size;
        if (this.yAxisComponent) {
            size = this.rect.height;
        }
        else {
            size = centerYAxis.xAxisHalfSize;
        }
        return size;
    }
    beforeDraw(painter) {
        painter.ctx.strokeStyle = 'rgba(0, 0, 0, 0.5)';
        painter.ctx.lineWidth = 1;
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/backButton.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/backButton.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BackButton)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _store_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/layout */ "./node_modules/@toast-ui/chart/dist/esm/store/layout.js");
/* harmony import */ var _exportMenu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");



class BackButton extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    initialize() {
        this.type = 'backButton';
        this.name = 'backButton';
    }
    onClick({ responders }) {
        if (responders.length) {
            this.store.dispatch('zoomBack');
            this.eventBus.emit('resetSelectedSeries');
        }
    }
    render({ options, layout }, computed) {
        if (!(0,_store_layout__WEBPACK_IMPORTED_MODULE_1__.isUsingResetButton)(options)) {
            return;
        }
        this.rect = layout.resetButton;
        this.isShow = computed.isTreemapSeriesZooming;
        this.models = this.isShow ? [{ type: 'backButton', x: 0, y: 0 }] : [];
        this.responders = this.isShow
            ? [{ type: 'rect', x: 0, y: 0, width: _exportMenu__WEBPACK_IMPORTED_MODULE_2__.BUTTON_RECT_SIZE, height: _exportMenu__WEBPACK_IMPORTED_MODULE_2__.BUTTON_RECT_SIZE }]
            : [];
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/background.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/background.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Background)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");

class Background extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    initialize() {
        this.type = 'background';
        this.name = 'background';
    }
    render({ layout, theme }) {
        const { width, height } = layout.chart;
        this.theme = theme.chart;
        this.rect = { x: 0, y: 0, width, height };
        this.models = [
            Object.assign(Object.assign({ type: 'rect' }, this.rect), { color: this.theme.backgroundColor }),
        ];
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/boxPlotSeries.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/boxPlotSeries.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BoxPlotSeries)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_legend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/legend */ "./node_modules/@toast-ui/chart/dist/esm/helpers/legend.js");
/* harmony import */ var _helpers_color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");







const MIN_BAR_WIDTH = 5;
function getPadding(tickDistance, barWidth, seriesLength) {
    return (tickDistance - barWidth * seriesLength) / (seriesLength + 1);
}
function getDefaultColor(defaultColor, color) {
    return (color !== null && color !== void 0 ? color : defaultColor);
}
class BoxPlotSeries extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = { rect: [], line: [], circle: [] };
        this.activatedResponders = [];
        this.eventDetectType = 'point';
        this.onMouseoutComponent = () => {
            this.eventBus.emit('seriesPointHovered', { models: [], name: this.name });
            this.eventBus.emit('renderHoveredSeries', {
                models: [],
                name: this.name,
                eventDetectType: this.eventDetectType,
            });
            this.eventBus.emit('needDraw');
        };
        this.selectSeries = ({ index, seriesIndex, state, }) => {
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(index) || !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(seriesIndex)) {
                return;
            }
            const { name } = state.series.boxPlot[seriesIndex];
            const models = this.getRespondersWithTheme(this.tooltipRectMap[`${name}-${index}`], 'select');
            this.eventBus.emit('renderSelectedSeries', {
                models,
                name: this.name,
                eventDetectType: this.eventDetectType,
            });
            this.eventBus.emit('needDraw');
        };
        this.showTooltip = ({ index, seriesIndex, state }) => {
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(index) || !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(seriesIndex)) {
                return;
            }
            const { name } = state.series.boxPlot[seriesIndex];
            const models = this.getRespondersWithTheme(this.tooltipRectMap[`${name}-${index}`], 'hover');
            this.eventBus.emit('renderHoveredSeries', {
                models,
                name: this.name,
                eventDetectType: this.eventDetectType,
            });
            this.activatedResponders = models;
            this.eventBus.emit('seriesPointHovered', { models: this.activatedResponders, name: this.name });
            this.eventBus.emit('needDraw');
        };
    }
    initialize() {
        this.type = 'series';
        this.name = 'boxPlot';
        this.eventBus.on('selectSeries', this.selectSeries);
        this.eventBus.on('showTooltip', this.showTooltip);
        this.eventBus.on('hideTooltip', this.onMouseoutComponent);
    }
    render(state) {
        var _a, _b;
        const { layout, axes, series, scale, legend, options, theme } = state;
        if (!series.boxPlot) {
            throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.noDataError(this.name));
        }
        if ((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b.eventDetectType) {
            this.eventDetectType = options.series.eventDetectType;
        }
        this.theme = theme.series.boxPlot;
        this.rect = layout.plot;
        this.activeSeriesMap = (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_3__.getActiveSeriesMap)(legend);
        this.selectable = this.getSelectableOption(options);
        const categories = state.categories;
        const { tickDistance } = axes.xAxis;
        const { min, max } = scale.yAxis.limit;
        const boxPlotData = series.boxPlot.data;
        const seriesLength = boxPlotData.length;
        const renderOptions = Object.assign({ ratio: this.rect.height / (max - min), tickDistance }, this.getBarWidths(tickDistance, seriesLength));
        const boxPlotModelData = this.makeBoxPlots(boxPlotData, renderOptions);
        const seriesModels = this.renderSeriesModels(boxPlotModelData);
        this.models = seriesModels;
        if (!this.drawModels) {
            this.drawModels = {
                rect: seriesModels.rect.map((m) => (Object.assign(Object.assign({}, m), { y: m.y + m.height, height: 0 }))),
                line: seriesModels.line,
                circle: seriesModels.circle,
            };
        }
        const tooltipData = this.makeTooltipModel(boxPlotData, categories);
        this.tooltipRectMap = this.makeTooltipRectMap(boxPlotModelData, tooltipData);
        this.responders =
            this.eventDetectType === 'grouped'
                ? this.makeGroupedResponderModel(boxPlotModelData)
                : this.makeDefaultResponderModel(boxPlotModelData, tooltipData);
    }
    makeTooltipRectMap(boxPlotModelData, tooltipData) {
        const result = {};
        boxPlotModelData.forEach((m, tooltipIndex) => {
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(m)) {
                const propName = `${m.name}-${m.index}`;
                if (!result[propName]) {
                    result[propName] = [];
                }
                result[propName].push(Object.assign(Object.assign({}, this.makeHoveredModel(m)), { data: tooltipData[tooltipIndex] }));
            }
        });
        return result;
    }
    makeGroupedResponderModel(boxPlotModelData) {
        const result = [];
        boxPlotModelData.forEach((m) => {
            const { type, index, name } = m;
            const propName = `${name}-${index}`;
            if (type === 'boxPlot' && !result[propName]) {
                const { boxPlotDetection } = m;
                result.push(Object.assign(Object.assign({ type: 'rect', name: propName }, boxPlotDetection), { y: 0, height: this.rect.height }));
            }
        });
        return result;
    }
    makeDefaultResponderModel(boxPlotModelData, tooltipDataArr) {
        return boxPlotModelData.map((m, index) => (Object.assign(Object.assign({}, this.makeHoveredModel(m)), { data: tooltipDataArr[index], color: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_4__.getRGBA)(m.color, 1) })));
    }
    makeHoveredModel(model) {
        const point = model.type === 'boxPlot' && model.rect
            ? { x: model.rect.x, y: model.rect.y }
            : { x: model.x, y: model.y };
        const hoveredModel = Object.assign({}, model);
        if (model.type === 'boxPlot') {
            ['lowerWhisker', 'upperWhisker', 'maximum', 'minimum', 'median'].forEach((prop) => {
                if (model[prop]) {
                    model[prop].detectionSize = 3;
                }
            });
            model.color = (0,_helpers_color__WEBPACK_IMPORTED_MODULE_4__.getRGBA)(hoveredModel.color, 1);
        }
        return Object.assign(Object.assign({}, hoveredModel), point);
    }
    getResponderModelFromMap(responders) {
        if (!responders.length) {
            return [];
        }
        const propName = responders[0].name;
        return this.tooltipRectMap[propName];
    }
    onMousemove({ responders }) {
        if (this.eventDetectType === 'grouped') {
            const models = this.getResponderModelFromMap(responders);
            this.eventBus.emit('renderHoveredSeries', {
                models: this.getRespondersWithTheme(models, 'select'),
                name: this.name,
                eventDetectType: this.eventDetectType,
            });
            this.activatedResponders = models;
        }
        else {
            this.eventBus.emit('renderHoveredSeries', {
                models: this.getRespondersWithTheme(responders, 'hover'),
                name: this.name,
                eventDetectType: this.eventDetectType,
            });
            this.activatedResponders = responders;
        }
        this.eventBus.emit('seriesPointHovered', { models: this.activatedResponders, name: this.name });
        this.eventBus.emit('needDraw');
    }
    onClick({ responders }) {
        if (this.selectable) {
            let models;
            if (this.eventDetectType === 'grouped') {
                models = this.getRespondersWithTheme(this.getResponderModelFromMap(responders), 'select');
            }
            else {
                models = this.getRespondersWithTheme(responders, 'select');
            }
            this.eventBus.emit('renderSelectedSeries', {
                models,
                name: this.name,
                eventDetectType: this.eventDetectType,
            });
            this.eventBus.emit('needDraw');
        }
    }
    renderSeriesModels(boxPlots) {
        return boxPlots.reduce((acc, cur) => {
            const { type, name } = cur;
            if (type === 'boxPlot') {
                acc.rect.push(Object.assign({ name }, cur.rect));
                ['maximum', 'minimum', 'median', 'upperWhisker', 'lowerWhisker'].forEach((prop) => {
                    acc.line.push(Object.assign({ name }, cur[prop]));
                });
            }
            else {
                acc.circle.push(Object.assign({}, cur));
            }
            return acc;
        }, { rect: [], line: [], circle: [] });
    }
    makeBoxPlots(seriesData, renderOptions) {
        const { ratio, barWidth } = renderOptions;
        const boxPlotModels = [];
        const seriesLength = seriesData.length;
        const { dot } = this.theme;
        seriesData.forEach(({ outliers, data, name, color }, seriesIndex) => {
            const seriesColor = this.getSeriesColor(name, color);
            ((data !== null && data !== void 0 ? data : [])).forEach((datum, dataIndex) => {
                if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(datum)) {
                    const startX = this.getStartX(seriesIndex, dataIndex, renderOptions, seriesLength);
                    const rect = this.getRect(datum, startX, seriesColor, renderOptions);
                    boxPlotModels.push(Object.assign(Object.assign({ type: 'boxPlot', color: seriesColor, name,
                        rect, median: this.getMedian(datum, startX, seriesColor, renderOptions), minimum: this.getMinimum(datum, startX, seriesColor, renderOptions), maximum: this.getMaximum(datum, startX, seriesColor, renderOptions) }, this.getWhisker(datum, startX, seriesColor, renderOptions, rect)), { index: dataIndex, boxPlotDetection: {
                            x: startX,
                            width: barWidth,
                        } }));
                }
            });
            const { color: dotColor, radius, borderColor, borderWidth, useSeriesColor, } = dot;
            ((outliers !== null && outliers !== void 0 ? outliers : [])).forEach((datum) => {
                const [dataIndex, value] = datum;
                const startX = this.getStartX(seriesIndex, dataIndex, renderOptions, seriesLength);
                boxPlotModels.push({
                    type: 'circle',
                    name,
                    x: startX + barWidth / 2,
                    y: this.getYPos(value, ratio),
                    radius: radius,
                    style: [{ strokeStyle: (borderColor !== null && borderColor !== void 0 ? borderColor : seriesColor), lineWidth: borderWidth }],
                    color: useSeriesColor ? seriesColor : dotColor,
                    index: dataIndex,
                });
            });
        });
        return boxPlotModels;
    }
    makeTooltipModel(seriesData, categories) {
        const tooltipData = [];
        seriesData.forEach(({ outliers, data, name, color }) => {
            ((data !== null && data !== void 0 ? data : [])).forEach((datum, dataIndex) => {
                if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(datum)) {
                    const boxPlotData = [...datum].reverse();
                    tooltipData.push({
                        label: name,
                        color: color,
                        value: [
                            'Maximum',
                            'Upper Quartile',
                            'Median',
                            'Lower Quartile',
                            'Minimum',
                        ].reduce((acc, title, index) => {
                            const value = boxPlotData[index];
                            return (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(value) ? acc : [...acc, { title, value }];
                        }, []),
                        category: categories[dataIndex],
                        templateType: 'boxPlot',
                    });
                }
            });
            ((outliers !== null && outliers !== void 0 ? outliers : [])).forEach((datum) => {
                if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(datum)) {
                    const [dataIndex, dataValue] = datum;
                    tooltipData.push({
                        label: name,
                        color: color,
                        value: [{ title: 'Outlier', value: dataValue }],
                        category: categories[dataIndex],
                        templateType: 'boxPlot',
                    });
                }
            });
        });
        return tooltipData;
    }
    getStartX(seriesIndex, dataIndex, renderOptions, seriesLength) {
        const { tickDistance, barWidth } = renderOptions;
        const padding = getPadding(tickDistance, barWidth, seriesLength);
        return dataIndex * tickDistance + (seriesIndex + 1) * padding + barWidth * seriesIndex;
    }
    getYPos(value, ratio, lineWidth) {
        return (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(lineWidth)
            ? (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_5__.crispPixel)(this.rect.height - value * ratio, lineWidth)
            : this.rect.height - value * ratio;
    }
    getBarWidths(tickDistance, seriesLength) {
        const { barWidth: barThemeWidth, barWidthRatios } = this.theme;
        const { barRatio, minMaxBarRatio } = barWidthRatios;
        const defaultBarWidth = Math.max((tickDistance - (0,_helpers_style__WEBPACK_IMPORTED_MODULE_6__.getBoxTypeSeriesPadding)(tickDistance) * (2 + (seriesLength - 1))) /
            seriesLength, MIN_BAR_WIDTH);
        const barWidth = barThemeWidth
            ? (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.calculateSizeWithPercentString)(tickDistance / seriesLength, barThemeWidth)
            : defaultBarWidth;
        return {
            barWidth: barWidth * barRatio,
            minMaxBarWidth: barWidth * minMaxBarRatio,
        };
    }
    getRespondersWithTheme(responders, type) {
        const { color, rect, dot, line, shadowColor, shadowOffsetX, shadowOffsetY, shadowBlur, } = this.theme[type];
        const { whisker, median, maximum, minimum } = line;
        const { color: dotColor, radius, borderColor, borderWidth, useSeriesColor, } = dot;
        return responders.map((m) => {
            const { type: modelType, data } = m;
            let seriesColor = m.color;
            let model;
            if (modelType === 'circle') {
                seriesColor = data.color;
                model = Object.assign(Object.assign({}, m), { radius, color: useSeriesColor ? seriesColor : dotColor, style: [
                        { strokeStyle: getDefaultColor(seriesColor, borderColor), lineWidth: borderWidth },
                    ] });
            }
            else {
                const { rect: seriesRect, upperWhisker, lowerWhisker, median: seriesMedian, maximum: seriesMaximum, minimum: seriesMinimum, } = m;
                model = Object.assign(Object.assign({}, m), { rect: Object.assign(Object.assign({}, seriesRect), { color: (color !== null && color !== void 0 ? color : (0,_helpers_color__WEBPACK_IMPORTED_MODULE_4__.getRGBA)(seriesColor, 1)), thickness: rect.borderWidth, borderColor: rect.borderColor, style: [{ shadowColor, shadowOffsetX, shadowOffsetY, shadowBlur }] }), upperWhisker: Object.assign(Object.assign({}, upperWhisker), { strokeStyle: getDefaultColor(seriesColor, whisker.color), lineWidth: whisker.lineWidth }), lowerWhisker: Object.assign(Object.assign({}, lowerWhisker), { strokeStyle: getDefaultColor(seriesColor, whisker.color), lineWidth: whisker.lineWidth }), median: Object.assign(Object.assign({}, seriesMedian), { strokeStyle: getDefaultColor(seriesColor, median.color), lineWidth: median.lineWidth }), maximum: Object.assign(Object.assign({}, seriesMaximum), { strokeStyle: getDefaultColor(seriesColor, maximum.color), lineWidth: maximum.lineWidth }), minimum: Object.assign(Object.assign({}, seriesMinimum), { strokeStyle: getDefaultColor(seriesColor, minimum.color), lineWidth: minimum.lineWidth }) });
            }
            return model;
        });
    }
    getRect(datum, startX, seriesColor, { barWidth, ratio }) {
        const { rect } = this.theme;
        const [, lowerQuartile, , highQuartile] = datum;
        return {
            type: 'rect',
            x: startX,
            y: this.getYPos(highQuartile, ratio),
            width: barWidth,
            height: (highQuartile - lowerQuartile) * ratio,
            thickness: rect.borderWidth,
            borderColor: rect.borderColor,
            color: seriesColor,
        };
    }
    getWhisker(datum, startX, seriesColor, { barWidth, ratio }, rect) {
        const [minimum, , , , maximum] = datum;
        const { lineWidth, color } = this.theme.line.whisker;
        const x = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_5__.crispPixel)(startX + barWidth / 2, lineWidth);
        return {
            upperWhisker: {
                type: 'line',
                x,
                y: this.getYPos(maximum, ratio, lineWidth),
                x2: x,
                y2: rect.y,
                strokeStyle: (color !== null && color !== void 0 ? color : seriesColor),
                lineWidth,
            },
            lowerWhisker: {
                type: 'line',
                x,
                y: this.getYPos(minimum, ratio, lineWidth),
                x2: x,
                y2: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_5__.crispPixel)(rect.y + rect.height, lineWidth),
                strokeStyle: (color !== null && color !== void 0 ? color : seriesColor),
                lineWidth,
            },
        };
    }
    getMedian(datum, startX, seriesColor, { barWidth, ratio }) {
        const median = datum[2];
        const { lineWidth, color } = this.theme.line.median;
        return {
            type: 'line',
            x: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_5__.crispPixel)(startX, lineWidth),
            y: this.getYPos(median, ratio, lineWidth),
            x2: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_5__.crispPixel)(startX + barWidth, lineWidth),
            y2: this.getYPos(median, ratio, lineWidth),
            strokeStyle: (color !== null && color !== void 0 ? color : seriesColor),
            lineWidth: lineWidth,
        };
    }
    getMinimum(datum, startX, seriesColor, { barWidth, ratio, minMaxBarWidth }) {
        const minimum = datum[0];
        const { lineWidth, color } = this.theme.line.minimum;
        return {
            type: 'line',
            x: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_5__.crispPixel)(startX + (barWidth - minMaxBarWidth) / 2, lineWidth),
            y: this.getYPos(minimum, ratio, lineWidth),
            x2: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_5__.crispPixel)(startX + (barWidth - minMaxBarWidth) / 2 + minMaxBarWidth, lineWidth),
            y2: this.getYPos(minimum, ratio, lineWidth),
            strokeStyle: (color !== null && color !== void 0 ? color : seriesColor),
            lineWidth: lineWidth,
        };
    }
    getMaximum(datum, startX, seriesColor, { barWidth, ratio, minMaxBarWidth }) {
        const maximum = datum[4];
        const { lineWidth, color } = this.theme.line.maximum;
        return {
            type: 'line',
            x: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_5__.crispPixel)(startX + (barWidth - minMaxBarWidth) / 2, lineWidth),
            y: this.getYPos(maximum, ratio, lineWidth),
            x2: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_5__.crispPixel)(startX + (barWidth - minMaxBarWidth) / 2 + minMaxBarWidth, lineWidth),
            y2: this.getYPos(maximum, ratio, lineWidth),
            strokeStyle: (color !== null && color !== void 0 ? color : seriesColor),
            lineWidth: lineWidth,
        };
    }
    getSeriesColor(seriesName, seriesColor) {
        const { select, areaOpacity } = this.theme;
        const active = this.activeSeriesMap[seriesName];
        const selected = Object.values(this.activeSeriesMap).some((elem) => !elem);
        const selectedOpacity = active ? select.areaOpacity : select.restSeries.areaOpacity;
        const opacity = selected ? selectedOpacity : areaOpacity;
        return (0,_helpers_color__WEBPACK_IMPORTED_MODULE_4__.getRGBA)(seriesColor, opacity);
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/boxSeries.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/boxSeries.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SeriesDirection": () => (/* binding */ SeriesDirection),
/* harmony export */   "isLeftBottomSide": () => (/* binding */ isLeftBottomSide),
/* harmony export */   "default": () => (/* binding */ BoxSeries)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _helpers_color__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");
/* harmony import */ var _helpers_range__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/range */ "./node_modules/@toast-ui/chart/dist/esm/helpers/range.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _helpers_boxSeries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/boxSeries */ "./node_modules/@toast-ui/chart/dist/esm/helpers/boxSeries.js");
/* harmony import */ var _helpers_dataLabels__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../helpers/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/helpers/dataLabels.js");
/* harmony import */ var _helpers_legend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/legend */ "./node_modules/@toast-ui/chart/dist/esm/helpers/legend.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _helpers_responders__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../helpers/responders */ "./node_modules/@toast-ui/chart/dist/esm/helpers/responders.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");
/* harmony import */ var _helpers_validation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/validation */ "./node_modules/@toast-ui/chart/dist/esm/helpers/validation.js");













var SeriesDirection;
(function (SeriesDirection) {
    SeriesDirection[SeriesDirection["POSITIVE"] = 0] = "POSITIVE";
    SeriesDirection[SeriesDirection["NEGATIVE"] = 1] = "NEGATIVE";
    SeriesDirection[SeriesDirection["BOTH"] = 2] = "BOTH";
})(SeriesDirection || (SeriesDirection = {}));
const BOX = {
    BAR: 'bar',
    COLUMN: 'column',
};
function isLeftBottomSide(seriesIndex) {
    return !!(seriesIndex % 2);
}
function calculateBarLength(value, min, max) {
    if ((0,_helpers_range__WEBPACK_IMPORTED_MODULE_0__.isRangeValue)(value)) {
        let [start, end] = value;
        if (start < min) {
            start = min;
        }
        if (end > max) {
            end = max;
        }
        return end - start;
    }
    return (0,_helpers_boxSeries__WEBPACK_IMPORTED_MODULE_1__.calibrateDrawingValue)(value, min, max);
}
class BoxSeries extends _component__WEBPACK_IMPORTED_MODULE_2__["default"] {
    constructor() {
        super(...arguments);
        this.models = { series: [] };
        this.activatedResponders = [];
        this.isBar = true;
        this.valueAxis = 'xAxis';
        this.labelAxis = 'yAxis';
        this.anchorSizeKey = 'height';
        this.offsetSizeKey = 'width';
        this.basePosition = 0;
        this.leftBasePosition = 0;
        this.rightBasePosition = 0;
        this.isRangeData = false;
        this.offsetKey = 'x';
        this.eventDetectType = 'point';
        this.onMouseoutComponent = () => {
            this.eventBus.emit('seriesPointHovered', { models: [], name: this.name });
            this.eventBus.emit('renderHoveredSeries', {
                models: [],
                name: this.name,
                eventDetectType: this.eventDetectType,
            });
            this.eventBus.emit('needDraw');
        };
        this.selectSeries = (info) => {
            const { index, seriesIndex } = info;
            if (!(0,_helpers_validation__WEBPACK_IMPORTED_MODULE_3__.isAvailableSelectSeries)(info, 'column')) {
                return;
            }
            const model = this.tooltipRectMap[seriesIndex][index];
            if (!model) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_4__.message.SELECT_SERIES_API_INDEX_ERROR);
            }
            this.eventBus.emit('renderSelectedSeries', {
                models: this.getRespondersWithTheme([model], 'select'),
                name: this.name,
            });
            this.eventBus.emit('needDraw');
        };
        this.showTooltip = (info) => {
            const { index, seriesIndex } = info;
            if (!(0,_helpers_validation__WEBPACK_IMPORTED_MODULE_3__.isAvailableShowTooltipInfo)(info, this.eventDetectType, 'column')) {
                return;
            }
            const models = this.eventDetectType === 'grouped'
                ? this.getGroupedRect([this.responders[index]], 'hover')
                : this.getRespondersWithTheme([this.tooltipRectMap[index][seriesIndex]], 'hover');
            if (!models.length) {
                return;
            }
            this.eventBus.emit('renderHoveredSeries', {
                models,
                name: this.name,
                eventDetectType: this.eventDetectType,
            });
            this.activatedResponders =
                this.eventDetectType === 'grouped' ? this.tooltipRectMap[index] : models;
            this.eventBus.emit('seriesPointHovered', { models: this.activatedResponders, name: this.name });
            this.eventBus.emit('needDraw');
        };
    }
    initialize({ name, stackChart }) {
        this.initializeFields(name);
        if (!stackChart) {
            this.eventBus.on('selectSeries', this.selectSeries);
            this.eventBus.on('showTooltip', this.showTooltip);
            this.eventBus.on('hideTooltip', this.onMouseoutComponent);
        }
    }
    initializeFields(name) {
        this.type = 'series';
        this.name = name;
        this.isBar = name === BOX.BAR;
        this.offsetKey = this.isBar ? 'x' : 'y';
        this.valueAxis = this.isBar ? 'xAxis' : 'yAxis';
        this.labelAxis = this.isBar ? 'yAxis' : 'xAxis';
        this.anchorSizeKey = this.isBar ? 'height' : 'width';
        this.offsetSizeKey = this.isBar ? 'width' : 'height';
    }
    initUpdate(delta) {
        if (!this.drawModels) {
            return;
        }
        if (this.isRangeData) {
            this.initUpdateRangeData(delta);
            return;
        }
        this.initUpdateClipRect(delta);
        this.initUpdateConnector(delta);
    }
    initUpdateRangeData(delta) {
        const { series } = this.drawModels;
        this.drawModels.clipRect = this.models.clipRect;
        const target = this.models.series;
        series.forEach((current, index) => {
            const targetModel = target[index];
            if (delta === 0) {
                current[this.offsetSizeKey] = 0;
            }
            const offsetSize = current[this.offsetSizeKey] +
                (targetModel[this.offsetSizeKey] - current[this.offsetSizeKey]) * delta;
            current[this.offsetSizeKey] = offsetSize;
            if (!this.isBar) {
                current[this.offsetKey] =
                    targetModel[this.offsetKey] + targetModel[this.offsetSizeKey] - offsetSize;
            }
        });
    }
    initUpdateClipRect(delta) {
        const { clipRect } = this.drawModels;
        if (!clipRect) {
            return;
        }
        const current = clipRect[0];
        const key = this.offsetSizeKey;
        const target = this.models.clipRect[0];
        const offsetSize = current[key] + (target[key] - current[key]) * delta;
        current[key] = offsetSize;
        current[this.offsetKey] = Math.max(this.basePosition - (offsetSize * this.basePosition) / target[key], 0);
    }
    initUpdateConnector(delta) {
        const { connector } = this.drawModels;
        if (!connector) {
            return;
        }
        const target = this.models.connector;
        connector.forEach((current, index) => {
            const alpha = (0,_helpers_color__WEBPACK_IMPORTED_MODULE_5__.getAlpha)(target[index].strokeStyle) * delta;
            current.strokeStyle = (0,_helpers_color__WEBPACK_IMPORTED_MODULE_5__.getRGBA)(current.strokeStyle, alpha);
        });
    }
    setEventDetectType(series, options) {
        var _a, _b;
        if (series.line) {
            this.eventDetectType = 'grouped';
        }
        if ((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b.eventDetectType) {
            this.eventDetectType = options.series.eventDetectType;
        }
    }
    getOptions(chartOptions) {
        var _a;
        const options = Object.assign({}, chartOptions);
        if (((_a = options) === null || _a === void 0 ? void 0 : _a.series) && options.series.column) {
            options.series = Object.assign(Object.assign({}, options.series), options.series.column);
        }
        return options;
    }
    render(chartState, computed) {
        var _a, _b;
        const { layout, series, axes, stackSeries, legend, theme, scale } = chartState;
        this.isShow = !(stackSeries && stackSeries[this.name]);
        if (!this.isShow) {
            return;
        }
        const categories = (_a = chartState.categories, (_a !== null && _a !== void 0 ? _a : []));
        const options = this.getOptions(chartState.options);
        this.setEventDetectType(series, options);
        this.theme = theme.series[this.name];
        this.rect = layout.plot;
        this.activeSeriesMap = (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_6__.getActiveSeriesMap)(legend);
        this.selectable = this.getSelectableOption(options);
        this.valueAxis = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_7__.getValueAxisName)(options, this.name, this.isBar ? 'xAxis' : 'yAxis');
        const seriesData = series[this.name].data.map((seriesDatum) => (Object.assign(Object.assign({}, seriesDatum), { data: (0,_helpers_range__WEBPACK_IMPORTED_MODULE_0__.getDataInRange)(seriesDatum.data, computed.viewRange) })));
        if (axes.centerYAxis) {
            this.valueAxis = 'centerYAxis';
        }
        const { tickDistance } = axes[this.labelAxis];
        const diverging = !!((_b = options.series) === null || _b === void 0 ? void 0 : _b.diverging);
        const { limit, stepSize } = this.getScaleData(scale);
        const labels = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_8__.makeLabelsFromLimit)(limit, stepSize);
        const { min, max } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_7__.getLimitOnAxis)(labels);
        this.basePosition = this.getBasePosition(axes[this.valueAxis]);
        let offsetSize = this.getOffsetSize();
        const { centerYAxis } = axes;
        if (diverging) {
            const [left, right] = this.getDivergingBasePosition(centerYAxis);
            this.basePosition = this.getOffsetSize() / 2;
            this.leftBasePosition = left;
            this.rightBasePosition = right;
            offsetSize = this.getOffsetSizeWithDiverging(centerYAxis);
        }
        const renderOptions = {
            min,
            max,
            tickDistance,
            diverging,
            ratio: this.getValueRatio(min, max, offsetSize),
            hasNegativeValue: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_9__.hasNegative)(labels),
            seriesDirection: this.getSeriesDirection(labels),
            defaultPadding: (0,_helpers_style__WEBPACK_IMPORTED_MODULE_10__.getBoxTypeSeriesPadding)(tickDistance),
        };
        const seriesModels = this.renderSeriesModel(seriesData, renderOptions);
        const tooltipData = this.makeTooltipData(seriesData, renderOptions, categories);
        const clipRect = this.renderClipRectAreaModel();
        this.models = {
            clipRect: [clipRect],
            series: seriesModels,
        };
        if (!this.drawModels) {
            this.drawModels = {
                clipRect: [this.initClipRect(clipRect)],
                series: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_9__.deepCopyArray)(seriesModels),
            };
        }
        if ((0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_11__.getDataLabelsOptions)(options, this.name).visible) {
            const dataLabelData = seriesModels.reduce((acc, data) => {
                return (0,_helpers_range__WEBPACK_IMPORTED_MODULE_0__.isRangeValue)(data.value)
                    ? [...acc, ...this.makeDataLabelRangeData(data)]
                    : [...acc, this.makeDataLabel(data, centerYAxis)];
            }, []);
            this.renderDataLabels(dataLabelData);
        }
        this.tooltipRectMap = this.makeTooltipRectMap(seriesModels, tooltipData);
        this.responders = this.getBoxSeriesResponders(seriesModels, tooltipData, axes, categories);
    }
    getScaleData(scale) {
        return scale[this.valueAxis === 'centerYAxis' ? 'xAxis' : this.valueAxis];
    }
    getBoxSeriesResponders(seriesModels, tooltipData, axes, categories) {
        const hoveredSeries = this.renderHoveredSeriesModel(seriesModels);
        return this.eventDetectType === 'grouped'
            ? (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_12__.makeRectResponderModel)(this.rect, (this.isBar ? axes.yAxis : axes.xAxis), categories, !this.isBar)
            : hoveredSeries.map((m, index) => (Object.assign(Object.assign({}, m), { data: tooltipData[index] })));
    }
    makeTooltipRectMap(seriesModels, tooltipDataArr) {
        return seriesModels.reduce((acc, cur, dataIndex) => {
            const index = cur.index;
            const tooltipModel = Object.assign(Object.assign({}, cur), { data: tooltipDataArr[dataIndex] });
            if (!acc[index]) {
                acc[index] = [];
            }
            acc[index].push(tooltipModel);
            return acc;
        }, []);
    }
    renderClipRectAreaModel() {
        return {
            type: 'clipRectArea',
            x: 0,
            y: 0,
            width: this.rect.width,
            height: this.rect.height,
        };
    }
    initClipRect(clipRect) {
        return {
            type: 'clipRectArea',
            width: this.isBar ? 0 : clipRect.width,
            height: this.isBar ? clipRect.height : 0,
            x: this.isBar ? 0 : clipRect.x,
            y: this.isBar ? clipRect.y : 0,
        };
    }
    renderSeriesModel(seriesData, renderOptions) {
        const { tickDistance, diverging } = renderOptions;
        const seriesLength = seriesData.length;
        const validDiverging = diverging && seriesData.length === 2;
        const columnWidth = this.getColumnWidth(renderOptions, seriesLength, validDiverging);
        const seriesModels = [];
        const padding = (tickDistance - columnWidth * (validDiverging ? 1 : seriesLength)) / 2;
        seriesData.forEach(({ data, color: seriesColor, name, colorByCategories }, seriesIndex) => {
            const seriesPos = (diverging ? 0 : seriesIndex) * columnWidth + padding;
            const isLBSideWithDiverging = diverging && isLeftBottomSide(seriesIndex);
            const colorLength = colorByCategories ? seriesColor.length : 1;
            this.isRangeData = (0,_helpers_range__WEBPACK_IMPORTED_MODULE_0__.isRangeData)(data);
            data.forEach((value, index) => {
                const dataStart = seriesPos + index * tickDistance;
                const barLength = this.makeBarLength(value, renderOptions);
                const color = this.getSeriesColor(name, colorByCategories ? seriesColor[index % colorLength] : seriesColor);
                if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_9__.isNumber)(barLength)) {
                    const startPosition = this.getStartPosition(barLength, value, renderOptions, isLBSideWithDiverging);
                    seriesModels.push(Object.assign(Object.assign({ type: 'rect', color,
                        value }, this.getAdjustedRect(dataStart, startPosition, barLength, columnWidth)), { name,
                        index }));
                }
            });
        });
        return seriesModels;
    }
    renderHoveredSeriesModel(seriesModel) {
        return seriesModel.map((data) => {
            return this.makeHoveredSeriesModel(data);
        });
    }
    makeHoveredSeriesModel(data) {
        const { x, y, width, height, color, index } = data;
        return {
            type: 'rect',
            color: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_5__.getRGBA)(color, 1),
            x,
            y,
            width,
            height,
            index,
        };
    }
    getRectModelsFromRectResponders(responders) {
        var _a;
        if (!responders.length) {
            return [];
        }
        return _a = this.tooltipRectMap[responders[0].index], (_a !== null && _a !== void 0 ? _a : []);
    }
    getGroupedRect(responders, type) {
        const rectModels = this.getRectModelsFromRectResponders(responders);
        const { color, opacity } = this.theme[type].groupedRect;
        return rectModels.length
            ? responders.map((m) => (Object.assign(Object.assign({}, m), { color: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_5__.getRGBA)(color, opacity) })))
            : [];
    }
    onMousemoveGroupedType(responders) {
        const rectModels = this.getRectModelsFromRectResponders(responders);
        this.eventBus.emit('renderHoveredSeries', {
            models: this.getGroupedRect(responders, 'hover'),
            name: this.name,
            eventDetectType: this.eventDetectType,
        });
        this.activatedResponders = rectModels;
    }
    onMousemove({ responders }) {
        if (this.eventDetectType === 'grouped') {
            this.onMousemoveGroupedType(responders);
        }
        else {
            this.eventBus.emit('renderHoveredSeries', {
                models: this.getRespondersWithTheme(responders, 'hover'),
                name: this.name,
                eventDetectType: this.eventDetectType,
            });
            this.activatedResponders = responders;
        }
        this.eventBus.emit('seriesPointHovered', { models: this.activatedResponders, name: this.name });
        this.eventBus.emit('needDraw');
    }
    makeTooltipData(seriesData, renderOptions, categories) {
        const tooltipData = [];
        seriesData.forEach(({ data, name, color, colorByCategories }) => {
            data.forEach((value, dataIndex) => {
                if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_9__.isNull)(value)) {
                    const barLength = this.makeBarLength(value, renderOptions);
                    if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_9__.isNumber)(barLength)) {
                        tooltipData.push({
                            label: name,
                            color: colorByCategories ? color[dataIndex] : color,
                            value: this.getTooltipValue(value),
                            category: categories.length ? categories[dataIndex] : '',
                        });
                    }
                }
            });
        });
        return tooltipData;
    }
    getTooltipValue(value) {
        return (0,_helpers_range__WEBPACK_IMPORTED_MODULE_0__.isRangeValue)(value) ? `${value[0]} ~ ${value[1]}` : value;
    }
    getBasePosition({ labels, tickCount, zeroPosition }) {
        const valueLabels = this.isBar ? labels : [...labels].reverse();
        const tickPositions = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_8__.makeTickPixelPositions)(this.getOffsetSize(), tickCount);
        const seriesDirection = this.getSeriesDirection(valueLabels);
        return zeroPosition
            ? zeroPosition
            : this.getTickPositionIfNotZero(tickPositions, seriesDirection);
    }
    getDivergingBasePosition(centerYAxis) {
        let leftZeroPosition, rightZeroPosition;
        if (centerYAxis) {
            leftZeroPosition = centerYAxis.xAxisHalfSize;
            rightZeroPosition = centerYAxis.secondStartX;
        }
        else {
            const divergingZeroPosition = this.getOffsetSize() / 2;
            leftZeroPosition = rightZeroPosition = divergingZeroPosition;
        }
        return [leftZeroPosition, rightZeroPosition];
    }
    getOffsetSize() {
        return this.rect[this.offsetSizeKey];
    }
    getValueRatio(min, max, size) {
        return size / (max - min);
    }
    makeBarLength(value, renderOptions) {
        if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_9__.isNull)(value)) {
            return null;
        }
        const { min, max, ratio } = renderOptions;
        const calculatedValue = calculateBarLength(value, min, max);
        return Math.max(this.getBarLength(calculatedValue, ratio), 2);
    }
    getBarLength(value, ratio) {
        return value < 0 ? Math.abs(value) * ratio : value * ratio;
    }
    getStartPositionWithRangeValue(value, barLength, renderOptions) {
        const { min, ratio } = renderOptions;
        let [start] = value;
        if (start < min) {
            start = min;
        }
        const startPosition = (start - min) * ratio;
        return this.isBar ? startPosition : this.getOffsetSize() - startPosition - barLength;
    }
    getStartPosition(barLength, value, renderOptions, isLBSideWithDiverging) {
        const { diverging, seriesDirection } = renderOptions;
        let startPos;
        if ((0,_helpers_range__WEBPACK_IMPORTED_MODULE_0__.isRangeValue)(value)) {
            startPos = this.getStartPositionWithRangeValue(value, barLength, renderOptions);
        }
        else if (diverging) {
            startPos = isLBSideWithDiverging
                ? this.getStartPosOnLeftBottomSide(barLength, diverging)
                : this.getStartPosOnRightTopSide(barLength, diverging);
        }
        else if (seriesDirection === SeriesDirection.POSITIVE) {
            startPos = this.getStartPosOnRightTopSide(barLength);
        }
        else if (seriesDirection === SeriesDirection.NEGATIVE) {
            startPos = this.getStartPosOnLeftBottomSide(barLength);
        }
        else {
            startPos =
                value < 0
                    ? this.getStartPosOnLeftBottomSide(barLength)
                    : this.getStartPosOnRightTopSide(barLength);
        }
        return startPos;
    }
    getStartPosOnRightTopSide(barLength, diverging = false) {
        let pos;
        if (diverging) {
            pos = this.isBar ? this.rightBasePosition : this.rightBasePosition - barLength;
        }
        else {
            pos = this.isBar ? this.basePosition : this.basePosition - barLength;
        }
        return pos;
    }
    getStartPosOnLeftBottomSide(barLength, diverging = false) {
        let pos;
        if (diverging) {
            pos = this.isBar ? this.leftBasePosition - barLength : this.leftBasePosition;
        }
        else {
            pos = this.isBar ? this.basePosition - barLength : this.basePosition;
        }
        return pos;
    }
    getAdjustedRect(seriesPosition, dataPosition, barLength, columnWidth) {
        return {
            x: this.isBar ? dataPosition : seriesPosition,
            y: this.isBar ? seriesPosition : dataPosition,
            width: this.isBar ? barLength : columnWidth,
            height: this.isBar ? columnWidth : barLength,
        };
    }
    getColumnWidth(renderOptions, seriesLength, validDiverging = false) {
        const { tickDistance, defaultPadding } = renderOptions;
        seriesLength = validDiverging ? 1 : seriesLength;
        const themeBarWidth = this.theme.barWidth;
        return themeBarWidth
            ? (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_9__.calculateSizeWithPercentString)(tickDistance, themeBarWidth)
            : (tickDistance - defaultPadding * 2) / seriesLength;
    }
    getSeriesDirection(labels) {
        let result = SeriesDirection.BOTH;
        if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_9__.hasPositiveOnly)(labels)) {
            result = SeriesDirection.POSITIVE;
        }
        else if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_9__.hasNegativeOnly)(labels)) {
            result = SeriesDirection.NEGATIVE;
        }
        return result;
    }
    getTickPositionIfNotZero(tickPositions, direction) {
        if (!tickPositions.length) {
            return 0;
        }
        const firstTickPosition = Number((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_9__.first)(tickPositions));
        const lastTickPosition = Number((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_9__.last)(tickPositions));
        if (direction === SeriesDirection.POSITIVE) {
            return this.isBar ? firstTickPosition : lastTickPosition;
        }
        if (direction === SeriesDirection.NEGATIVE) {
            return this.isBar ? lastTickPosition : firstTickPosition;
        }
        return 0;
    }
    makeDataLabel(rect, centerYAxis) {
        const { dataLabels } = this.theme;
        return Object.assign(Object.assign({}, rect), { direction: this.getDataLabelDirection(rect, centerYAxis), plot: { x: 0, y: 0, size: this.getOffsetSize() }, theme: Object.assign(Object.assign({}, (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_9__.omit)(dataLabels, 'stackTotal')), { color: dataLabels.useSeriesColor ? rect.color : dataLabels.color }) });
    }
    makeDataLabelRangeData(rect) {
        const { dataLabels } = this.theme;
        return rect.value.reduce((acc, value, index) => [
            ...acc,
            Object.assign(Object.assign({}, rect), { value, direction: this.getDataLabelRangeDataDirection(index % 2 === 0), plot: { x: 0, y: 0, size: this.getOffsetSize() }, theme: Object.assign(Object.assign({}, (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_9__.omit)(dataLabels, 'stackTotal')), { color: dataLabels.useSeriesColor ? rect.color : dataLabels.color }) }),
        ], []);
    }
    getDataLabelRangeDataDirection(isEven) {
        let direction;
        if (this.isBar) {
            direction = isEven ? 'left' : 'right';
        }
        else {
            direction = isEven ? 'bottom' : 'top';
        }
        return direction;
    }
    getDataLabelDirection(rect, centerYAxis) {
        let direction;
        if (this.isBar) {
            const basePos = centerYAxis ? this.leftBasePosition : this.basePosition;
            direction = rect.x < basePos ? 'left' : 'right';
        }
        else {
            direction = rect.y >= this.basePosition ? 'bottom' : 'top';
        }
        return direction;
    }
    getOffsetSizeWithDiverging(centerYAxis) {
        return centerYAxis ? centerYAxis.xAxisHalfSize : this.getOffsetSize() / 2;
    }
    onClick({ responders }) {
        if (this.selectable) {
            let models;
            if (this.eventDetectType === 'grouped') {
                models = [
                    ...this.getGroupedRect(responders, 'select'),
                    ...this.getRectModelsFromRectResponders(responders),
                ];
            }
            else {
                models = this.getRespondersWithTheme(responders, 'select');
            }
            this.eventBus.emit('renderSelectedSeries', {
                models,
                name: this.name,
                eventDetectType: this.eventDetectType,
            });
            this.eventBus.emit('needDraw');
        }
    }
    getRespondersWithTheme(responders, type) {
        const { color, borderColor, borderWidth, shadowBlur, shadowColor, shadowOffsetX, shadowOffsetY, } = this.theme[type];
        return responders.map((model) => (Object.assign(Object.assign({}, model), { color: (color !== null && color !== void 0 ? color : model.color), thickness: borderWidth, borderColor, style: [
                {
                    shadowBlur,
                    shadowColor,
                    shadowOffsetX,
                    shadowOffsetY,
                },
            ] })));
    }
    getSeriesColor(name, color) {
        const { select, areaOpacity } = this.theme;
        const active = this.activeSeriesMap[name];
        const selected = Object.values(this.activeSeriesMap).some((elem) => !elem);
        return selected
            ? (0,_helpers_color__WEBPACK_IMPORTED_MODULE_5__.getRGBA)(color, active ? select.areaOpacity : select.restSeries.areaOpacity)
            : (0,_helpers_color__WEBPACK_IMPORTED_MODULE_5__.getRGBA)(color, areaOpacity);
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/boxStackSeries.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/boxStackSeries.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BoxStackSeries)
/* harmony export */ });
/* harmony import */ var _boxSeries__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./boxSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/boxSeries.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _store_stackSeriesData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../store/stackSeriesData */ "./node_modules/@toast-ui/chart/dist/esm/store/stackSeriesData.js");
/* harmony import */ var _helpers_boxSeries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/boxSeries */ "./node_modules/@toast-ui/chart/dist/esm/helpers/boxSeries.js");
/* harmony import */ var _helpers_dataLabels__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../helpers/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/helpers/dataLabels.js");
/* harmony import */ var _helpers_color__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../helpers/color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");
/* harmony import */ var _helpers_legend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/legend */ "./node_modules/@toast-ui/chart/dist/esm/helpers/legend.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _helpers_range__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/range */ "./node_modules/@toast-ui/chart/dist/esm/helpers/range.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");












function calibrateDrawingValue(values, seriesIndex, renderOptions) {
    const { stack, min, max } = renderOptions;
    return (0,_store_stackSeriesData__WEBPACK_IMPORTED_MODULE_0__.isPercentStack)(stack)
        ? values[seriesIndex]
        : (0,_helpers_boxSeries__WEBPACK_IMPORTED_MODULE_1__.calibrateBoxStackDrawingValue)(values, seriesIndex, min, max);
}
function getDivisorForPercent(total, scaleType) {
    const { positive, negative } = total;
    let divisor = positive + Math.abs(negative);
    if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.includes)(['dualPercentStack', 'divergingPercentStack'], scaleType)) {
        divisor *= 2;
    }
    return divisor;
}
function getDirectionKeys(seriesDirection) {
    let result = ['positive', 'negative'];
    if (seriesDirection === _boxSeries__WEBPACK_IMPORTED_MODULE_3__.SeriesDirection.POSITIVE) {
        result = ['positive'];
    }
    else if (seriesDirection === _boxSeries__WEBPACK_IMPORTED_MODULE_3__.SeriesDirection.NEGATIVE) {
        result = ['negative'];
    }
    return result;
}
function getStackSeriesDataInViewRange(stackSeriesData, viewRange) {
    if (!viewRange) {
        return stackSeriesData;
    }
    const stackData = Array.isArray(stackSeriesData.stackData)
        ? (0,_helpers_range__WEBPACK_IMPORTED_MODULE_4__.getDataInRange)(stackSeriesData.stackData, viewRange)
        : Object.assign({}, Object.keys(stackSeriesData.stackData).reduce((acc, name) => (Object.assign(Object.assign({}, acc), { [name]: (0,_helpers_range__WEBPACK_IMPORTED_MODULE_4__.getDataInRange)(stackSeriesData.stackData[name], viewRange) })), {}));
    const data = stackSeriesData.data.map((seriesDatum) => (Object.assign(Object.assign({}, seriesDatum), { data: (0,_helpers_range__WEBPACK_IMPORTED_MODULE_4__.getDataInRange)(seriesDatum.data, viewRange) })));
    return Object.assign(Object.assign({}, stackSeriesData), { data, stackData });
}
class BoxStackSeries extends _boxSeries__WEBPACK_IMPORTED_MODULE_3__["default"] {
    constructor() {
        super(...arguments);
        this.selectSeries = ({ index, seriesIndex, state, }) => {
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.isNumber)(index) || !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.isNumber)(seriesIndex)) {
                return;
            }
            const { stackSeries } = state;
            const stackSeriesData = stackSeries[this.name];
            const { name } = stackSeriesData.data[seriesIndex];
            const model = this.tooltipRectMap[index].find(({ name: seriesName }) => seriesName === name);
            if (!model) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_5__.message.SELECT_SERIES_API_INDEX_ERROR);
            }
            this.eventBus.emit('renderSelectedSeries', {
                models: this.getRespondersWithTheme([model], 'select'),
                name: this.name,
                eventDetectType: this.eventDetectType,
            });
            this.eventBus.emit('needDraw');
        };
    }
    initialize({ name, stackChart }) {
        this.initializeFields(name);
        if (stackChart) {
            this.eventBus.on('selectSeries', this.selectSeries);
            this.eventBus.on('showTooltip', this.showTooltip);
            this.eventBus.on('hideTooltip', this.onMouseoutComponent);
        }
    }
    render(chartState, computed) {
        var _a, _b;
        const { layout, series: seriesData, axes, stackSeries, legend, theme, scale } = chartState;
        const { viewRange } = computed;
        this.isShow = !!stackSeries[this.name];
        if (!this.isShow) {
            return;
        }
        const categories = (_a = chartState.categories, (_a !== null && _a !== void 0 ? _a : []));
        const options = this.getOptions(chartState.options);
        this.setEventDetectType(seriesData, options);
        this.theme = theme.series[this.name];
        this.rect = layout.plot;
        this.activeSeriesMap = (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_6__.getActiveSeriesMap)(legend);
        this.selectable = this.getSelectableOption(options);
        const stackSeriesData = getStackSeriesDataInViewRange(stackSeries[this.name], viewRange);
        const { tickDistance } = axes[this.labelAxis];
        const diverging = !!((_b = options.series) === null || _b === void 0 ? void 0 : _b.diverging);
        const { limit, stepSize } = this.getScaleData(scale);
        const labels = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_7__.makeLabelsFromLimit)(limit, stepSize);
        const { min, max } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_8__.getLimitOnAxis)(labels);
        const { stack, scaleType } = stackSeriesData;
        this.basePosition = this.getBasePosition(axes[this.valueAxis]);
        let offsetSize = this.getOffsetSize();
        const { centerYAxis } = axes;
        if (diverging) {
            const [left, right] = this.getDivergingBasePosition(centerYAxis);
            this.basePosition = this.getOffsetSize() / 2;
            this.leftBasePosition = left;
            this.rightBasePosition = right;
            offsetSize = this.getOffsetSizeWithDiverging(centerYAxis);
        }
        const renderOptions = {
            stack,
            scaleType,
            tickDistance,
            min,
            max,
            diverging,
            hasNegativeValue: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.hasNegative)(labels),
            seriesDirection: this.getSeriesDirection(labels),
            defaultPadding: (0,_helpers_style__WEBPACK_IMPORTED_MODULE_9__.getBoxTypeSeriesPadding)(tickDistance),
            offsetSize,
            centerYAxis,
        };
        const { series, connector } = this.renderStackSeriesModel(stackSeriesData, renderOptions);
        const clipRect = this.renderClipRectAreaModel();
        const tooltipData = this.getTooltipData(stackSeriesData, categories);
        this.models = {
            clipRect: [clipRect],
            series,
            connector,
        };
        if (!this.drawModels) {
            this.drawModels = {
                clipRect: [this.initClipRect(clipRect)],
                series: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.deepCopyArray)(series),
                connector: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.deepCopyArray)(connector),
            };
        }
        if ((0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_10__.getDataLabelsOptions)(options, this.name).visible) {
            const dataLabelData = this.getDataLabels(series, renderOptions);
            const stackTotalData = this.getTotalDataLabels(stackSeriesData, renderOptions);
            this.renderDataLabels([...dataLabelData, ...stackTotalData]);
        }
        this.tooltipRectMap = this.makeTooltipRectMap(series, tooltipData);
        this.responders = this.getBoxSeriesResponders(series, tooltipData, axes, categories);
    }
    renderStackSeriesModel(seriesData, renderOptions) {
        const { stackData } = seriesData;
        return (0,_store_stackSeriesData__WEBPACK_IMPORTED_MODULE_0__.isGroupStack)(stackData)
            ? this.makeStackGroupSeriesModel(seriesData, renderOptions)
            : this.makeStackSeriesModel(stackData, renderOptions, seriesData.data);
    }
    makeStackSeriesModel(stackData, renderOptions, seriesRawData, stackGroupCount = 1, stackGroupIndex = 0) {
        const seriesModels = [];
        const columnWidth = this.getStackColumnWidth(renderOptions, stackGroupCount);
        const { diverging } = renderOptions;
        const isLBSideWithDiverging = diverging && (0,_boxSeries__WEBPACK_IMPORTED_MODULE_3__.isLeftBottomSide)(stackGroupIndex);
        stackData.forEach(({ values, total }, dataIndex) => {
            const seriesPos = this.getSeriesPosition(renderOptions, columnWidth, dataIndex, stackGroupIndex, stackGroupCount);
            const ratio = this.getStackValueRatio(total, renderOptions);
            values.forEach((value, seriesIndex) => {
                const { barLength, dataPosition } = this.getStackRectInfo(values, seriesIndex, ratio, renderOptions, isLBSideWithDiverging);
                const { name, colorByCategories, color: rawColor } = seriesRawData[seriesIndex];
                const active = this.activeSeriesMap[name];
                const colorLength = rawColor.length || 1;
                const hexColor = colorByCategories ? rawColor[dataIndex % colorLength] : rawColor;
                const color = (0,_helpers_color__WEBPACK_IMPORTED_MODULE_11__.getRGBA)(hexColor, active ? 1 : 0.2);
                seriesModels.push(Object.assign(Object.assign({ type: 'rect', color,
                    name,
                    value }, this.getAdjustedRect(seriesPos, dataPosition, (barLength !== null && barLength !== void 0 ? barLength : 0), columnWidth)), { index: dataIndex }));
            });
        });
        return {
            series: seriesModels,
            connector: this.makeConnectorSeriesModel(stackData, renderOptions, stackGroupCount, stackGroupIndex),
        };
    }
    makeStackGroupSeriesModel(stackSeries, renderOptions) {
        const { stack } = renderOptions;
        const stackGroupData = stackSeries.stackData;
        const seriesRawData = stackSeries.data;
        const stackGroupIds = Object.keys(stackGroupData);
        let seriesModels = [];
        let connectorModels = [];
        stackGroupIds.forEach((groupId, groupIndex) => {
            const filtered = seriesRawData.filter(({ stackGroup }) => stackGroup === groupId);
            const { series, connector } = this.makeStackSeriesModel(stackGroupData[groupId], renderOptions, filtered, stackGroupIds.length, groupIndex);
            seriesModels = [...seriesModels, ...series];
            if (stack.connector) {
                connectorModels = [...connectorModels, ...connector];
            }
        });
        return {
            series: seriesModels,
            connector: connectorModels,
        };
    }
    makeConnectorSeriesModel(stackData, renderOptions, stackGroupCount = 1, stackGroupIndex = 0) {
        const { diverging, stack: { connector }, } = renderOptions;
        if (!connector) {
            return [];
        }
        const columnWidth = this.getStackColumnWidth(renderOptions, stackGroupCount);
        const isLBSideWithDiverging = diverging && (0,_boxSeries__WEBPACK_IMPORTED_MODULE_3__.isLeftBottomSide)(stackGroupIndex);
        const connectorPoints = [];
        stackData.forEach(({ values, total }, index) => {
            const seriesPos = this.getSeriesPosition(renderOptions, columnWidth, index, stackGroupIndex, stackGroupCount);
            const points = [];
            const ratio = this.getStackValueRatio(total, renderOptions);
            values.forEach((value, seriesIndex) => {
                const { barLength, dataPosition } = this.getStackRectInfo(values, seriesIndex, ratio, renderOptions, isLBSideWithDiverging);
                const { x, y } = this.getAdjustedRect(seriesPos, dataPosition, barLength, columnWidth);
                const xPos = !isLBSideWithDiverging && this.isBar ? x + barLength : x;
                const yPos = isLBSideWithDiverging && !this.isBar ? y + barLength : y;
                points.push({ x: xPos, y: yPos });
            });
            connectorPoints.push(points);
        });
        return this.makeConnectorModel(connectorPoints, connector, columnWidth);
    }
    getTooltipData(seriesData, categories) {
        const seriesRawData = seriesData.data;
        const { stackData } = seriesData;
        const colors = seriesRawData.map(({ color }) => color);
        return (0,_store_stackSeriesData__WEBPACK_IMPORTED_MODULE_0__.isGroupStack)(stackData)
            ? this.makeGroupStackTooltipData(seriesRawData, stackData, categories)
            : this.makeStackTooltipData(seriesRawData, stackData, colors, categories);
    }
    makeGroupStackTooltipData(seriesRawData, stackData, categories) {
        return Object.keys(stackData).flatMap((groupId) => {
            const rawDataWithSameGroupId = seriesRawData.filter(({ stackGroup }) => stackGroup === groupId);
            const colors = rawDataWithSameGroupId.map(({ color }) => color);
            return this.makeStackTooltipData(rawDataWithSameGroupId, stackData[groupId], colors, categories);
        });
    }
    makeStackTooltipData(seriesRawData, stackData, colors, categories) {
        const tooltipData = [];
        stackData.forEach(({ values }, dataIndex) => {
            values.forEach((value, seriesIndex) => {
                tooltipData.push({
                    label: seriesRawData[seriesIndex].name,
                    color: colors[seriesIndex],
                    value,
                    category: categories.length ? categories[dataIndex] : '',
                });
            });
        });
        return tooltipData;
    }
    makeConnectorModel(pointsForConnector, connector, columnWidth) {
        if (!connector || !pointsForConnector.length) {
            return [];
        }
        const { color, lineWidth, dashSegments } = this.theme.connector;
        const connectorModels = [];
        const seriesDataCount = pointsForConnector.length;
        const seriesCount = pointsForConnector[0].length;
        for (let seriesIndex = 0; seriesIndex < seriesCount; seriesIndex += 1) {
            const points = [];
            for (let dataIndex = 0; dataIndex < seriesDataCount; dataIndex += 1) {
                points.push(pointsForConnector[dataIndex][seriesIndex]);
            }
            points.forEach((point, index) => {
                const { x, y } = point;
                if (index < points.length - 1) {
                    const { x: nextX, y: nextY } = points[index + 1];
                    connectorModels.push({
                        type: 'line',
                        x: this.isBar ? x : x + columnWidth,
                        y: this.isBar ? y + columnWidth : y,
                        x2: nextX,
                        y2: nextY,
                        dashSegments,
                        strokeStyle: color,
                        lineWidth,
                    });
                }
            });
        }
        return connectorModels;
    }
    getStackValueRatio(total, renderOptions) {
        const { stack: { type: stackType }, scaleType, min, max, offsetSize, } = renderOptions;
        if (stackType === 'percent') {
            return offsetSize / getDivisorForPercent(total, scaleType);
        }
        return this.getValueRatio(min, max, offsetSize);
    }
    getStackBarLength(values, seriesIndex, ratio, renderOptions) {
        const value = calibrateDrawingValue(values, seriesIndex, renderOptions);
        return (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.isNumber)(value) ? this.getBarLength(value, ratio) : null;
    }
    getStackColumnWidth(renderOptions, stackGroupCount) {
        const { tickDistance, diverging, defaultPadding } = renderOptions;
        const divisor = diverging ? 1 : stackGroupCount;
        const themeBarWidth = this.theme.barWidth;
        return themeBarWidth
            ? (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.calculateSizeWithPercentString)(tickDistance, themeBarWidth)
            : (tickDistance - defaultPadding * 2) / divisor;
    }
    getSeriesPosition(renderOptions, columnWidth, dataIndex, stackGroupIndex, stackGroupCount) {
        const { tickDistance, diverging } = renderOptions;
        const groupIndex = diverging ? 0 : stackGroupIndex;
        const groupCount = diverging ? 1 : stackGroupCount;
        const padding = (tickDistance - columnWidth * groupCount) / 2;
        return dataIndex * tickDistance + padding + columnWidth * groupIndex;
    }
    getStackStartPosition(values, currentIndex, ratio, renderOptions, isLBSideWithDiverging) {
        const { stack, diverging, seriesDirection } = renderOptions;
        let startPos;
        if (diverging) {
            startPos = isLBSideWithDiverging
                ? this.calcStartPosOnLeftBottomSide(values, currentIndex, renderOptions, ratio)
                : this.calcStartPosOnRightTopSide(values, currentIndex, renderOptions, ratio);
        }
        else if ((0,_store_stackSeriesData__WEBPACK_IMPORTED_MODULE_0__.isPercentStack)(stack)) {
            startPos = this.calcStartPositionWithPercent(values, currentIndex, ratio);
        }
        else if (seriesDirection === _boxSeries__WEBPACK_IMPORTED_MODULE_3__.SeriesDirection.POSITIVE) {
            startPos = this.calcStartPosOnRightTopSide(values, currentIndex, renderOptions, ratio);
        }
        else if (seriesDirection === _boxSeries__WEBPACK_IMPORTED_MODULE_3__.SeriesDirection.NEGATIVE) {
            startPos = this.calcStartPosOnLeftBottomSide(values, currentIndex, renderOptions, ratio);
        }
        else {
            startPos = this.calcStartPositionWithStack(values, currentIndex, renderOptions, ratio);
        }
        return startPos;
    }
    calcStartPosOnLeftBottomSide(values, currentIndex, renderOptions, ratio) {
        const { min, max, diverging } = renderOptions;
        const basePosition = diverging ? this.leftBasePosition : this.basePosition;
        const totalOfIndexBefore = (0,_helpers_boxSeries__WEBPACK_IMPORTED_MODULE_1__.sumValuesBeforeIndex)(values, currentIndex, false);
        const totalOfValues = (0,_helpers_boxSeries__WEBPACK_IMPORTED_MODULE_1__.sumValuesBeforeIndex)(values, currentIndex, true);
        const collideEdge = totalOfValues < min;
        const usingValue = this.isBar ? totalOfValues : totalOfIndexBefore;
        const result = max < 0 ? Math.min(usingValue - max, 0) : usingValue;
        let pos;
        if (this.isBar) {
            pos = collideEdge ? 0 : basePosition - Math.abs(result) * ratio;
        }
        else {
            pos = basePosition + Math.abs(result) * ratio;
        }
        return pos;
    }
    calcStartPosOnRightTopSide(values, currentIndex, renderOptions, ratio) {
        const { min, max, diverging } = renderOptions;
        const basePosition = diverging ? this.rightBasePosition : this.basePosition;
        const totalOfIndexBefore = (0,_helpers_boxSeries__WEBPACK_IMPORTED_MODULE_1__.sumValuesBeforeIndex)(values, currentIndex, false);
        const totalOfValues = (0,_helpers_boxSeries__WEBPACK_IMPORTED_MODULE_1__.sumValuesBeforeIndex)(values, currentIndex, true);
        const collideEdge = totalOfValues > max;
        const usingValue = this.isBar ? totalOfIndexBefore : totalOfValues;
        const result = min > 0 ? Math.max(usingValue - min, 0) : usingValue;
        const barLength = result * ratio;
        let pos;
        if (this.isBar) {
            pos = basePosition + barLength;
        }
        else {
            pos = collideEdge ? 0 : basePosition - barLength;
        }
        return pos;
    }
    calcStartPositionWithStack(values, currentIndex, renderOptions, ratio) {
        return values[currentIndex] < 0
            ? this.calcStartPosOnLeftBottomSide(values, currentIndex, renderOptions, ratio)
            : this.calcStartPosOnRightTopSide(values, currentIndex, renderOptions, ratio);
    }
    calcStartPositionWithPercent(values, currentIndex, ratio) {
        const basePosition = this.basePosition;
        const totalPrevValues = (0,_helpers_boxSeries__WEBPACK_IMPORTED_MODULE_1__.sumValuesBeforeIndex)(values, currentIndex, this.isBar ? values[currentIndex] < 0 : values[currentIndex] > 0);
        return this.isBar
            ? totalPrevValues * ratio + basePosition
            : basePosition - totalPrevValues * ratio;
    }
    getStackRectInfo(values, seriesIndex, ratio, renderOptions, isLBSideWithDiverging) {
        const barLength = this.getStackBarLength(values, seriesIndex, ratio, renderOptions);
        const dataPosition = this.getStackStartPosition(values, seriesIndex, ratio, renderOptions, isLBSideWithDiverging);
        return {
            barLength,
            dataPosition,
        };
    }
    getDataLabels(seriesModels, renderOptions) {
        return seriesModels.map((data) => this.makeDataLabel(data, renderOptions.centerYAxis));
    }
    getTotalDataLabels(seriesData, renderOptions) {
        const { stackData, stack } = seriesData;
        if ((0,_store_stackSeriesData__WEBPACK_IMPORTED_MODULE_0__.isPercentStack)(stack)) {
            return [];
        }
        return (0,_store_stackSeriesData__WEBPACK_IMPORTED_MODULE_0__.isGroupStack)(stackData)
            ? this.makeGroupTotalDataLabels(seriesData, renderOptions)
            : this.makeTotalDataLabels(stackData, renderOptions);
    }
    makeGroupTotalDataLabels(stackSeries, renderOptions) {
        let dataLabels = [];
        const stackGroupData = stackSeries.stackData;
        const stackGroupIds = Object.keys(stackGroupData);
        stackGroupIds.forEach((groupId, groupIndex) => {
            const totalDataLabels = this.makeTotalDataLabels(stackGroupData[groupId], renderOptions, stackGroupIds.length, groupIndex);
            dataLabels = [...dataLabels, ...totalDataLabels];
        });
        return dataLabels;
    }
    makeTotalDataLabels(stackData, renderOptions, stackGroupCount = 1, stackGroupIndex = 0) {
        const dataLabels = [];
        const { min, max, seriesDirection, diverging, centerYAxis } = renderOptions;
        const columnWidth = this.getStackColumnWidth(renderOptions, stackGroupCount);
        stackData.forEach((data, dataIndex) => {
            const { total } = data;
            const seriesPos = this.getSeriesPosition(renderOptions, columnWidth, dataIndex, stackGroupIndex, stackGroupCount);
            const ratio = this.getStackValueRatio(total, renderOptions);
            const directionKeys = getDirectionKeys(seriesDirection);
            directionKeys.forEach((key) => {
                const value = total[key];
                if (!value) {
                    return;
                }
                const barLength = this.makeBarLength(value, {
                    min,
                    max,
                    ratio,
                });
                const dataPosition = this.getStartPosition(barLength, value, renderOptions, diverging && (0,_boxSeries__WEBPACK_IMPORTED_MODULE_3__.isLeftBottomSide)(stackGroupIndex));
                const stackTotal = Object.assign({ type: 'stackTotal', value, name: `totalLabel-${key}`, theme: this.theme.dataLabels.stackTotal }, this.getAdjustedRect(seriesPos, dataPosition, barLength, columnWidth));
                dataLabels.push(this.makeTotalDataLabel(stackTotal, centerYAxis));
            });
        });
        return dataLabels;
    }
    makeTotalDataLabel(totalLabel, centerYAxis) {
        return Object.assign(Object.assign({}, totalLabel), { direction: this.getDataLabelDirection(totalLabel, centerYAxis), plot: {
                x: 0,
                y: 0,
                size: this.getOffsetSize(),
            } });
    }
    onMousemoveGroupedType(responders) {
        const rectModels = this.getRectModelsFromRectResponders(responders);
        this.eventBus.emit('renderHoveredSeries', {
            models: [...rectModels, ...this.getGroupedRect(responders, 'hover')],
            name: this.name,
            eventDetectType: this.eventDetectType,
        });
        this.activatedResponders = rectModels;
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/bubbleSeries.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/bubbleSeries.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getMaxRadius": () => (/* binding */ getMaxRadius),
/* harmony export */   "default": () => (/* binding */ BubbleSeries)
/* harmony export */ });
/* harmony import */ var _helpers_coordinate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/coordinate */ "./node_modules/@toast-ui/chart/dist/esm/helpers/coordinate.js");
/* harmony import */ var _helpers_color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_legend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/legend */ "./node_modules/@toast-ui/chart/dist/esm/helpers/legend.js");
/* harmony import */ var _helpers_responders__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/responders */ "./node_modules/@toast-ui/chart/dist/esm/helpers/responders.js");
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");








const MINIMUM_RADIUS = 0.5;
const MINIMUM_DETECTING_AREA_RADIUS = 1;
function getMaxRadius(bubbleData) {
    return bubbleData.reduce((acc, cur) => {
        const NonNullData = cur.data.filter((datum) => !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNull)(datum));
        return Math.max(acc, ...NonNullData.map(({ r }) => r));
    }, 0);
}
class BubbleSeries extends _component__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor() {
        super(...arguments);
        this.models = { series: [] };
        this.activatedResponders = [];
        this.maxRadius = -1;
        this.maxValue = -1;
        this.onMouseoutComponent = () => {
            this.eventBus.emit('seriesPointHovered', { models: [], name: this.name });
            this.eventBus.emit('renderHoveredSeries', {
                models: [],
                name: this.name,
            });
            this.eventBus.emit('needDraw');
        };
        this.selectSeries = ({ index, seriesIndex, state }) => {
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(index) || !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(seriesIndex)) {
                return;
            }
            const { name } = state.series.bubble.data[index];
            const model = this.responders.filter(({ name: dataName }) => dataName === name)[seriesIndex];
            if (!model) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.SELECT_SERIES_API_INDEX_ERROR);
            }
            const models = this.getResponderAppliedTheme([model], 'select');
            this.eventBus.emit('renderSelectedSeries', { models, name: this.name });
            this.eventBus.emit('needDraw');
        };
        this.showTooltip = (info) => {
            const { index, seriesIndex, state } = info;
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(index) || !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(seriesIndex)) {
                return;
            }
            const { name } = state.series.bubble.data[seriesIndex];
            const models = [this.responders.filter(({ name: dataName }) => dataName === name)[index]];
            if (!models.length) {
                return;
            }
            this.eventBus.emit('renderHoveredSeries', { models, name: this.name });
            this.activatedResponders = models;
            this.eventBus.emit('seriesPointHovered', { models: this.activatedResponders, name: this.name });
            this.eventBus.emit('needDraw');
        };
    }
    initialize() {
        this.type = 'series';
        this.name = 'bubble';
        this.eventBus.on('selectSeries', this.selectSeries);
        this.eventBus.on('showTooltip', this.showTooltip);
        this.eventBus.on('hideTooltip', this.onMouseoutComponent);
    }
    initUpdate(delta) {
        this.drawModels.series.forEach((model, index) => {
            model.radius = this.models.series[index].radius * delta;
        });
    }
    render(chartState) {
        const { layout, series, scale, axes, circleLegend, legend, options, theme } = chartState;
        const { plot } = layout;
        if (!series.bubble) {
            throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.noDataError(this.name));
        }
        const { xAxis, yAxis } = axes;
        const bubbleData = series.bubble.data;
        this.theme = theme.series.bubble;
        this.rect = plot;
        this.activeSeriesMap = (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_3__.getActiveSeriesMap)(legend);
        this.selectable = this.getSelectableOption(options);
        const xAxisTickSize = this.rect.width / xAxis.tickCount;
        const yAxisTickSize = this.rect.height / yAxis.tickCount;
        this.maxRadius = circleLegend.radius
            ? circleLegend.radius
            : Math.min(xAxisTickSize, yAxisTickSize);
        this.maxValue = getMaxRadius(bubbleData);
        const seriesModel = this.renderBubblePointsModel(bubbleData, scale);
        const tooltipModel = this.makeTooltipModel(bubbleData);
        this.models.series = seriesModel;
        if (!this.drawModels) {
            this.drawModels = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.deepCopy)(this.models);
        }
        this.responders = seriesModel.map((m, index) => (Object.assign(Object.assign({}, m), { type: 'circle', detectionSize: 0, radius: m.radius + MINIMUM_DETECTING_AREA_RADIUS, color: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_4__.getRGBA)(m.color, 0.85), data: tooltipModel[index], index })));
    }
    renderBubblePointsModel(seriesRawData, scale) {
        const xAxisLimit = scale.xAxis.limit;
        const yAxisLimit = scale.yAxis.limit;
        const { borderWidth, borderColor } = this.theme;
        return seriesRawData.flatMap(({ data, name, color: seriesColor }, seriesIndex) => {
            const circleModels = [];
            const active = this.activeSeriesMap[name];
            const color = (0,_helpers_color__WEBPACK_IMPORTED_MODULE_4__.getRGBA)(seriesColor, active ? 0.8 : 0.1);
            const nonNullData = data.filter((datum) => !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNull)(datum));
            nonNullData.forEach((datum) => {
                const rawXValue = (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_5__.getCoordinateXValue)(datum);
                const xValue = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isString)(rawXValue) ? Number(new Date(rawXValue)) : Number(rawXValue);
                const yValue = (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_5__.getCoordinateYValue)(datum);
                const xValueRatio = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_6__.getValueRatio)(xValue, xAxisLimit);
                const yValueRatio = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_6__.getValueRatio)(yValue, yAxisLimit);
                const x = xValueRatio * this.rect.width;
                const y = (1 - yValueRatio) * this.rect.height;
                const radius = Math.max(MINIMUM_RADIUS, (datum.r / this.maxValue) * this.maxRadius);
                circleModels.push({
                    x,
                    y,
                    type: 'circle',
                    radius,
                    color,
                    style: ['default'],
                    seriesIndex,
                    name,
                    borderWidth,
                    borderColor,
                });
            });
            return circleModels;
        });
    }
    makeTooltipModel(circleData) {
        return [...circleData].flatMap(({ data, name, color }) => {
            const tooltipData = [];
            const nonNullData = data.filter((datum) => !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNull)(datum));
            nonNullData.forEach((datum) => {
                const { r, label } = datum;
                tooltipData.push({
                    label: `${name}/${label}`,
                    color,
                    value: {
                        x: (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_5__.getCoordinateXValue)(datum),
                        y: (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_5__.getCoordinateYValue)(datum),
                        r,
                    },
                });
            });
            return tooltipData;
        });
    }
    getResponderAppliedTheme(responders, type) {
        return responders.map((responder) => (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.deepMergedCopy)(responder, this.theme[type]));
    }
    onMousemove({ responders, mousePosition }) {
        const closestResponder = (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_7__.getNearestResponder)(responders, mousePosition, this.rect);
        const responderWithTheme = this.getResponderAppliedTheme(closestResponder, 'hover');
        this.eventBus.emit('renderHoveredSeries', { models: responderWithTheme, name: this.name });
        this.activatedResponders = closestResponder;
        this.eventBus.emit('seriesPointHovered', { models: this.activatedResponders, name: this.name });
        this.eventBus.emit('needDraw');
    }
    onClick({ responders, mousePosition }) {
        if (this.selectable) {
            const closestResponder = (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_7__.getNearestResponder)(responders, mousePosition, this.rect);
            const responderWithTheme = this.getResponderAppliedTheme(closestResponder, 'select');
            this.eventBus.emit('renderSelectedSeries', {
                models: responderWithTheme,
                name: this.name,
            });
            this.eventBus.emit('needDraw');
        }
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/bulletSeries.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/bulletSeries.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BulletSeries)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_legend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/legend */ "./node_modules/@toast-ui/chart/dist/esm/helpers/legend.js");
/* harmony import */ var _helpers_color__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _helpers_dataLabels__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/helpers/dataLabels.js");
/* harmony import */ var _helpers_theme__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/theme */ "./node_modules/@toast-ui/chart/dist/esm/helpers/theme.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");
/* harmony import */ var _helpers_responders__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/responders */ "./node_modules/@toast-ui/chart/dist/esm/helpers/responders.js");









const DEFAULT_WIDTH_RATIO = 0.6;
const MARKER_LINE_DETECTION_SIZE = 5;
function getRectSize(vertical, barWidth, barLength) {
    return {
        width: vertical ? barWidth : barLength,
        height: vertical ? barLength : barWidth,
    };
}
function getStartX(seriesIndex, tickDistance, barWidth) {
    return seriesIndex * tickDistance + (tickDistance - barWidth) / 2;
}
function makeBulletResponderModel(models, tooltipData) {
    const { range, marker, bullet } = models;
    const { range: tooltipRange, marker: tooltipMarker, bullet: tooltipBullet } = tooltipData;
    return [
        ...range.map((m, index) => (Object.assign(Object.assign({}, m), { data: tooltipRange[index] }))),
        ...bullet.map((m, index) => (Object.assign(Object.assign({}, m), { data: tooltipBullet[index] }))),
        ...marker.map((m, index) => (Object.assign(Object.assign({}, m), { detectionSize: MARKER_LINE_DETECTION_SIZE, data: tooltipMarker[index] }))),
    ];
}
class BulletSeries extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = { range: [], bullet: [], marker: [] };
        this.activatedResponders = [];
        this.eventDetectType = 'point';
        this.vertical = false;
        this.onMouseoutComponent = () => {
            this.eventBus.emit('seriesPointHovered', { models: [], name: this.name });
            this.eventBus.emit('renderHoveredSeries', {
                models: [],
                name: this.name,
            });
            this.eventBus.emit('needDraw');
        };
        this.selectSeries = ({ seriesIndex, state }) => {
            var _a;
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(seriesIndex)) {
                return;
            }
            const { name } = (_a = state.series.bullet) === null || _a === void 0 ? void 0 : _a[seriesIndex];
            const model = this.filterBulletResponder(this.responders).filter(({ name: dataName }) => dataName === name);
            if (!model) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.SELECT_SERIES_API_INDEX_ERROR);
            }
            this.eventBus.emit('renderSelectedSeries', {
                models: this.getRespondersWithTheme(model, 'select'),
                name: this.name,
            });
            this.eventBus.emit('needDraw');
        };
        this.showTooltip = ({ seriesIndex, state }) => {
            var _a;
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(seriesIndex)) {
                return;
            }
            const { name } = (_a = state.series.bullet) === null || _a === void 0 ? void 0 : _a[seriesIndex];
            const models = this.filterBulletResponder(this.responders).filter(({ name: dataName }) => dataName === name);
            if (!models.length) {
                return;
            }
            this.onMousemove({ responders: models });
        };
    }
    initialize() {
        this.type = 'series';
        this.name = 'bullet';
        this.eventBus.on('selectSeries', this.selectSeries);
        this.eventBus.on('showTooltip', this.showTooltip);
        this.eventBus.on('hideTooltip', this.onMouseoutComponent);
    }
    initUpdate(delta) {
        if (!this.drawModels) {
            return;
        }
        const { clipRect } = this.drawModels;
        if (!clipRect) {
            return;
        }
        const offsetKey = this.vertical ? 'y' : 'x';
        const key = this.vertical ? 'height' : 'width';
        const current = clipRect[0];
        const target = this.models.clipRect[0];
        const offsetSize = current[key] + (target[key] - current[key]) * delta;
        current[key] = offsetSize;
        current[offsetKey] = Math.max(this.basePosition - (offsetSize * this.basePosition) / target[key], 0);
    }
    render(state) {
        var _a, _b;
        const { layout, axes, series, scale, legend, options, theme, categories } = state;
        if (!series.bullet) {
            throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.noDataError(this.name));
        }
        this.setEventDetectType(series, options);
        this.theme = theme.series.bullet;
        this.rect = layout.plot;
        this.activeSeriesMap = (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_3__.getActiveSeriesMap)(legend);
        this.selectable = this.getSelectableOption(options);
        this.vertical = !!((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b.vertical);
        const labelAxisOnYAxis = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_4__.isLabelAxisOnYAxis)({ series, options });
        const { labelAxisName, valueAxisName } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_4__.getAxisName)(labelAxisOnYAxis, series);
        const { valueSizeKey } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_4__.getSizeKey)(labelAxisOnYAxis);
        const { tickDistance } = axes[labelAxisName];
        const { zeroPosition } = axes[valueAxisName];
        const { min, max } = scale[valueAxisName].limit;
        const bulletData = series.bullet.data;
        this.basePosition = (zeroPosition !== null && zeroPosition !== void 0 ? zeroPosition : 0);
        const renderOptions = Object.assign({ ratio: this.rect[valueSizeKey] / (max - min), tickDistance,
            zeroPosition }, this.getBulletBarWidths(tickDistance));
        const rangeModels = this.renderRanges(bulletData, renderOptions);
        const bulletModels = this.renderBullet(bulletData, renderOptions);
        const markerModels = this.renderMarkers(bulletData, renderOptions);
        const clipRect = this.renderClipRectArea();
        this.models.clipRect = [clipRect];
        this.models.range = rangeModels;
        this.models.bullet = bulletModels;
        this.models.marker = markerModels;
        if (!this.drawModels) {
            this.drawModels = {
                clipRect: [this.makeInitialClipRectModel(clipRect)],
                range: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.deepCopyArray)(rangeModels),
                bullet: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.deepCopyArray)(bulletModels),
                marker: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.deepCopyArray)(markerModels),
            };
        }
        const models = {
            range: rangeModels,
            bullet: bulletModels,
            marker: markerModels,
        };
        const tooltipData = this.makeTooltipModel(models);
        this.tooltipRectMap = this.makeTooltipRectMap(models, tooltipData);
        this.responders = this.getBulletSeriesResponders(models, tooltipData, axes, categories);
        if ((0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_5__.getDataLabelsOptions)(options, this.name).visible) {
            this.renderDataLabels(this.getDataLabels([...rangeModels, ...bulletModels, ...markerModels], this.vertical, this.rect[valueSizeKey]));
        }
    }
    renderClipRectArea() {
        return {
            type: 'clipRectArea',
            x: 0,
            y: 0,
            width: this.rect.width,
            height: this.rect.height,
        };
    }
    makeInitialClipRectModel(clipRect) {
        const width = this.vertical ? clipRect.width : 0;
        const height = this.vertical ? 0 : clipRect.height;
        const x = this.vertical ? clipRect.x : 0;
        const y = this.vertical ? 0 : clipRect.y;
        return { type: 'clipRectArea', width, height, x, y };
    }
    getDataLabels(seriesModels, vertical, size) {
        const { dataLabels: dataLabelTheme } = this.theme;
        const bulletLabelTheme = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.omit)(dataLabelTheme, 'marker');
        const { useSeriesColor, color } = bulletLabelTheme;
        const { marker } = dataLabelTheme;
        return seriesModels
            .filter((m) => m.type === 'line' || m.modelType !== 'range')
            .map((m) => {
            var _a;
            if (m.type === 'line') {
                return Object.assign(Object.assign({}, m), { x: vertical ? (m.x + m.x2) / 2 : m.x, theme: Object.assign(Object.assign({}, marker), { color: marker.useSeriesColor ? m.strokeStyle : marker.color }) });
            }
            const isValueNegative = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(m.value) && ((_a = m) === null || _a === void 0 ? void 0 : _a.value) < 0;
            let direction = vertical ? 'top' : 'right';
            if (isValueNegative) {
                direction = vertical ? 'bottom' : 'left';
            }
            return Object.assign(Object.assign({}, m), { direction, plot: {
                    x: 0,
                    y: 0,
                    size,
                }, theme: Object.assign(Object.assign({}, bulletLabelTheme), { color: useSeriesColor ? m.color : color }) });
        });
    }
    setEventDetectType(series, options) {
        var _a, _b;
        if ((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b.eventDetectType) {
            this.eventDetectType = options.series.eventDetectType;
        }
    }
    getBulletSeriesResponders(models, tooltipData, axes, categories) {
        return this.eventDetectType === 'grouped'
            ? (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_6__.makeRectResponderModel)(this.rect, (this.vertical ? axes.xAxis : axes.yAxis), categories, this.vertical)
            : makeBulletResponderModel(models, tooltipData);
    }
    makeTooltipRectMap(models, tooltipData) {
        const result = {};
        Object.keys(models).forEach((seriesType) => {
            models[seriesType].forEach((m, index) => {
                const label = m.name;
                if (!result[label]) {
                    result[label] = [];
                }
                const tooltipModel = Object.assign(Object.assign({}, m), { data: tooltipData[seriesType][index] });
                result[label].push(tooltipModel);
            });
        });
        return result;
    }
    getBulletSeriesModelsFromRectResponders(responders) {
        var _a;
        if (!responders.length) {
            return [];
        }
        return _a = this.tooltipRectMap[responders[0].label], (_a !== null && _a !== void 0 ? _a : []);
    }
    getGroupedRect(responders, type) {
        const bulletSeriesModels = this.getBulletSeriesModelsFromRectResponders(responders);
        const { color, opacity } = this.theme[type].groupedRect;
        return bulletSeriesModels.length
            ? responders.map((m) => (Object.assign(Object.assign({}, m), { color: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_7__.getRGBA)(color, opacity) })))
            : [];
    }
    onMousemoveGroupedType(responders) {
        const bulletSeriesModels = this.getBulletSeriesModelsFromRectResponders(responders);
        this.eventBus.emit('renderHoveredSeries', {
            models: [
                ...this.getGroupedRect(responders, 'hover'),
                ...this.getRespondersWithTheme(bulletSeriesModels, 'hover'),
            ],
            name: this.name,
            eventDetectType: this.eventDetectType,
        });
        this.activatedResponders = bulletSeriesModels;
    }
    onMousemove({ responders }) {
        if (this.eventDetectType === 'grouped') {
            this.onMousemoveGroupedType(responders);
        }
        else {
            this.eventBus.emit('renderHoveredSeries', {
                models: this.getRespondersWithTheme(responders, 'hover'),
                name: this.name,
            });
            this.activatedResponders = responders.length ? [responders[responders.length - 1]] : [];
        }
        this.eventBus.emit('seriesPointHovered', {
            models: this.activatedResponders,
            name: this.name,
        });
        this.eventBus.emit('needDraw');
    }
    onClick({ responders }) {
        if (this.selectable) {
            const models = this.eventDetectType === 'grouped'
                ? [
                    ...this.getGroupedRect(responders, 'select'),
                    ...this.getRespondersWithTheme(this.getBulletSeriesModelsFromRectResponders(responders), 'select'),
                ]
                : this.getRespondersWithTheme(responders, 'select');
            this.eventBus.emit('renderSelectedSeries', {
                models,
                name: this.name,
                eventDetectType: this.eventDetectType,
            });
            this.eventBus.emit('needDraw');
        }
    }
    filterBulletResponder(responders) {
        return responders.filter((model) => { var _a; return ((_a = model) === null || _a === void 0 ? void 0 : _a.modelType) === 'bullet'; });
    }
    renderRanges(bulletData, { tickDistance, ratio, zeroPosition, rangeWidth }) {
        const rangeModels = [];
        bulletData.forEach(({ ranges, color, name }, seriesIndex) => {
            ((ranges !== null && ranges !== void 0 ? ranges : [])).forEach((range, rangeIndex) => {
                if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(range)) {
                    const [start, end] = range;
                    const barLength = (end - start) * ratio;
                    const rangeStartX = getStartX(seriesIndex, tickDistance, rangeWidth);
                    rangeModels.push(Object.assign(Object.assign({ type: 'rect', name, color: this.getRangeColor((0,_helpers_color__WEBPACK_IMPORTED_MODULE_7__.getRGBA)(color, this.getSeriesOpacity(name)), rangeIndex, name), x: this.vertical ? rangeStartX : start * ratio + zeroPosition, y: this.vertical ? zeroPosition - end * ratio : rangeStartX }, getRectSize(this.vertical, rangeWidth, barLength)), { modelType: 'range', seriesColor: color, tooltipColor: this.getRangeColor(color, rangeIndex, name, true), value: range }));
                }
            });
        });
        return rangeModels;
    }
    renderBullet(bulletData, { tickDistance, ratio, zeroPosition, bulletWidth }) {
        const { borderColor, borderWidth: thickness } = this.theme;
        return bulletData.reduce((acc, { data, color, name }, seriesIndex) => {
            if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(data)) {
                return [...acc];
            }
            const bulletLength = Math.max(Math.abs(data * ratio), 2);
            const bulletStartX = getStartX(seriesIndex, tickDistance, bulletWidth);
            const x = this.vertical ? bulletStartX : zeroPosition - (data < 0 ? bulletLength : 0);
            const y = this.vertical
                ? zeroPosition - bulletLength + (data < 0 ? bulletLength : 0)
                : bulletStartX;
            const bullet = Object.assign({ type: 'rect', name, color: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_7__.getRGBA)(color, this.getSeriesOpacity(name)), x,
                y,
                thickness,
                borderColor, modelType: 'bullet', seriesColor: color, tooltipColor: color, value: data }, getRectSize(this.vertical, bulletWidth, bulletLength));
            return [...acc, bullet];
        }, []);
    }
    renderMarkers(bulletData, { tickDistance, ratio, zeroPosition, markerWidth }) {
        const { markerLineWidth } = this.theme;
        const markerModels = [];
        bulletData.forEach(({ markers, color, name }, seriesIndex) => {
            const markerStartX = getStartX(seriesIndex, tickDistance, markerWidth);
            ((markers !== null && markers !== void 0 ? markers : [])).forEach((marker) => {
                if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(marker)) {
                    const dataPosition = marker * ratio;
                    const x = this.vertical ? markerStartX : dataPosition + zeroPosition;
                    const y = this.vertical ? zeroPosition - dataPosition : markerStartX;
                    markerModels.push({
                        type: 'line',
                        name,
                        x,
                        y,
                        x2: this.vertical ? x + markerWidth : x,
                        y2: this.vertical ? y : y + markerWidth,
                        strokeStyle: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_7__.getRGBA)(color, this.getSeriesOpacity(name)),
                        lineWidth: markerLineWidth,
                        seriesColor: color,
                        tooltipColor: color,
                        value: marker,
                    });
                }
            });
        });
        return markerModels;
    }
    makeTooltipModel(seriesModels) {
        const { range, bullet, marker } = seriesModels;
        return {
            range: this.makeTooltipData(range, 'Range'),
            bullet: this.makeTooltipData(bullet, 'Actual'),
            marker: this.makeTooltipData(marker, 'Marker'),
        };
    }
    makeTooltipData(data, title) {
        return data.map((m) => {
            const { name, seriesColor, tooltipColor, value } = m;
            return {
                label: name,
                color: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_7__.getRGBA)(seriesColor, 1),
                value: [{ title, value, color: tooltipColor }],
                templateType: 'bullet',
            };
        });
    }
    getBulletBarWidths(tickDistance) {
        const { barWidth: barThemeWidth, barWidthRatios } = this.theme;
        const { rangeRatio, bulletRatio, markerRatio } = barWidthRatios;
        const barWidth = barThemeWidth
            ? (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.calculateSizeWithPercentString)(tickDistance, barThemeWidth)
            : tickDistance * DEFAULT_WIDTH_RATIO;
        return {
            rangeWidth: barWidth * rangeRatio,
            bulletWidth: barWidth * bulletRatio,
            markerWidth: barWidth * markerRatio,
        };
    }
    getRangeColor(seriesColor, rangeIndex, seriesName, ignoreRestSeriesOpacity = false) {
        const { rangeColors } = this.theme;
        const hasThemeRangeColor = Array.isArray(rangeColors) && rangeColors[rangeIndex];
        const color = hasThemeRangeColor ? rangeColors[rangeIndex] : seriesColor;
        const opacity = hasThemeRangeColor
            ? (0,_helpers_color__WEBPACK_IMPORTED_MODULE_7__.getAlpha)(rangeColors[rangeIndex])
            : _helpers_theme__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_BULLET_RANGE_OPACITY[rangeIndex];
        return (0,_helpers_color__WEBPACK_IMPORTED_MODULE_7__.getRGBA)(color, opacity * this.getSeriesOpacity(seriesName, ignoreRestSeriesOpacity));
    }
    getSeriesOpacity(seriesName, ignoreRestSeriesOpacity = false) {
        const { select, areaOpacity } = this.theme;
        const active = this.activeSeriesMap[seriesName];
        const selected = Object.values(this.activeSeriesMap).some((elem) => !elem);
        const restOpacity = ignoreRestSeriesOpacity ? areaOpacity : select.restSeries.areaOpacity;
        const selectedOpacity = active ? select.areaOpacity : restOpacity;
        return selected ? selectedOpacity : areaOpacity;
    }
    getRespondersWithTheme(responders, type) {
        const { color, borderColor, borderWidth: thickness } = this.theme[type];
        return this.filterBulletResponder(responders).map((model) => {
            return Object.assign(Object.assign({}, model), { color: (color !== null && color !== void 0 ? color : model.tooltipColor), thickness,
                borderColor, style: [
                    Object.assign({}, (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.pick)(this.theme[type], 'shadowBlur', 'shadowColor', 'shadowOffsetX', 'shadowOffsetY')),
                ] });
        });
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/circleLegend.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/circleLegend.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CircleLegend)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _bubbleSeries__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bubbleSeries */ "./node_modules/@toast-ui/chart/dist/esm/component/bubbleSeries.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");



class CircleLegend extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = { circleLegend: [] };
    }
    initialize() {
        this.type = 'circleLegend';
    }
    render({ layout, series, circleLegend }) {
        if (!series.bubble) {
            throw new Error(_message__WEBPACK_IMPORTED_MODULE_1__.message.CIRCLE_LEGEND_RENDER_ERROR);
        }
        this.isShow = circleLegend.visible;
        if (!this.isShow) {
            return;
        }
        const bubbleData = series.bubble.data;
        this.rect = layout.circleLegend;
        this.renderCircleLegend(bubbleData, circleLegend);
    }
    renderCircleLegend(bubbleData, circleLegend) {
        const value = (0,_bubbleSeries__WEBPACK_IMPORTED_MODULE_2__.getMaxRadius)(bubbleData);
        const { radius } = circleLegend;
        this.models.circleLegend = [
            {
                type: 'circleLegend',
                radius,
                value,
                x: radius,
                y: this.rect.height - radius,
            },
        ];
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/component.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/component.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Component)
/* harmony export */ });
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _helpers_arrayUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/arrayUtil */ "./node_modules/@toast-ui/chart/dist/esm/helpers/arrayUtil.js");



class Component {
    constructor({ store, eventBus }) {
        this.name = 'Component';
        this.type = 'component';
        this.rect = {
            x: 0,
            y: 0,
            height: 0,
            width: 0,
        };
        this.isShow = true;
        this.store = store;
        this.eventBus = eventBus;
    }
    update(delta) {
        if (!this.drawModels) {
            return;
        }
        if (Array.isArray(this.models)) {
            this.updateModels(this.drawModels, this.models, delta);
        }
        else {
            Object.keys(this.models).forEach((type) => {
                const currentModels = this.drawModels[type];
                const targetModels = this.models[type];
                this.updateModels(currentModels, targetModels, delta);
            });
        }
    }
    initUpdate(delta) {
        this.update(delta);
    }
    updateModels(currentModels, targetModels, delta) {
        currentModels.forEach((current, index) => {
            const target = targetModels[index];
            Object.keys(current).forEach((key) => {
                var _a;
                if (!current || !target) {
                    return;
                }
                if (key[0] !== '_') {
                    if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(current[key])) {
                        current[key] = current[key] + (target[key] - current[key]) * delta;
                    }
                    else if (key === 'points') {
                        const matchedModel = this.getCurrentModelToMatchTargetModel(current[key], current[key], target[key]);
                        const newPoints = matchedModel.map((curPoint, idx) => {
                            const next = target[key][idx];
                            if (curPoint && next) {
                                const { x, y } = curPoint;
                                const { x: nextX, y: nextY } = next;
                                return Object.assign(Object.assign({}, next), { x: x + (nextX - x) * delta, y: y + (nextY - y) * delta });
                            }
                            return next;
                        });
                        if ((_a = this.store.state.options.series) === null || _a === void 0 ? void 0 : _a.spline) {
                            (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_1__.setSplineControlPoint)(newPoints);
                        }
                        current[key] = newPoints;
                    }
                    else {
                        current[key] = target[key];
                    }
                }
            });
        });
    }
    sync() {
        if (!this.drawModels) {
            return;
        }
        if (Array.isArray(this.models)) {
            this.syncModels(this.drawModels, this.models);
        }
        else if (!Object.keys(this.models).length) {
            this.drawModels = this.models;
        }
        else {
            Object.keys(this.models).forEach((type) => {
                const currentModels = this.drawModels[type];
                const targetModels = this.models[type];
                this.syncModels(currentModels, targetModels, type);
            });
        }
    }
    getCurrentModelToMatchTargetModel(models, currentModels, targetModels) {
        var _a;
        if (!models || !currentModels) {
            return [...targetModels];
        }
        if ((_a = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.getFirstValidValue)(targetModels)) === null || _a === void 0 ? void 0 : _a.name) {
            const modelNames = [...new Set(models.map(({ name }) => name))];
            const targetNames = [...new Set(targetModels.map(({ name }) => name))];
            const same = (0,_helpers_arrayUtil__WEBPACK_IMPORTED_MODULE_2__.isSameArray)(modelNames, targetNames);
            if (!same) {
                return this.getCurrentModelWithDifferentModel(models, currentModels, targetModels, modelNames, targetNames);
            }
        }
        const currentLength = currentModels.length;
        const targetLength = targetModels.length;
        if (currentLength < targetLength) {
            return [...currentModels, ...targetModels.slice(currentLength, targetLength)];
        }
        if (currentLength > targetLength) {
            return currentModels.slice(0, targetLength);
        }
        return models;
    }
    getCurrentModelWithDifferentModel(models, currentModels, targetModels, modelNames, targetNames) {
        const currentLength = currentModels.length;
        const targetLength = targetModels.length;
        if (currentLength > targetLength) {
            const newModels = models.filter(({ name }) => (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.includes)(targetNames, name));
            return newModels.length !== targetModels.length ? targetModels : newModels;
        }
        if (currentLength < targetLength) {
            const notIncludedModels = targetModels.reduce((acc, cur, idx) => {
                const notIncluded = !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.includes)(modelNames, cur.name);
                return notIncluded
                    ? {
                        models: [...acc.models, cur],
                        modelIdx: [...acc.modelIdx, idx],
                    }
                    : acc;
            }, { models: [], modelIdx: [] });
            if (models.length + notIncludedModels.models.length === targetLength) {
                const newModels = [...models];
                notIncludedModels.models.forEach((model, idx) => {
                    newModels.splice(notIncludedModels.modelIdx[idx], 0, model);
                });
                return newModels;
            }
            return targetModels;
        }
        return models;
    }
    syncModels(currentModels, targetModels, type) {
        const drawModels = type ? this.drawModels[type] : this.drawModels;
        const model = this.getCurrentModelToMatchTargetModel(drawModels, currentModels, targetModels);
        if (type) {
            this.drawModels[type] = model;
        }
        else {
            this.drawModels = model;
        }
    }
    getSelectableOption(options) {
        var _a, _b, _c;
        return _c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b.selectable, (_c !== null && _c !== void 0 ? _c : false);
    }
    renderDataLabels(data, name) {
        setTimeout(() => {
            this.eventBus.emit('renderDataLabels', { data, name: (name !== null && name !== void 0 ? name : this.name) });
        }, 0);
    }
    draw(painter) {
        const models = this.drawModels ? this.drawModels : this.models;
        if (Array.isArray(models)) {
            painter.paintForEach(models);
        }
        else if (models) {
            Object.keys(models).forEach((item) => {
                painter.paintForEach(models[item]);
            });
        }
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/componentManager.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/componentManager.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ComponentManager)
/* harmony export */ });
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");

class ComponentManager {
    constructor({ store, eventBus }) {
        this.components = [];
        this.store = store;
        this.eventBus = eventBus;
    }
    add(ComponentCtor, initialParam) {
        const component = new ComponentCtor({
            store: this.store,
            eventBus: this.eventBus,
        });
        if (component.initialize) {
            component.initialize(initialParam);
        }
        let proc = (...args) => {
            component.render(args[0], args[1]); // rest쓰면 에러남
            component.sync();
            this.eventBus.emit('needLoop');
        };
        this.store.observe((...args) => {
            proc(...args);
        });
        proc = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.debounce)(proc);
        this.components.push(component);
    }
    remove(ComponentCtor) {
        this.components = this.components.filter((component) => !(component instanceof ComponentCtor));
    }
    clear() {
        this.components = [];
        this.eventBus.emit('needDraw');
    }
    invoke(method, params) {
        this.components.forEach((component) => {
            const fn = component[method];
            if (fn) {
                fn.call(component, params);
            }
        });
    }
    forEach(iteratee) {
        this.components.forEach(iteratee);
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/dataLabels.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/dataLabels.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DataLabels)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_coordinate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/coordinate */ "./node_modules/@toast-ui/chart/dist/esm/helpers/coordinate.js");
/* harmony import */ var _helpers_dataLabels__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/helpers/dataLabels.js");
/* harmony import */ var _store_stackSeriesData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/stackSeriesData */ "./node_modules/@toast-ui/chart/dist/esm/store/stackSeriesData.js");





function getLabelInfo(model, labelOptions, rect, name) {
    var _a;
    const { type } = model;
    const dataLabel = [];
    if (type === 'point') {
        dataLabel.push((0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_0__.makePointLabelInfo)(model, labelOptions, rect));
    }
    else if (type === 'sector') {
        if (name === 'radialBar') {
            dataLabel.push((0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_0__.makeSectorBarLabelInfo)(model, labelOptions));
        }
        else {
            dataLabel.push((0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_0__.makeSectorLabelInfo)(model, labelOptions));
            if ((_a = labelOptions.pieSeriesName) === null || _a === void 0 ? void 0 : _a.visible) {
                const seriesNameLabel = (0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_0__.makePieSeriesNameLabelInfo)(model, labelOptions);
                dataLabel.push(seriesNameLabel);
            }
        }
    }
    else if (type === 'line') {
        dataLabel.push((0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_0__.makeLineLabelInfo)(model, labelOptions));
    }
    else {
        dataLabel.push((0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_0__.makeRectLabelInfo)(model, labelOptions));
    }
    return dataLabel;
}
class DataLabels extends _component__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor() {
        super(...arguments);
        this.dataLabelsMap = {};
        this.renderSeriesDataLabels = (seriesDataLabel) => {
            this.appendDataLabels(seriesDataLabel);
            this.models = this.renderLabelModel();
            if (!this.drawModels) {
                this.drawModels = this.getDrawModelsAppliedOpacity(0);
            }
            else {
                this.sync();
            }
        };
    }
    initialize() {
        this.type = 'dataLabels';
        this.name = 'dataLabels';
        this.eventBus.on('renderDataLabels', this.renderSeriesDataLabels);
    }
    initUpdate(delta) {
        if (!this.drawModels) {
            return;
        }
        this.drawModels = this.getDrawModelsAppliedOpacity(delta);
    }
    render({ layout, options, series, nestedPieSeries }) {
        this.rect = layout.plot;
        this.options = options;
        this.isShow = this.visibleDataLabels(series, nestedPieSeries);
    }
    visibleDataLabels(series, nestedPieSeries) {
        var _a, _b;
        const visibleCommonSeriesDataLabels = !!((_b = (_a = this.options.series) === null || _a === void 0 ? void 0 : _a.dataLabels) === null || _b === void 0 ? void 0 : _b.visible);
        const visibleComboSeriesDataLabels = Object.keys(series).some((seriesName) => { var _a, _b, _c; return !!((_c = (_b = (_a = this.options.series) === null || _a === void 0 ? void 0 : _a[seriesName]) === null || _b === void 0 ? void 0 : _b.dataLabels) === null || _c === void 0 ? void 0 : _c.visible); });
        const visibleNestedPieSeriesDataLabels = !!(nestedPieSeries &&
            Object.keys(nestedPieSeries).some((alias) => {
                var _a, _b, _c;
                return !!((_c = (_b = (_a = this.options.series) === null || _a === void 0 ? void 0 : _a[alias]) === null || _b === void 0 ? void 0 : _b.dataLabels) === null || _c === void 0 ? void 0 : _c.visible);
            }));
        return (visibleCommonSeriesDataLabels ||
            visibleComboSeriesDataLabels ||
            visibleNestedPieSeriesDataLabels);
    }
    appendDataLabels({ name, data }) {
        const dataLabelOptions = (0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_0__.getDataLabelsOptions)(this.options, name);
        const withStack = !!(0,_store_stackSeriesData__WEBPACK_IMPORTED_MODULE_2__.pickStackOption)(this.options);
        const labels = [];
        data.forEach((model) => {
            var _a;
            const { type, value } = model;
            const labelOptions = (0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_0__.getDefaultDataLabelsOptions)(dataLabelOptions, type, withStack);
            const disableStackTotal = type === 'stackTotal' && !((_a = labelOptions.stackTotal) === null || _a === void 0 ? void 0 : _a.visible);
            if (disableStackTotal || (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(value)) {
                return;
            }
            labels.splice(labels.length, 0, ...getLabelInfo(model, labelOptions, this.rect, name));
        });
        this.dataLabelsMap[name] = { data: labels, options: dataLabelOptions };
    }
    getDrawModelsAppliedOpacity(opacity) {
        return Object.keys(this.models).reduce((acc, key) => (Object.assign(Object.assign({}, acc), { [key]: this.models[key].map((m) => (Object.assign(Object.assign({}, m), { opacity }))) })), { series: [], total: [] });
    }
    renderLabelModel() {
        return Object.keys(this.dataLabelsMap)
            .map((seriesName) => {
            const { data } = this.dataLabelsMap[seriesName];
            return this.makeLabelModel(data);
        })
            .reduce((acc, cur) => ({
            series: [...acc.series, ...cur.series],
            total: [...acc.total, ...cur.total],
        }), { series: [], total: [] });
    }
    makeLabelModel(dataLabels) {
        return dataLabels.reduce((acc, dataLabel) => {
            var _a;
            const { type, x, y, text, textAlign, textBaseline, name, callout, theme, radian, } = dataLabel;
            if (!(0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_4__.isModelExistingInRect)(this.rect, { x, y })) {
                return acc;
            }
            const modelName = type === 'stackTotal' ? 'total' : 'series';
            return Object.assign(Object.assign({}, acc), { [modelName]: [
                    ...(_a = acc[modelName], (_a !== null && _a !== void 0 ? _a : [])),
                    {
                        type: 'dataLabel',
                        dataLabelType: type,
                        text,
                        x,
                        y,
                        textAlign,
                        textBaseline,
                        opacity: 1,
                        name,
                        callout,
                        theme,
                        radian,
                    },
                ] });
        }, { series: [], total: [] });
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BUTTON_RECT_SIZE": () => (/* binding */ BUTTON_RECT_SIZE),
/* harmony export */   "default": () => (/* binding */ ExportMenu)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _store_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/layout */ "./node_modules/@toast-ui/chart/dist/esm/store/layout.js");
/* harmony import */ var _helpers_downloader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/downloader */ "./node_modules/@toast-ui/chart/dist/esm/helpers/downloader.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");





const EXPORT_MENU_WIDTH = 140;
const exportExtensions = {
    IMAGES: ['png', 'jpeg'],
    SPREAD_SHEETS: ['xls', 'csv'],
};
const BUTTON_RECT_SIZE = 24;
class ExportMenu extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = { exportMenuButton: [] };
        this.opened = false;
        this.chartWidth = 0;
        this.toggleExportMenu = () => {
            this.opened = !this.opened;
            this.models.exportMenuButton[0].opened = this.opened;
            this.eventBus.emit('needDraw');
            if (this.opened) {
                this.applyPanelWrapperStyle();
                this.chartEl.appendChild(this.exportMenuEl);
            }
            else {
                this.chartEl.removeChild(this.exportMenuEl);
            }
        };
        this.getCanvasExportBtnRemoved = () => {
            const canvas = this.chartEl.getElementsByTagName('canvas')[0];
            const ctx = canvas.getContext('2d');
            const { x, y, height: h, width: w } = this.rect;
            ctx.clearRect(x, y, w, h);
            ctx.fillStyle = this.chartBackgroundColor;
            ctx.fillRect(x, y, w, h);
            return canvas;
        };
        this.onClickExportButton = (ev) => {
            const { id } = ev.target;
            const isImageExtension = exportExtensions.IMAGES.includes(id);
            const isSpreadSheetExtension = exportExtensions.SPREAD_SHEETS.includes(id);
            if (isImageExtension) {
                const canvas = this.getCanvasExportBtnRemoved();
                (0,_helpers_downloader__WEBPACK_IMPORTED_MODULE_1__.execDownload)(this.fileName, id, canvas.toDataURL(`image/${id}`, 1));
            }
            else if (isSpreadSheetExtension) {
                (0,_helpers_downloader__WEBPACK_IMPORTED_MODULE_1__.downloadSpreadSheet)(this.fileName, id, this.data);
            }
            if (isImageExtension || isSpreadSheetExtension) {
                this.toggleExportMenu();
            }
        };
    }
    applyExportButtonPanelStyle() {
        const exportMenuTitle = this.exportMenuEl.querySelector('.toastui-chart-export-menu-title');
        const menuBtnWrapper = this.exportMenuEl.querySelector('.toastui-chart-export-menu-btn-wrapper');
        exportMenuTitle.setAttribute('style', this.makePanelStyle('header'));
        menuBtnWrapper.setAttribute('style', this.makePanelStyle('body'));
    }
    makeExportMenuButton() {
        const el = document.createElement('div');
        el.onclick = this.onClickExportButton;
        el.innerHTML = `
        <div class="toastui-chart-export-menu">
          <p class="toastui-chart-export-menu-title">Export to</p>
          <div class="toastui-chart-export-menu-btn-wrapper">
            <button class="toastui-chart-export-menu-btn" id="xls">xls</button>
            <button class="toastui-chart-export-menu-btn" id="csv">csv</button>
            <button class="toastui-chart-export-menu-btn" id="png">png</button>
            <button class="toastui-chart-export-menu-btn" id="jpeg">jpeg</button>
          </div>
        </div>
      `;
        return el;
    }
    initialize({ chartEl }) {
        this.chartEl = chartEl;
        this.type = 'exportMenu';
        this.name = 'exportMenu';
        this.exportMenuEl = this.makeExportMenuButton();
    }
    onClick({ responders }) {
        if (responders.length) {
            this.toggleExportMenu();
        }
    }
    getFileName(title) {
        var _a, _b;
        return (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.isString)(title) ? title : (_b = (_a = title) === null || _a === void 0 ? void 0 : _a.text, (_b !== null && _b !== void 0 ? _b : 'toast-ui-chart'));
    }
    render({ options, layout, chart, series, rawCategories, theme }) {
        var _a, _b;
        this.isShow = (0,_store_layout__WEBPACK_IMPORTED_MODULE_3__.isExportMenuVisible)(options);
        this.chartWidth = chart.width;
        if (!this.isShow) {
            return;
        }
        this.chartBackgroundColor = theme.chart.backgroundColor;
        this.theme = theme.exportMenu;
        this.data = { series, categories: rawCategories };
        this.fileName = this.getFileName(((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.exportMenu) === null || _b === void 0 ? void 0 : _b.filename) || chart.title);
        this.applyExportButtonPanelStyle();
        this.rect = layout.exportMenu;
        this.models.exportMenuButton = [
            {
                type: 'exportMenuButton',
                x: 0,
                y: 0,
                opened: this.opened,
                theme: this.theme.button,
            },
        ];
        this.responders = [
            {
                type: 'rect',
                width: BUTTON_RECT_SIZE,
                height: BUTTON_RECT_SIZE,
                x: 0,
                y: 0,
            },
        ];
    }
    applyPanelWrapperStyle() {
        const exportMenu = this.exportMenuEl.querySelector('.toastui-chart-export-menu');
        const x = this.chartWidth - EXPORT_MENU_WIDTH - _store_layout__WEBPACK_IMPORTED_MODULE_3__.padding.X;
        const y = _store_layout__WEBPACK_IMPORTED_MODULE_3__.padding.Y + BUTTON_RECT_SIZE + 5;
        const { borderRadius, borderWidth, borderColor } = this.theme.panel;
        const style = `
      transform: ${(0,_helpers_style__WEBPACK_IMPORTED_MODULE_4__.getTranslateString)(x, y)};
      border: ${borderWidth}px solid ${borderColor};
      border-radius: ${borderRadius}px;`;
        exportMenu.setAttribute('style', style);
    }
    makePanelStyle(type) {
        const sectionTheme = this.theme.panel[type];
        const direction = type === 'header' ? 'top' : 'bottom';
        const { borderRadius, borderWidth } = this.theme.panel;
        const borderRadiusPx = `${borderRadius - borderWidth}px`;
        return [
            `${(0,_helpers_style__WEBPACK_IMPORTED_MODULE_4__.getFontStyleString)(sectionTheme)}`,
            `border-${direction}-left-radius: ${borderRadiusPx};`,
            `border-${direction}-right-radius: ${borderRadiusPx};`,
            `background-color: ${sectionTheme.backgroundColor};`,
        ].join('');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/gaugeSeries.js":
/*!************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/gaugeSeries.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GaugeSeries)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");
/* harmony import */ var _helpers_sector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/sector */ "./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js");
/* harmony import */ var _helpers_legend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/legend */ "./node_modules/@toast-ui/chart/dist/esm/helpers/legend.js");
/* harmony import */ var _helpers_color__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");
/* harmony import */ var _helpers_pieSeries__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../helpers/pieSeries */ "./node_modules/@toast-ui/chart/dist/esm/helpers/pieSeries.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _radialPlot__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./radialPlot */ "./node_modules/@toast-ui/chart/dist/esm/component/radialPlot.js");
/* harmony import */ var _helpers_dataLabels__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/helpers/dataLabels.js");
/* harmony import */ var _store_gaugeAxes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../store/gaugeAxes */ "./node_modules/@toast-ui/chart/dist/esm/store/gaugeAxes.js");











const DETECTION_SIZE_MARGIN = 3;
class GaugeSeries extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = { clockHand: [], solid: [], backgroundSolid: [] };
        this.activatedResponders = [];
        this.onMouseoutComponent = () => {
            this.eventBus.emit('seriesPointHovered', { models: [], name: this.name });
            this.eventBus.emit('renderHoveredSeries', { models: [], name: this.name });
            this.eventBus.emit('needDraw');
        };
        this.selectSeries = (info) => {
            var _a;
            const { index } = info;
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(index)) {
                return;
            }
            const model = (_a = this.tooltipMap.clockHand[index], (_a !== null && _a !== void 0 ? _a : this.tooltipMap.solid[index]));
            if (!model) {
                return;
            }
            const models = this.getResponderModelsWithTheme(this.getResponderModels([model]), 'select');
            if (!models.length) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.SELECT_SERIES_API_INDEX_ERROR);
            }
            this.eventBus.emit('renderSelectedSeries', {
                models: models,
                name: this.name,
            });
            this.eventBus.emit('needDraw');
        };
        this.showTooltip = (info) => {
            const { index } = info;
            const models = this.getResponderModelsWithTheme([this.tooltipMap.clockHand[index]], 'hover');
            if (!models.length) {
                return;
            }
            this.eventBus.emit('renderHoveredSeries', {
                models,
                name: this.name,
            });
            this.activatedResponders = models;
            this.eventBus.emit('seriesPointHovered', { models: this.activatedResponders, name: this.name });
            this.eventBus.emit('needDraw');
        };
    }
    initialize() {
        this.type = 'series';
        this.name = 'gauge';
        this.eventBus.on('selectSeries', this.selectSeries);
        this.eventBus.on('showTooltip', this.showTooltip);
        this.eventBus.on('hideTooltip', this.onMouseoutComponent);
    }
    initUpdate(delta) {
        if (!this.drawModels) {
            return;
        }
        const { angle: { start: startAngle, total: totalAngle }, clockwise, } = this.circularAxis;
        const currentDegree = clockwise
            ? startAngle + totalAngle * delta
            : startAngle - totalAngle * delta;
        this.models.clockHand.forEach((model, index) => {
            const { x, y, animationDegree, handSize } = model;
            if ((clockwise && animationDegree < currentDegree) ||
                (!clockwise && animationDegree > currentDegree)) {
                this.syncEndAngle(index);
                return;
            }
            const { x: x2, y: y2 } = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.getRadialPosition)(x, y, handSize, (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.calculateDegreeToRadian)((0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.calculateValidAngle)(currentDegree)));
            this.drawModels.clockHand[index].x2 = x2;
            this.drawModels.clockHand[index].y2 = y2;
        });
        this.models.solid.forEach(() => {
            const index = this.models.solid.findIndex(({ animationDegree }) => {
                const { start, end } = animationDegree;
                return (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.withinRadian)(clockwise, start, end, currentDegree);
            });
            this.syncSectorEndAngle(index < 0 ? this.models.solid.length : index);
            if (index !== -1) {
                this.drawModels.solid[index].degree.end = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.calculateValidAngle)(currentDegree);
            }
        });
    }
    updateModels(current, target, delta) {
        const { angle: { total }, } = this.circularAxis;
        Object.keys(current).forEach((key) => {
            if (!current || !target) {
                return;
            }
            if (key[0] !== '_') {
                if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(current[key])) {
                    current[key] = current[key] + (target[key] - current[key]) * delta;
                }
                else if (key === 'degree') {
                    if (total < _helpers_sector__WEBPACK_IMPORTED_MODULE_3__.DEGREE_360 && current.degree.end < _helpers_sector__WEBPACK_IMPORTED_MODULE_3__.DEGREE_90) {
                        current[key].end =
                            _helpers_sector__WEBPACK_IMPORTED_MODULE_3__.DEGREE_360 +
                                current[key].end -
                                (_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.DEGREE_360 - target[key].end + current[key].end) * delta;
                    }
                    else {
                        current[key].end = current[key].end + (target[key].end - current[key].end) * delta;
                    }
                }
                else {
                    current[key] = target[key];
                }
            }
        });
    }
    update(delta) {
        this.models.clockHand.forEach((model, index) => {
            this.updateModels(this.drawModels.clockHand[index], model, delta);
        });
        this.models.solid.forEach((model, index) => {
            this.updateModels(this.drawModels.solid[index], model, delta);
        });
    }
    syncEndAngle(index) {
        const model = this.models.clockHand[index];
        const drawModel = this.drawModels.clockHand[index];
        if (model.x2 !== drawModel.x2 || model.y2 !== drawModel.y2) {
            drawModel.x2 = model.x2;
            drawModel.y2 = model.y2;
        }
    }
    syncSectorEndAngle(index) {
        if (!index) {
            return;
        }
        for (let i = 0; i < index; i += 1) {
            const prevTargetEndDegree = this.models.solid[i].degree.end;
            if (this.drawModels.solid[i].degree.end !== prevTargetEndDegree) {
                this.drawModels.solid[i].degree.end = prevTargetEndDegree;
            }
        }
    }
    render(chartState) {
        var _a, _b;
        const { layout, series, legend, options, theme, scale, radialAxes } = chartState;
        const categories = (_a = chartState.categories, (_a !== null && _a !== void 0 ? _a : []));
        if (!series.gauge) {
            throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.noDataError(this.name));
        }
        this.theme = theme.series.gauge;
        this.rect = layout.plot;
        this.circularAxis = radialAxes.circularAxis;
        this.activeSeriesMap = (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_4__.getActiveSeriesMap)(legend);
        this.selectable = this.getSelectableOption(options);
        const seriesData = series.gauge.data;
        const hasCategoryAxis = !(0,_helpers_axes__WEBPACK_IMPORTED_MODULE_5__.isLabelAxisOnYAxis)({ series, categories });
        const renderOptions = this.makeRenderOptions(hasCategoryAxis, categories, scale, (_b = options) === null || _b === void 0 ? void 0 : _b.series);
        const clockHandModels = this.renderClockHands(seriesData, renderOptions);
        this.models.clockHand = renderOptions.useClockHand ? clockHandModels : [];
        const solidModels = this.renderSolidModels(seriesData, clockHandModels, renderOptions);
        const tooltipData = this.makeTooltipData(clockHandModels);
        if (!this.drawModels) {
            this.initDrawModels();
        }
        if ((0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_6__.getDataLabelsOptions)(options, this.name).visible) {
            const { value, name, x, y, seriesData: data } = clockHandModels[0];
            this.renderDataLabels([
                {
                    type: 'point',
                    theme: this.theme.dataLabels,
                    value,
                    name,
                    x,
                    y: y + _store_gaugeAxes__WEBPACK_IMPORTED_MODULE_7__.DATA_LABEL_MARGIN,
                    data,
                },
            ]);
        }
        this.tooltipMap = this.makeTooltipMap(tooltipData, renderOptions);
        this.responders = this.getResponders(clockHandModels, solidModels, tooltipData, renderOptions.useClockHand);
    }
    renderSolidModels(seriesData, clockHandModels, renderOptions) {
        let solidModels = [];
        this.models.clockHand = renderOptions.useClockHand ? clockHandModels : [];
        if (renderOptions.solidData.visible) {
            solidModels = this.renderSectors(seriesData, renderOptions);
            this.models.backgroundSolid = this.renderBackgroundSolid(renderOptions);
            this.models.solid = solidModels;
        }
        return solidModels;
    }
    initDrawModels() {
        const { angle: { start }, } = this.circularAxis;
        this.drawModels = {
            clockHand: this.models.clockHand.map((m) => {
                const { x: x2, y: y2 } = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.getRadialPosition)(m.x, m.y, m.handSize, (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.calculateDegreeToRadian)(start));
                return Object.assign(Object.assign({}, m), { x2, y2, testDegree: 0 });
            }),
            backgroundSolid: this.models.backgroundSolid,
            solid: this.models.solid.map((m) => (Object.assign(Object.assign({}, m), { degree: Object.assign(Object.assign({}, m.degree), { end: m.degree.start }) }))),
        };
    }
    getResponders(clockHandModels, sectorModels, tooltipData, useClockHand = true) {
        const clockHandResponders = !useClockHand
            ? []
            : clockHandModels.map((m, index) => (Object.assign(Object.assign({}, m), { detectionSize: m.baseLine + DETECTION_SIZE_MARGIN, data: Object.assign({}, tooltipData[index]) })));
        return sectorModels.length
            ? [
                ...sectorModels.map((m, index) => (Object.assign(Object.assign({}, m), { data: Object.assign({}, tooltipData[index]) }))),
                ...clockHandResponders,
            ]
            : clockHandResponders;
    }
    getHandSize(size, index = 0) {
        const maxClockHandSize = this.circularAxis.maxClockHandSize;
        if (size) {
            return Array.isArray(size)
                ? (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.calculateSizeWithPercentString)(maxClockHandSize, size[index])
                : (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.calculateSizeWithPercentString)(maxClockHandSize, size);
        }
        return maxClockHandSize;
    }
    renderClockHands(seriesData, renderOptions) {
        const { centerX, centerY, totalAngle, clockwise, scaleMaxLimitValue, categories, drawingStartAngle, } = renderOptions;
        const seriesModels = [];
        const { size, baseLine, color: clockHandColor } = this.theme.clockHand;
        const { radius, color: pinColor, borderWidth, borderColor } = this.theme.pin;
        seriesData.forEach(({ name, data, color }, seriesIndex) => {
            const seriesColor = this.getSeriesColor(name, color);
            data.forEach((value, index) => {
                const val = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isString)(value)
                    ? categories.findIndex((category) => category === value)
                    : value;
                const degree = drawingStartAngle + (val / scaleMaxLimitValue) * totalAngle * (clockwise ? 1 : -1);
                const validDegree = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.calculateValidAngle)(degree);
                const handSize = this.getHandSize(size, index);
                const { x: x2, y: y2 } = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.getRadialPosition)(centerX, centerY, handSize, (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.calculateDegreeToRadian)(validDegree));
                seriesModels.push({
                    type: 'clockHand',
                    color: (clockHandColor !== null && clockHandColor !== void 0 ? clockHandColor : seriesColor),
                    name,
                    value,
                    x: centerX,
                    y: centerY,
                    x2,
                    y2,
                    pin: {
                        radius: radius,
                        color: (pinColor !== null && pinColor !== void 0 ? pinColor : seriesColor),
                        style: [
                            {
                                strokeStyle: (borderColor !== null && borderColor !== void 0 ? borderColor : (0,_helpers_color__WEBPACK_IMPORTED_MODULE_8__.getRGBA)(seriesColor, 0.1)),
                                lineWidth: borderWidth ? borderWidth + radius : 0,
                            },
                        ],
                    },
                    degree: validDegree,
                    animationDegree: degree,
                    baseLine: baseLine,
                    handSize,
                    seriesData: data,
                    index,
                    seriesIndex,
                });
            });
        });
        return seriesModels;
    }
    renderBackgroundSolid(renderOptions) {
        const { centerX, centerY, startAngle, totalAngle, clockwise, solidData } = renderOptions;
        const { color } = this.theme.solid.backgroundSolid;
        return [
            {
                type: 'sector',
                color: color,
                x: centerX,
                y: centerY,
                clockwise,
                degree: {
                    start: startAngle,
                    end: startAngle + totalAngle,
                },
                radius: solidData.radiusRange,
            },
        ];
    }
    renderSectors(seriesData, renderOptions) {
        const sectors = [];
        const { centerX, centerY, clockwise, totalAngle, scaleMaxLimitValue, startAngle, categories, solidData, } = renderOptions;
        const { radiusRange } = solidData;
        const { lineWidth, strokeStyle } = this.theme.solid;
        seriesData.forEach(({ name, data, color }, index) => {
            const seriesColor = this.getSeriesColor(name, color);
            const value = data[0];
            const val = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isString)(value) ? categories.findIndex((category) => category === value) : value;
            const degree = (val / scaleMaxLimitValue) * totalAngle * (clockwise ? 1 : -1);
            const validDegree = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.calculateValidAngle)(degree);
            const startDegree = startAngle;
            const endDegree = startDegree + degree;
            const animationStartDegree = startAngle;
            const animationEndDegree = animationStartDegree + validDegree;
            sectors.push({
                type: 'sector',
                color: seriesColor,
                x: centerX,
                y: centerY,
                clockwise,
                degree: {
                    start: startDegree,
                    end: endDegree,
                },
                radius: radiusRange,
                animationDegree: {
                    start: animationStartDegree,
                    end: animationEndDegree,
                },
                drawingStartAngle: _helpers_sector__WEBPACK_IMPORTED_MODULE_3__.DEGREE_NEGATIVE_90,
                style: [{ strokeStyle }],
                lineWidth,
                index,
            });
        });
        return sectors;
    }
    makeTooltipMap(tooltipData, renderOptions) {
        const { clockHand, solid } = this.models;
        const { useClockHand } = renderOptions;
        return tooltipData.reduce((acc, data, index) => {
            if (useClockHand) {
                acc.clockHand.push(Object.assign(Object.assign({}, clockHand[index]), { detectionSize: clockHand[index].baseLine + 3, data }));
            }
            if (solid[index]) {
                acc.solid.push(Object.assign(Object.assign({}, solid[index]), { data }));
            }
            return acc;
        }, { solid: [], clockHand: [] });
    }
    makeRenderOptions(hasCategoryAxis, categories, scale, options) {
        var _a, _b;
        const { centerX, centerY, solidData, angle: { start, end, drawingStart }, radius: { outer }, } = this.circularAxis;
        const solid = this.circularAxis.solidData;
        const clockwise = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.clockwise, (_b !== null && _b !== void 0 ? _b : true));
        const totalAngle = (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_9__.getTotalAngle)(clockwise, start, end);
        return {
            clockwise,
            centerX,
            centerY,
            angleRange: { start, end },
            totalAngle,
            scaleMaxLimitValue: hasCategoryAxis
                ? categories.length
                : (0,_radialPlot__WEBPACK_IMPORTED_MODULE_10__.getScaleMaxLimitValue)(scale.circularAxis, totalAngle),
            startAngle: start,
            categories,
            drawingStartAngle: drawingStart,
            outerRadius: outer,
            useClockHand: solid.visible ? solid.clockHand : true,
            solidData: solidData,
        };
    }
    getSeriesColor(name, color) {
        const { select, areaOpacity } = this.theme;
        const active = this.activeSeriesMap[name];
        const selected = Object.values(this.activeSeriesMap).some((elem) => !elem);
        return selected
            ? (0,_helpers_color__WEBPACK_IMPORTED_MODULE_8__.getRGBA)(color, active ? select.areaOpacity : select.restSeries.areaOpacity)
            : (0,_helpers_color__WEBPACK_IMPORTED_MODULE_8__.getRGBA)(color, areaOpacity);
    }
    makeTooltipData(seriesModels) {
        return seriesModels.reduce((acc, { color, name, value, index, seriesIndex }) => (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(value) ? acc : [...acc, { label: name, color, value: value, index, seriesIndex }], []);
    }
    onMousemove({ responders }) {
        this.eventBus.emit('renderHoveredSeries', {
            models: this.getResponderModelsWithTheme(this.getResponderModels(responders), 'hover'),
            name: this.name,
        });
        this.activatedResponders = responders.map((responder) => (Object.assign({}, responder)));
        this.eventBus.emit('seriesPointHovered', {
            models: this.activatedResponders,
            name: this.name,
        });
        this.eventBus.emit('needDraw');
    }
    getResponderModels(responders) {
        const { clockHand, solid } = this.tooltipMap;
        return responders.reduce((acc, responder) => {
            const index = responder.index;
            const clockHandModel = clockHand[index] ? [clockHand[index]] : [];
            const solidModel = solid[index] ? [solid[index]] : [];
            return [...acc, ...clockHandModel, ...solidModel];
        }, []);
    }
    onClick({ responders }) {
        if (this.selectable) {
            const models = this.getResponderModelsWithTheme(this.getResponderModels(responders), 'select');
            this.eventBus.emit('renderSelectedSeries', {
                models,
                name: this.name,
            });
            this.eventBus.emit('needDraw');
        }
    }
    getResponderModelsWithSolidTheme(responder, type) {
        var _a;
        const solidTheme = this.theme[type].solid;
        const lineWidth = solidTheme.lineWidth;
        const isSameLineWidth = this.theme.solid === lineWidth;
        const thickness = isSameLineWidth ? 0 : lineWidth * 0.5;
        return Object.assign(Object.assign({}, responder), { color: (_a = solidTheme.color, (_a !== null && _a !== void 0 ? _a : responder.color)), lineWidth, style: [
                (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.pick)(solidTheme, 'strokeStyle', 'shadowBlur', 'shadowColor', 'shadowOffsetX', 'shadowOffsetY'),
            ], radius: {
                inner: Math.max(responder.radius.inner - thickness, 0),
                outer: responder.radius.outer + thickness,
            } });
    }
    getResponderWithClockHandTheme(responder, type) {
        const { clockHand, pin } = this.theme[type];
        const { size, baseLine, color: clockHandColor } = clockHand;
        const { radius, color: pinColor, borderWidth, borderColor } = pin;
        const pinRadius = (radius !== null && radius !== void 0 ? radius : responder.pin.radius);
        const pinStyle = [
            {
                strokeStyle: (borderColor !== null && borderColor !== void 0 ? borderColor : (0,_helpers_color__WEBPACK_IMPORTED_MODULE_8__.getRGBA)(responder.pin.style[0].strokeStyle, 0.3)),
                lineWidth: borderWidth ? borderWidth + pinRadius : 0,
            },
        ];
        return Object.assign(Object.assign({}, responder), { color: (clockHandColor !== null && clockHandColor !== void 0 ? clockHandColor : responder.color), pin: {
                radius: pinRadius,
                color: (pinColor !== null && pinColor !== void 0 ? pinColor : responder.pin.color),
                style: pinStyle,
            }, baseLine: (baseLine !== null && baseLine !== void 0 ? baseLine : responder.baseLine), handSize: size ? this.getHandSize(size, responder.index) : responder.handSize });
    }
    getResponderModelsWithTheme(responders, type) {
        return responders.map((m) => {
            var _a;
            return ((_a = m) === null || _a === void 0 ? void 0 : _a.type) === 'sector'
                ? this.getResponderModelsWithSolidTheme(m, type)
                : this.getResponderWithClockHandTheme(m, type);
        });
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/heatmapSeries.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/heatmapSeries.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ HeatmapSeries)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_color__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");
/* harmony import */ var _helpers_dataLabels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/helpers/dataLabels.js");
/* harmony import */ var _helpers_colorSpectrum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/colorSpectrum */ "./node_modules/@toast-ui/chart/dist/esm/helpers/colorSpectrum.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_theme__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/theme */ "./node_modules/@toast-ui/chart/dist/esm/helpers/theme.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");







class HeatmapSeries extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.activatedResponders = [];
        this.onMouseoutComponent = () => {
            this.emitMouseEvent([]);
        };
        this.selectSeries = ({ index, seriesIndex, state, }) => {
            var _a;
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(index) || !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(seriesIndex)) {
                return;
            }
            const dataSize = (_a = state.series.heatmap) === null || _a === void 0 ? void 0 : _a[0].data.length;
            const responderIndex = seriesIndex * dataSize + index;
            const model = this.responders[responderIndex];
            if (!model) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.SELECT_SERIES_API_INDEX_ERROR);
            }
            this.eventBus.emit('renderSelectedSeries', {
                models: this.getRespondersWithTheme([model], 'select'),
                name: this.name,
            });
            this.eventBus.emit('needDraw');
        };
        this.showTooltip = ({ index, seriesIndex, state }) => {
            var _a;
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(index) || !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(seriesIndex)) {
                return;
            }
            const dataSize = (_a = state.series.heatmap) === null || _a === void 0 ? void 0 : _a[0].data.length;
            const responderIndex = seriesIndex * dataSize + index;
            const model = this.responders[responderIndex];
            if (model) {
                this.emitMouseEvent([model]);
            }
        };
    }
    initialize() {
        this.type = 'series';
        this.name = 'heatmap';
        this.eventBus.on('selectSeries', this.selectSeries);
        this.eventBus.on('showTooltip', this.showTooltip);
        this.eventBus.on('hideTooltip', this.onMouseoutComponent);
    }
    render(chartState) {
        const { layout, heatmapSeries, axes, theme, colorValueScale, options } = chartState;
        if (!heatmapSeries) {
            throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.noDataError(this.name));
        }
        this.theme = theme.series.heatmap;
        this.selectable = this.getSelectableOption(options);
        this.rect = layout.plot;
        const cellSize = {
            height: axes.yAxis.tickDistance,
            width: axes.xAxis.tickDistance,
        };
        this.models = {
            series: this.renderHeatmapSeries(heatmapSeries, cellSize, colorValueScale),
        };
        if ((0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_3__.getDataLabelsOptions)(options, this.name).visible) {
            this.renderDataLabels(this.makeDataLabels());
        }
        this.responders = this.makeHeatmapSeriesResponder();
    }
    makeDataLabels() {
        const dataLabelTheme = this.theme.dataLabels;
        return this.models.series.reduce((acc, m) => {
            return (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(m.colorValue)
                ? acc
                : [
                    ...acc,
                    Object.assign(Object.assign({}, m), { type: 'treemapSeriesName', value: m.colorValue, direction: 'left', plot: { x: 0, y: 0, size: 0 }, theme: Object.assign(Object.assign({}, dataLabelTheme), { color: dataLabelTheme.useSeriesColor ? m.color : dataLabelTheme.color }) }),
                ];
        }, []);
    }
    makeHeatmapSeriesResponder() {
        return this.models.series.reduce((acc, model) => {
            return (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(model.colorValue)
                ? acc
                : [
                    ...acc,
                    Object.assign(Object.assign({}, model), { data: Object.assign(Object.assign({}, model), { label: model.name, value: model.colorValue, templateType: 'heatmap' }), thickness: _helpers_theme__WEBPACK_IMPORTED_MODULE_4__.boxDefault.HOVER_THICKNESS, style: ['shadow'] }),
                ];
        }, []);
    }
    renderHeatmapSeries(seriesData, cellSize, colorValueScale) {
        const { startColor, endColor, borderColor, borderWidth } = this.theme;
        const startRGB = (0,_helpers_color__WEBPACK_IMPORTED_MODULE_5__.hexToRGB)(startColor);
        const distances = (0,_helpers_colorSpectrum__WEBPACK_IMPORTED_MODULE_6__.makeDistances)(startRGB, (0,_helpers_color__WEBPACK_IMPORTED_MODULE_5__.hexToRGB)(endColor));
        const { height, width } = cellSize;
        return seriesData.flatMap((data) => {
            return data.flatMap((datum) => {
                const { indexes, colorValue, category } = datum;
                const name = `${category.x}, ${category.y}`;
                const [xIndex, yIndex] = indexes;
                const colorRatio = (0,_helpers_colorSpectrum__WEBPACK_IMPORTED_MODULE_6__.getColorRatio)(colorValueScale.limit, colorValue);
                const color = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(colorValue)
                    ? 'rgba(0, 0, 0, 0)'
                    : (0,_helpers_colorSpectrum__WEBPACK_IMPORTED_MODULE_6__.getSpectrumColor)(colorRatio, distances, startRGB);
                const thickness = borderWidth;
                return {
                    type: 'rect',
                    name,
                    width: width - thickness * 2,
                    height: height - thickness * 2,
                    x: width * xIndex + thickness,
                    y: height * yIndex + thickness,
                    colorValue,
                    colorRatio,
                    color,
                    thickness,
                    borderColor,
                };
            });
        });
    }
    getRespondersWithTheme(responders, type) {
        return responders.map((responder) => (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.deepMergedCopy)(responder, Object.assign(Object.assign({}, this.theme[type]), { style: ['shadow'] })));
    }
    onClick({ responders }) {
        if (this.selectable) {
            this.eventBus.emit('renderSelectedSeries', {
                models: this.getRespondersWithTheme(responders, 'select'),
                name: this.name,
            });
            this.eventBus.emit('needDraw');
        }
    }
    onMousemove({ responders }) {
        this.activatedResponders = responders;
        this.emitMouseEvent(responders);
    }
    emitMouseEvent(responders) {
        this.eventBus.emit('renderHoveredSeries', {
            models: this.getRespondersWithTheme(responders, 'hover'),
            name: this.name,
        });
        this.eventBus.emit('seriesPointHovered', {
            models: responders,
            name: this.name,
        });
        this.eventBus.emit('renderSpectrumTooltip', responders);
        this.eventBus.emit('needDraw');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/hoveredSeries.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ HoveredSeries)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_responders__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/responders */ "./node_modules/@toast-ui/chart/dist/esm/helpers/responders.js");
/* harmony import */ var _store_reactive__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/reactive */ "./node_modules/@toast-ui/chart/dist/esm/store/reactive.js");
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};





const guideLineType = {
    line: 'circle',
    area: 'circle',
    boxPlot: 'boxPlot',
};
class HoveredSeries extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = { guideLine: [] };
        this.isShow = false;
        this.renderHoveredSeries = ({ models, name, eventDetectType, }) => {
            var _a, _b;
            const prevModels = this.getSeriesModels(name);
            this.models[name] = [...models];
            this.isShow = !!this.getSeriesModels().length;
            const isSame = !!((_a = prevModels) === null || _a === void 0 ? void 0 : _a.length) &&
                !!models.length &&
                (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_1__.isSameSeriesResponder)({ models, comparisonModel: prevModels, eventDetectType, name });
            if (((_b = prevModels) === null || _b === void 0 ? void 0 : _b.length) && !models.length) {
                this.eventBus.emit('unhoverSeries', (0,_store_reactive__WEBPACK_IMPORTED_MODULE_2__.makeObservableObjectToNormal)(prevModels));
            }
            else if (models.length && !isSame) {
                this.eventBus.emit('hoverSeries', (0,_store_reactive__WEBPACK_IMPORTED_MODULE_2__.makeObservableObjectToNormal)(models));
            }
            this.modelForGuideLine = this.getModelForGuideLine(name);
            if (eventDetectType === 'grouped') {
                this.renderGroupedModels(name);
            }
        };
        this.resetHoveredSeries = () => {
            this.models = { guideLine: [] };
        };
    }
    getSeriesModels(type) {
        var _a;
        const _b = this.models, { guideLine } = _b, models = __rest(_b, ["guideLine"]);
        return (_a = (type ? models[type] : Object.values(models))) === null || _a === void 0 ? void 0 : _a.flatMap((val) => val);
    }
    hasGuideLine() {
        const [rectModel] = this.getSeriesModels().filter(({ type }) => type === 'rect');
        return !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(this.modelForGuideLine) && (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(rectModel);
    }
    getModelForGuideLine(name) {
        return this.getSeriesModels().filter(({ type }) => type === guideLineType[name])[0];
    }
    renderGroupedModels(name) {
        if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.includes)(Object.keys(guideLineType), name)) {
            if (this.isShow && this.hasGuideLine()) {
                this.models.guideLine = [this.renderGuideLineModel(this.modelForGuideLine)];
            }
            else {
                this.models.guideLine = [];
            }
        }
    }
    renderGuideLineModel(model) {
        const x = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_4__.crispPixel)(model.type === 'boxPlot' && model.boxPlotDetection
            ? model.boxPlotDetection.x + model.boxPlotDetection.width / 2
            : model.x);
        return {
            type: 'line',
            x,
            y: 0,
            x2: x,
            y2: this.rect.height,
            strokeStyle: '#ddd',
            lineWidth: 1,
        };
    }
    initialize() {
        this.type = 'hoveredSeries';
        this.name = 'hoveredSeries';
        this.eventBus.on('renderHoveredSeries', this.renderHoveredSeries);
        this.eventBus.on('resetHoveredSeries', this.resetHoveredSeries);
    }
    render({ layout }) {
        this.rect = layout.plot;
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/legend.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/legend.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Legend)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _store_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../store/layout */ "./node_modules/@toast-ui/chart/dist/esm/store/layout.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _store_reactive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/reactive */ "./node_modules/@toast-ui/chart/dist/esm/store/reactive.js");







class Legend extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.activatedResponders = [];
        this.seriesColorMap = {};
        this.seriesIconTypeMap = {};
        this.onClickCheckbox = (responders) => {
            const { label, checked } = responders[0];
            this.store.dispatch('setAllLegendActiveState', true);
            this.store.dispatch('setLegendCheckedState', { name: label, checked: !checked });
            if (checked) {
                this.store.dispatch('disableSeries', label);
            }
            else {
                this.store.dispatch('enableSeries', label);
            }
            this.eventBus.emit('needDraw');
        };
        this.onClickLabel = (responders) => {
            const { label } = responders[0];
            this.eventBus.emit('resetSelectedSeries');
            if (this.activatedResponders.length && this.activatedResponders[0].label === label) {
                this.store.dispatch('setAllLegendActiveState', true);
                this.activatedResponders = [];
            }
            else {
                this.store.dispatch('setAllLegendActiveState', false);
                this.store.dispatch('setLegendActiveState', { name: label, active: true });
                this.activatedResponders = responders;
            }
            this.eventBus.emit('needDraw');
        };
    }
    onClick({ responders }) {
        var _a;
        if (responders.length) {
            const { data } = responders[0];
            if (((_a = data) === null || _a === void 0 ? void 0 : _a.name) === 'checkbox') {
                this.eventBus.emit('clickLegendCheckbox', (0,_store_reactive__WEBPACK_IMPORTED_MODULE_1__.makeObservableObjectToNormal)(responders));
            }
            else {
                this.eventBus.emit('clickLegendLabel', (0,_store_reactive__WEBPACK_IMPORTED_MODULE_1__.makeObservableObjectToNormal)(responders));
            }
        }
    }
    initialize() {
        this.type = 'legend';
        this.name = 'legend';
        this.eventBus.on('clickLegendCheckbox', this.onClickCheckbox);
        this.eventBus.on('clickLegendLabel', this.onClickLabel);
    }
    initColorAndIconTypeMap(legendData) {
        this.seriesColorMap = {};
        this.seriesIconTypeMap = {};
        legendData.forEach(({ label, color, iconType }) => {
            this.seriesColorMap[label] = color;
            this.seriesIconTypeMap[label] = iconType;
        });
    }
    getXPositionWhenVerticalAlign(data) {
        const { offset, rowWidths } = data.reduce((acc, datum) => {
            const { rowIndex, columnIndex, width } = datum;
            if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(acc.rowWidths[rowIndex])) {
                acc.rowWidths[rowIndex] = 0;
                acc.offset[rowIndex] = [0];
            }
            acc.rowWidths[rowIndex] += width + (columnIndex ? _brushes_legend__WEBPACK_IMPORTED_MODULE_3__.LEGEND_ITEM_MARGIN_X : 0);
            acc.offset[rowIndex][columnIndex + 1] =
                acc.offset[rowIndex][columnIndex] + _brushes_legend__WEBPACK_IMPORTED_MODULE_3__.LEGEND_ITEM_MARGIN_X + width;
            return acc;
        }, { offset: [], rowWidths: [] });
        const { width } = this.rect;
        rowWidths.forEach((rowWidth, rowIndex) => {
            const xMargin = (width - rowWidth) / 2;
            offset[rowIndex] = offset[rowIndex].map((xOffset) => xOffset + xMargin);
        });
        return offset;
    }
    getXPositionWhenHorizontalAlign(data) {
        const maxWidths = data.reduce((acc, datum) => {
            const { columnIndex, width } = datum;
            if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(acc[columnIndex])) {
                acc[columnIndex] = 0;
            }
            acc[columnIndex] = Math.max(acc[columnIndex], width);
            return acc;
        }, []);
        return data.reduce((acc, datum) => {
            const { rowIndex, columnIndex } = datum;
            if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(acc[rowIndex])) {
                acc[rowIndex] = [0];
            }
            acc[rowIndex][columnIndex + 1] =
                acc[rowIndex][columnIndex] + _brushes_legend__WEBPACK_IMPORTED_MODULE_3__.LEGEND_ITEM_MARGIN_X + maxWidths[columnIndex];
            return acc;
        }, []);
    }
    renderLegendModel(legend) {
        const { data, showCheckbox, align, useScatterChartIcon } = legend;
        const verticalAlign = (0,_store_layout__WEBPACK_IMPORTED_MODULE_4__.isVerticalAlign)(align);
        const itemHeight = (0,_brushes_legend__WEBPACK_IMPORTED_MODULE_3__.getLegendItemHeight)(this.theme.label.fontSize);
        const xPosition = verticalAlign
            ? this.getXPositionWhenVerticalAlign(data)
            : this.getXPositionWhenHorizontalAlign(data);
        return [
            Object.assign({ type: 'legend', align,
                showCheckbox, data: data.map((datum) => {
                    var _a;
                    const { label, iconType, rowIndex, columnIndex } = datum;
                    return Object.assign(Object.assign({}, datum), { iconType: (_a = this.seriesIconTypeMap[label], (_a !== null && _a !== void 0 ? _a : iconType)), color: this.seriesColorMap[label], x: xPosition[rowIndex][columnIndex], y: _store_layout__WEBPACK_IMPORTED_MODULE_4__.padding.Y + itemHeight * rowIndex, useScatterChartIcon });
                }) }, this.theme.label),
        ];
    }
    makeCheckboxResponder(data, showCheckbox) {
        return showCheckbox
            ? data.map((m) => (Object.assign(Object.assign({}, m), { type: 'rect', x: m.x, y: m.y, width: _brushes_legend__WEBPACK_IMPORTED_MODULE_3__.LEGEND_CHECKBOX_SIZE, height: _brushes_legend__WEBPACK_IMPORTED_MODULE_3__.LEGEND_CHECKBOX_SIZE, data: { name: 'checkbox' } })))
            : [];
    }
    makeLabelResponder(data, showCheckbox) {
        const font = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_5__.getTitleFontString)(this.theme.label);
        return data.map((m) => (Object.assign(Object.assign({}, m), { type: 'rect', x: m.x +
                (showCheckbox ? _brushes_legend__WEBPACK_IMPORTED_MODULE_3__.LEGEND_CHECKBOX_SIZE + _brushes_legend__WEBPACK_IMPORTED_MODULE_3__.LEGEND_MARGIN_X : 0) +
                _brushes_legend__WEBPACK_IMPORTED_MODULE_3__.LEGEND_ICON_SIZE +
                _brushes_legend__WEBPACK_IMPORTED_MODULE_3__.LEGEND_MARGIN_X, y: m.y, width: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_6__.getTextWidth)(m.label, font), data: { name: 'label' }, height: _brushes_legend__WEBPACK_IMPORTED_MODULE_3__.LEGEND_CHECKBOX_SIZE })));
    }
    render({ layout, legend, theme }) {
        this.isShow = legend.visible && !!legend.data.length;
        if (!this.isShow) {
            return;
        }
        // @TODO: stack 일 떄 라벨 순서 역순으로(스택이 쌓인 순서대로) 되어야
        const { showCheckbox, data: legendData } = legend;
        this.rect = layout.legend;
        this.theme = theme.legend;
        this.initColorAndIconTypeMap(legendData);
        this.models = this.renderLegendModel(legend);
        const { data } = this.models[0];
        const checkboxResponder = this.makeCheckboxResponder(data, showCheckbox);
        const labelResponder = this.makeLabelResponder(data, showCheckbox);
        this.responders = [...checkboxResponder, ...labelResponder];
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/lineSeries.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/lineSeries.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LineSeries)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _helpers_coordinate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/coordinate */ "./node_modules/@toast-ui/chart/dist/esm/helpers/coordinate.js");
/* harmony import */ var _helpers_color__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../helpers/color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_legend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/legend */ "./node_modules/@toast-ui/chart/dist/esm/helpers/legend.js");
/* harmony import */ var _helpers_responders__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/responders */ "./node_modules/@toast-ui/chart/dist/esm/helpers/responders.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _helpers_dataLabels__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/helpers/dataLabels.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");
/* harmony import */ var _helpers_validation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/validation */ "./node_modules/@toast-ui/chart/dist/esm/helpers/validation.js");











class LineSeries extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = { rect: [], series: [], dot: [] };
        this.activatedResponders = [];
        this.eventDetectType = 'nearest';
        this.yAxisName = 'yAxis';
        this.onMouseoutComponent = () => {
            this.eventBus.emit('seriesPointHovered', { models: [], name: this.name });
            this.eventBus.emit('renderHoveredSeries', {
                models: [],
                name: this.name,
                eventDetectType: this.eventDetectType,
            });
            this.eventBus.emit('needDraw');
        };
        this.selectSeries = (info) => {
            const { index, seriesIndex } = info;
            if (!(0,_helpers_validation__WEBPACK_IMPORTED_MODULE_1__.isAvailableSelectSeries)(info, 'line')) {
                return;
            }
            const category = this.getResponderCategoryByIndex(index);
            if (!category) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.SELECT_SERIES_API_INDEX_ERROR);
            }
            const model = this.tooltipCircleMap[category][seriesIndex];
            if (!model) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.SELECT_SERIES_API_INDEX_ERROR);
            }
            const models = this.getResponderSeriesWithTheme([model], 'select');
            this.eventBus.emit('renderSelectedSeries', { models, name: this.name });
            this.eventBus.emit('needDraw');
        };
        this.showTooltip = (info) => {
            var _a;
            const { index, seriesIndex } = info;
            if (!(0,_helpers_validation__WEBPACK_IMPORTED_MODULE_1__.isAvailableShowTooltipInfo)(info, this.eventDetectType, 'line')) {
                return;
            }
            const category = this.getResponderCategoryByIndex(index);
            if (!category) {
                return;
            }
            const models = this.eventDetectType === 'grouped'
                ? this.tooltipCircleMap[category]
                : [this.tooltipCircleMap[category][seriesIndex]];
            if (!((_a = models) === null || _a === void 0 ? void 0 : _a.length)) {
                return;
            }
            this.onMousemoveNearType(models);
            this.eventBus.emit('seriesPointHovered', { models: this.activatedResponders, name: this.name });
            this.eventBus.emit('needDraw');
        };
    }
    initialize() {
        this.type = 'series';
        this.name = 'line';
        this.eventBus.on('selectSeries', this.selectSeries);
        this.eventBus.on('showTooltip', this.showTooltip);
        this.eventBus.on('hideTooltip', this.onMouseoutComponent);
    }
    initUpdate(delta) {
        this.drawModels.rect[0].width = this.models.rect[0].width * delta;
    }
    setEventDetectType(series, options) {
        var _a, _b;
        if (series.area || series.column) {
            this.eventDetectType = 'grouped';
        }
        if ((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b.eventDetectType) {
            this.eventDetectType = options.series.eventDetectType;
        }
        if (series.scatter) {
            this.eventDetectType = 'near';
        }
    }
    render(chartState, computed) {
        var _a, _b, _c, _d, _e, _f;
        const { viewRange } = computed;
        const { layout, series, scale, axes, legend, theme } = chartState;
        if (!series.line) {
            throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.noDataError(this.name));
        }
        const categories = (_a = chartState.categories, (_a !== null && _a !== void 0 ? _a : []));
        const rawCategories = (_b = chartState.rawCategories, (_b !== null && _b !== void 0 ? _b : []));
        const options = Object.assign({}, chartState.options);
        if (((_c = options) === null || _c === void 0 ? void 0 : _c.series) && 'line' in options.series) {
            options.series = Object.assign(Object.assign({}, options.series), options.series.line);
        }
        this.setEventDetectType(series, options);
        const labelAxisData = axes.xAxis;
        const seriesOptions = (_d = options.series, (_d !== null && _d !== void 0 ? _d : {}));
        const lineSeriesData = series.line.data;
        this.theme = theme.series.line;
        this.rect = layout.plot;
        this.activeSeriesMap = (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_3__.getActiveSeriesMap)(legend);
        this.startIndex = (_f = (_e = viewRange) === null || _e === void 0 ? void 0 : _e[0], (_f !== null && _f !== void 0 ? _f : 0));
        this.selectable = this.getSelectableOption(options);
        this.yAxisName = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_4__.getValueAxisName)(options, this.name, 'yAxis');
        const lineSeriesModel = this.renderLinePointsModel(lineSeriesData, scale, labelAxisData, seriesOptions, categories);
        const { dotSeriesModel, responderModel } = this.renderCircleModel(lineSeriesModel, seriesOptions);
        const tooltipDataArr = this.makeTooltipData(lineSeriesData, categories);
        this.tooltipCircleMap = (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_5__.makeTooltipCircleMap)(responderModel, tooltipDataArr);
        this.models = {
            rect: [this.renderClipRectAreaModel()],
            series: lineSeriesModel,
            dot: dotSeriesModel,
        };
        if (!this.drawModels) {
            this.drawModels = Object.assign(Object.assign({}, this.models), { rect: [this.renderClipRectAreaModel(true)] });
        }
        if ((0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_6__.getDataLabelsOptions)(options, this.name).visible) {
            this.renderDataLabels(this.getDataLabels(lineSeriesModel));
        }
        const coordinateType = (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_7__.isCoordinateSeries)(series);
        this.responders = this.getResponders({
            labelAxisData,
            responderModel,
            tooltipDataArr,
            categories,
            rawCategories,
            coordinateType,
        });
    }
    getResponders({ labelAxisData, responderModel, tooltipDataArr, categories, rawCategories, coordinateType, }) {
        if (this.eventDetectType === 'near') {
            return this.makeNearTypeResponderModel(responderModel, tooltipDataArr, rawCategories);
        }
        if (this.eventDetectType === 'point') {
            return this.makeNearTypeResponderModel(responderModel, tooltipDataArr, rawCategories, 0);
        }
        if (coordinateType) {
            const rectResponderInfo = this.getRectResponderInfoForCoordinateType(responderModel, rawCategories);
            return (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_5__.makeRectResponderModelForCoordinateType)(rectResponderInfo, this.rect);
        }
        return (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_5__.makeRectResponderModel)(this.rect, labelAxisData, categories);
    }
    makeNearTypeResponderModel(seriesCircleModel, tooltipDataArr, categories, detectionSize) {
        return seriesCircleModel.map((m, index) => (Object.assign(Object.assign({}, m), { data: tooltipDataArr[index], detectionSize, label: categories[m.index] })));
    }
    makeTooltipData(lineSeriesData, categories) {
        return lineSeriesData.flatMap(({ rawData, name, color }, seriesIndex) => {
            return rawData.map((datum, index) => (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_8__.isNull)(datum)
                ? {}
                : {
                    label: name,
                    color,
                    value: (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_7__.getCoordinateYValue)(datum),
                    category: categories[(0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_7__.getCoordinateDataIndex)(datum, categories, index, this.startIndex)],
                    seriesIndex,
                    index,
                });
        });
    }
    renderClipRectAreaModel(isDrawModel) {
        return {
            type: 'clipRectArea',
            x: 0,
            y: 0,
            width: isDrawModel ? 0 : this.rect.width,
            height: this.rect.height,
        };
    }
    renderLinePointsModel(seriesRawData, scale, axisData, options, categories) {
        const { spline } = options;
        const yAxisLimit = scale[this.yAxisName].limit;
        const { lineWidth, dashSegments } = this.theme;
        return seriesRawData.map(({ rawData, name, color: seriesColor }, seriesIndex) => {
            const points = [];
            const active = this.activeSeriesMap[name];
            rawData.forEach((datum, idx) => {
                if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_8__.isNull)(datum)) {
                    return points.push(null);
                }
                const value = (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_7__.getCoordinateYValue)(datum);
                const yValueRatio = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_9__.getValueRatio)(value, yAxisLimit);
                const y = (1 - yValueRatio) * this.rect.height;
                const x = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_9__.getXPosition)(axisData, this.rect.width, (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_7__.getCoordinateXValue)(datum), (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_7__.getCoordinateDataIndex)(datum, categories, idx, this.startIndex));
                points.push({ x, y, value });
            });
            if (spline) {
                (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_9__.setSplineControlPoint)(points);
            }
            return {
                type: 'linePoints',
                points,
                seriesIndex,
                name,
                color: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_10__.getRGBA)(seriesColor, active ? 1 : 0.3),
                lineWidth,
                dashSegments,
            };
        });
    }
    getRectResponderInfoForCoordinateType(circleModel, categories) {
        const duplicateCheckMap = {};
        const modelInRange = circleModel.filter(({ x }) => x >= 0 && x <= this.rect.width);
        return modelInRange.reduce((acc, model) => {
            const { index, x } = model;
            if (!duplicateCheckMap[x]) {
                const label = categories[index];
                duplicateCheckMap[x] = true;
                acc.push({ x, label });
            }
            return acc;
        }, []);
    }
    renderCircleModel(lineSeriesModel, options) {
        const dotSeriesModel = [];
        const responderModel = [];
        const showDot = !!options.showDot;
        const { hover, dot: dotTheme } = this.theme;
        const hoverDotTheme = hover.dot;
        lineSeriesModel.forEach(({ color, name, points }, seriesIndex) => {
            const active = this.activeSeriesMap[name];
            points.forEach((point, index) => {
                var _a, _b;
                if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_8__.isNull)(point)) {
                    return;
                }
                const { x, y } = point;
                const model = { type: 'circle', x, y, seriesIndex, name, index };
                if (showDot) {
                    dotSeriesModel.push(Object.assign(Object.assign({}, model), { radius: dotTheme.radius, color: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_10__.getRGBA)(color, active ? 1 : 0.3), style: [
                            { lineWidth: dotTheme.borderWidth, strokeStyle: (_a = dotTheme.borderColor, (_a !== null && _a !== void 0 ? _a : color)) },
                        ] }));
                }
                responderModel.push(Object.assign(Object.assign({}, model), { radius: hoverDotTheme.radius, color: (_b = hoverDotTheme.color, (_b !== null && _b !== void 0 ? _b : (0,_helpers_color__WEBPACK_IMPORTED_MODULE_10__.getRGBA)(color, 1))), style: ['default'] }));
            });
        });
        return { dotSeriesModel, responderModel };
    }
    getCircleModelsFromRectResponders(responders, mousePositions) {
        var _a, _b;
        if (!responders.length || !responders[0].label) {
            return [];
        }
        const models = (_b = this.tooltipCircleMap[(_a = responders[0]) === null || _a === void 0 ? void 0 : _a.label], (_b !== null && _b !== void 0 ? _b : []));
        return this.eventDetectType === 'grouped'
            ? models
            : (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_5__.getNearestResponder)(models, mousePositions, this.rect);
    }
    onMousemoveNearType(responders) {
        this.eventBus.emit('renderHoveredSeries', {
            models: this.getResponderSeriesWithTheme(responders, 'hover'),
            name: this.name,
            eventDetectType: this.eventDetectType,
        });
        this.activatedResponders = responders;
    }
    onMousemoveNearestType(responders, mousePositions) {
        const circleModels = this.getCircleModelsFromRectResponders(responders, mousePositions);
        this.onMousemoveNearType(circleModels);
    }
    onMousemoveGroupedType(responders) {
        const circleModels = this.getCircleModelsFromRectResponders(responders);
        this.onMousemoveNearType(circleModels);
    }
    onMousemove({ responders, mousePosition }) {
        if (this.eventDetectType === 'nearest') {
            this.onMousemoveNearestType(responders, mousePosition);
        }
        else if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_8__.includes)(['near', 'point'], this.eventDetectType)) {
            this.onMousemoveNearType(responders);
        }
        else {
            this.onMousemoveGroupedType(responders);
        }
        this.eventBus.emit('seriesPointHovered', { models: this.activatedResponders, name: this.name });
        this.eventBus.emit('needDraw');
    }
    getDataLabels(seriesModels) {
        const dataLabelTheme = this.theme.dataLabels;
        return seriesModels.flatMap(({ points, name, color }) => points.map((point) => (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_8__.isNull)(point)
            ? {}
            : Object.assign(Object.assign({ type: 'point' }, point), { name, theme: Object.assign(Object.assign({}, dataLabelTheme), { color: dataLabelTheme.useSeriesColor ? color : dataLabelTheme.color }) })));
    }
    getResponderSeriesWithTheme(models, type) {
        const { radius, color, borderWidth, borderColor } = this.theme[type].dot;
        return models.map((model) => {
            const modelColor = (color !== null && color !== void 0 ? color : model.color);
            return Object.assign(Object.assign({}, model), { radius, color: modelColor, style: [{ lineWidth: borderWidth, strokeStyle: (borderColor !== null && borderColor !== void 0 ? borderColor : (0,_helpers_color__WEBPACK_IMPORTED_MODULE_10__.getRGBA)(modelColor, 0.5)) }] });
        });
    }
    onClick({ responders, mousePosition }) {
        if (this.selectable) {
            let models;
            if (this.eventDetectType === 'near') {
                models = responders;
            }
            else {
                models = this.getCircleModelsFromRectResponders(responders, mousePosition);
            }
            this.eventBus.emit('renderSelectedSeries', {
                models: this.getResponderSeriesWithTheme(models, 'select'),
                name: this.name,
            });
            this.eventBus.emit('needDraw');
        }
    }
    getResponderCategoryByIndex(index) {
        var _a, _b;
        const responder = Object.values(this.tooltipCircleMap)
            .flatMap((val) => val)
            .find((model) => model.index === index);
        return (_b = (_a = responder) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.category;
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/noDataText.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NoDataText)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _helpers_validation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/validation */ "./node_modules/@toast-ui/chart/dist/esm/helpers/validation.js");




const DEFAULT_NO_DATA_TEXT = 'No data to display';
class NoDataText extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    initialize() {
        this.type = 'noDataText';
        this.name = 'noDataText';
    }
    getCenterPosition(text, font) {
        const textWidth = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_1__.getTextWidth)(text, font);
        const textHeight = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_1__.getTextHeight)(text, font);
        return {
            x: (this.rect.width - textWidth) / 2,
            y: (this.rect.height - textHeight) / 2,
        };
    }
    render({ layout, series, options, theme }) {
        var _a, _b, _c;
        const text = (_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.lang) === null || _b === void 0 ? void 0 : _b.noData, (_c !== null && _c !== void 0 ? _c : DEFAULT_NO_DATA_TEXT));
        const labelTheme = theme.noData;
        const font = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_2__.getTitleFontString)(labelTheme);
        const fillStyle = labelTheme.color;
        this.isShow = (0,_helpers_validation__WEBPACK_IMPORTED_MODULE_3__.isNoData)(series);
        this.rect = layout.plot;
        this.models = [
            Object.assign(Object.assign({ type: 'label' }, this.getCenterPosition(text, font)), { text, style: [{ font, fillStyle }] }),
        ];
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/pieSeries.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/pieSeries.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PieSeries)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_color__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../helpers/color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");
/* harmony import */ var _helpers_sector__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/sector */ "./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js");
/* harmony import */ var _helpers_legend__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/legend */ "./node_modules/@toast-ui/chart/dist/esm/helpers/legend.js");
/* harmony import */ var _helpers_dataLabels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/helpers/dataLabels.js");
/* harmony import */ var _helpers_pieSeries__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/pieSeries */ "./node_modules/@toast-ui/chart/dist/esm/helpers/pieSeries.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");











function getCalculatedRadiusRange({ alias, renderOptions, radiusRangeMap, pieIndex, radiusRanges, totalPieAliasCount, }) {
    var _a, _b, _c, _d, _e;
    const radiusRangeLength = Object.keys(radiusRangeMap).length;
    const { defaultRadius = 0 } = renderOptions;
    let { inner, outer } = renderOptions.radiusRange;
    if (!radiusRangeMap[alias]) {
        if (!radiusRangeLength) {
            const radius = defaultRadius / totalPieAliasCount;
            inner = pieIndex * radius;
            outer = (pieIndex + 1) * radius;
        }
        else {
            if (pieIndex && radiusRanges[pieIndex - 1].outer) {
                inner = radiusRanges[pieIndex - 1].outer;
            }
            if ((_a = radiusRanges[pieIndex + 1]) === null || _a === void 0 ? void 0 : _a.inner) {
                outer = radiusRanges[pieIndex + 1].inner;
            }
            else if (pieIndex === totalPieAliasCount - 1) {
                outer = defaultRadius;
            }
            else {
                const radius = (defaultRadius -
                    (_c = (_b = radiusRanges[pieIndex - 1]) === null || _b === void 0 ? void 0 : _b.outer, (_c !== null && _c !== void 0 ? _c : 0)) -
                    (_e = (_d = radiusRanges[pieIndex + 1]) === null || _d === void 0 ? void 0 : _d.inner, (_e !== null && _e !== void 0 ? _e : 0))) /
                    (totalPieAliasCount - radiusRangeLength);
                outer = inner + radius;
            }
        }
    }
    return { inner, outer };
}
function getPieSeriesOpacityByDepth(originAlpha, depth, indexOfGroup, brightness = 0.85) {
    const depthAlpha = Number((originAlpha * Math.pow(brightness, depth)).toFixed(2));
    return Number((Math.pow(depthAlpha, (indexOfGroup + 1))).toFixed(2));
}
function getMaxDataLabelSize(seriesNameLabels, options, dataLabelTheme) {
    var _a, _b;
    const outerLabels = [
        {
            hasOuterLabel: options.visible && options.anchor === 'outer',
            labels: ['00.00%'],
            theme: dataLabelTheme,
        },
        {
            hasOuterLabel: ((_a = options.pieSeriesName) === null || _a === void 0 ? void 0 : _a.visible) && ((_b = options.pieSeriesName) === null || _b === void 0 ? void 0 : _b.anchor) === 'outer',
            labels: seriesNameLabels,
            theme: dataLabelTheme.pieSeriesName,
        },
    ];
    return outerLabels.reduce((acc, cur) => {
        const { width, height } = acc;
        const { hasOuterLabel, labels, theme } = cur;
        if (hasOuterLabel) {
            const { maxLabelWidth, maxLabelHeight } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_0__.getMaxLabelSize)(labels, 0, (0,_helpers_style__WEBPACK_IMPORTED_MODULE_1__.getFont)(theme));
            return {
                width: Math.max(maxLabelWidth + _helpers_dataLabels__WEBPACK_IMPORTED_MODULE_2__.RADIUS_PADDING, width),
                height: Math.max(maxLabelHeight + _helpers_dataLabels__WEBPACK_IMPORTED_MODULE_2__.RADIUS_PADDING, height),
            };
        }
        return acc;
    }, { width: 0, height: 0 });
}
class PieSeries extends _component__WEBPACK_IMPORTED_MODULE_3__["default"] {
    constructor() {
        super(...arguments);
        this.models = { series: [] };
        this.activatedResponders = [];
        this.onMouseoutComponent = () => {
            this.eventBus.emit('seriesPointHovered', { models: [], name: this.alias || this.name });
            this.eventBus.emit('renderHoveredSeries', { models: [], name: this.alias || this.name });
            this.eventBus.emit('needDraw');
        };
        this.selectSeries = ({ seriesIndex, name }) => {
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_4__.isNumber)(seriesIndex) || (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_4__.isUndefined)(name) && name !== this.alias)) {
                return;
            }
            const model = this.responders[seriesIndex];
            if (!model) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_5__.message.SELECT_SERIES_API_INDEX_ERROR);
            }
            this.eventBus.emit('renderSelectedSeries', {
                models: this.getResponderModelsWithTheme([model], 'select'),
                name: this.name,
                alias: this.alias,
            });
            this.eventBus.emit('needDraw');
        };
        this.showTooltip = ({ seriesIndex, name }) => {
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_4__.isNumber)(seriesIndex) || (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_4__.isUndefined)(name) && name !== this.alias)) {
                return;
            }
            const models = [this.responders[seriesIndex]];
            if (!models.length) {
                return;
            }
            this.eventBus.emit('renderHoveredSeries', {
                models: this.getResponderModelsWithTheme(models, 'hover'),
                name: this.name,
                alias: this.alias,
            });
            this.activatedResponders = this.makeTooltipResponder(models);
            this.eventBus.emit('seriesPointHovered', {
                models: this.activatedResponders,
                name: this.alias || this.name,
            });
            this.eventBus.emit('needDraw');
        };
    }
    initUpdate(delta) {
        if (!this.drawModels) {
            return;
        }
        let currentDegree;
        const index = this.models.series.findIndex(({ clockwise, degree: { start, end }, totalAngle }) => {
            currentDegree = clockwise ? totalAngle * delta : _helpers_sector__WEBPACK_IMPORTED_MODULE_6__.DEGREE_360 - totalAngle * delta;
            return (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_6__.withinRadian)(clockwise, start, end, currentDegree);
        });
        this.syncEndAngle(index < 0 ? this.models.series.length : index);
        if (~index) {
            this.drawModels.series[index].degree.end = currentDegree;
        }
    }
    syncEndAngle(index) {
        if (index < 1) {
            return;
        }
        for (let i = 0; i < index; i += 1) {
            const prevTargetEndDegree = this.models.series[i].degree.end;
            if (this.drawModels.series[i].degree.end !== prevTargetEndDegree) {
                this.drawModels.series[i].degree.end = prevTargetEndDegree;
            }
        }
    }
    initialize(param) {
        var _a, _b;
        this.type = 'series';
        this.name = 'pie';
        this.alias = (_b = (_a = param) === null || _a === void 0 ? void 0 : _a.alias, (_b !== null && _b !== void 0 ? _b : ''));
        this.eventBus.on('selectSeries', this.selectSeries);
        this.eventBus.on('showTooltip', this.showTooltip);
        this.eventBus.on('hideTooltip', this.onMouseoutComponent);
    }
    render(chartState) {
        var _a, _b, _c, _d;
        const { layout, series, legend, options, nestedPieSeries, theme } = chartState;
        const categories = (_a = chartState.categories, (_a !== null && _a !== void 0 ? _a : []));
        if (!series.pie) {
            throw new Error(_message__WEBPACK_IMPORTED_MODULE_5__.message.noDataError(this.name));
        }
        const pieTheme = theme.series.pie;
        this.theme = this.alias ? pieTheme[this.alias] : pieTheme;
        this.rect = layout.plot;
        this.activeSeriesMap = (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_7__.getActiveSeriesMap)(legend);
        this.selectable = this.getSelectableOption(options);
        let seriesModel, tooltipDataModel;
        const dataLabelsOptions = (0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_2__.getDataLabelsOptions)(options, this.alias);
        if (nestedPieSeries) {
            const { data } = nestedPieSeries[this.alias];
            const pieAlias = Object.keys(nestedPieSeries);
            const pieIndex = pieAlias.findIndex((alias) => alias === this.alias);
            // check the data label of the last Pie series
            const lastAlias = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_4__.last)(pieAlias);
            const lastSeries = nestedPieSeries[lastAlias];
            const maxPieDataLabelSize = getMaxDataLabelSize(lastSeries.data.map(({ name }) => name), (0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_2__.getDataLabelsOptions)(options, lastAlias), this.theme.dataLabels);
            const renderOptionsMap = this.getRenderOptionsMap(options, pieAlias, maxPieDataLabelSize);
            seriesModel = this.renderPieModel(data, renderOptionsMap[this.alias], pieIndex);
            tooltipDataModel = (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_8__.makePieTooltipData)(data, (_b = categories) === null || _b === void 0 ? void 0 : _b[pieIndex]);
        }
        else {
            const pieData = (_c = series.pie) === null || _c === void 0 ? void 0 : _c.data;
            const { width, height } = getMaxDataLabelSize(pieData.map(({ name }) => name), dataLabelsOptions, this.theme.dataLabels);
            const renderOptions = this.makeRenderOptions(options, width, height);
            seriesModel = this.renderPieModel(pieData, renderOptions);
            tooltipDataModel = (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_8__.makePieTooltipData)(pieData, (_d = categories) === null || _d === void 0 ? void 0 : _d[0]);
        }
        this.models.series = seriesModel;
        if (!this.drawModels) {
            this.drawModels = {
                series: this.models.series.map((m) => (Object.assign(Object.assign({}, m), { degree: Object.assign(Object.assign({}, m.degree), { end: m.degree.start }) }))),
            };
        }
        if (dataLabelsOptions.visible) {
            const dataLabelData = seriesModel.map((m) => (Object.assign(Object.assign({}, m), { value: `${(0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_8__.pieTooltipLabelFormatter)(m.percentValue)}`, theme: this.theme.dataLabels })));
            this.renderDataLabels(dataLabelData, this.alias);
        }
        this.responders = seriesModel.map((m, index) => (Object.assign(Object.assign({}, m), { type: 'sector', radius: m.radius, seriesIndex: index, data: Object.assign(Object.assign({}, tooltipDataModel[index]), { percentValue: m.percentValue }), color: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_9__.getRGBA)(m.color, 1) })));
    }
    getRadiusRangeMap(options, pieAlias) {
        return pieAlias.reduce((acc, alias) => {
            var _a, _b;
            const seriesOptions = this.getOptions(options, alias).series;
            if ((_a = seriesOptions) === null || _a === void 0 ? void 0 : _a.radiusRange) {
                acc[alias] = (_b = seriesOptions) === null || _b === void 0 ? void 0 : _b.radiusRange;
            }
            return acc;
        }, {});
    }
    getRenderOptionsMap(options, pieAlias, maxPieDataLabelSize) {
        const renderOptionsMap = this.initRenderOptionsMap(options, pieAlias, maxPieDataLabelSize);
        const radiusRangeMap = this.getRadiusRangeMap(options, pieAlias);
        pieAlias.forEach((alias, pieIndex) => {
            const radiusRanges = Object.values(renderOptionsMap).map(({ radiusRange }) => radiusRange);
            renderOptionsMap[alias].radiusRange = getCalculatedRadiusRange({
                alias,
                renderOptions: renderOptionsMap[alias],
                radiusRangeMap,
                pieIndex,
                radiusRanges,
                totalPieAliasCount: pieAlias.length,
            });
        });
        return renderOptionsMap;
    }
    initRenderOptionsMap(options, pieAlias, { width, height }) {
        return pieAlias.reduce((acc, alias) => (Object.assign(Object.assign({}, acc), { [alias]: this.makeRenderOptions(this.getOptions(options, alias), width, height) })), {});
    }
    getOptions(chartOptions, alias) {
        var _a;
        const options = Object.assign({}, chartOptions);
        if (((_a = options) === null || _a === void 0 ? void 0 : _a.series) && alias) {
            options.series = Object.assign(Object.assign({}, options.series), options.series[alias]);
        }
        return options;
    }
    makeRenderOptions(options, maxDataLabelWidth = 0, maxDataLabelHeight = 0) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        const seriesOptions = options.series;
        const clockwise = (_b = (_a = seriesOptions) === null || _a === void 0 ? void 0 : _a.clockwise, (_b !== null && _b !== void 0 ? _b : true));
        const startAngle = (_e = (_d = (_c = seriesOptions) === null || _c === void 0 ? void 0 : _c.angleRange) === null || _d === void 0 ? void 0 : _d.start, (_e !== null && _e !== void 0 ? _e : _helpers_sector__WEBPACK_IMPORTED_MODULE_6__.DEGREE_0));
        const endAngle = (_h = (_g = (_f = seriesOptions) === null || _f === void 0 ? void 0 : _f.angleRange) === null || _g === void 0 ? void 0 : _g.end, (_h !== null && _h !== void 0 ? _h : _helpers_sector__WEBPACK_IMPORTED_MODULE_6__.DEGREE_360));
        const totalAngle = (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_8__.getTotalAngle)(clockwise, startAngle, endAngle);
        const isSemiCircular = (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_8__.isSemiCircle)(clockwise, startAngle, endAngle);
        const { width, height } = this.rect;
        const defaultRadius = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_6__.getDefaultRadius)(this.rect, isSemiCircular, maxDataLabelWidth, maxDataLabelHeight);
        const innerRadius = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_4__.calculateSizeWithPercentString)(defaultRadius, (_l = (_k = (_j = seriesOptions) === null || _j === void 0 ? void 0 : _j.radiusRange) === null || _k === void 0 ? void 0 : _k.inner, (_l !== null && _l !== void 0 ? _l : 0)));
        const outerRadius = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_4__.calculateSizeWithPercentString)(defaultRadius, (_p = (_o = (_m = seriesOptions) === null || _m === void 0 ? void 0 : _m.radiusRange) === null || _o === void 0 ? void 0 : _o.outer, (_p !== null && _p !== void 0 ? _p : (this.alias ? 0 : defaultRadius))));
        const cx = width / 2;
        const cy = isSemiCircular ? (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_8__.getSemiCircleCenterY)(this.rect.height, clockwise) : height / 2;
        return {
            clockwise,
            cx,
            cy,
            drawingStartAngle: startAngle - _helpers_sector__WEBPACK_IMPORTED_MODULE_6__.DEGREE_90,
            radiusRange: {
                inner: innerRadius,
                outer: outerRadius,
            },
            angleRange: {
                start: startAngle,
                end: endAngle,
            },
            totalAngle,
            defaultRadius,
        };
    }
    renderPieModel(seriesRawData, renderOptions, pieIndex) {
        const sectorModels = [];
        const total = seriesRawData.reduce((sum, { data }) => sum + ((data !== null && data !== void 0 ? data : 0)), 0);
        const { clockwise, cx, cy, drawingStartAngle, radiusRange: { inner, outer }, totalAngle, } = renderOptions;
        const defaultStartDegree = clockwise ? _helpers_sector__WEBPACK_IMPORTED_MODULE_6__.DEGREE_0 : _helpers_sector__WEBPACK_IMPORTED_MODULE_6__.DEGREE_360;
        const { lineWidth, strokeStyle } = this.theme;
        seriesRawData.forEach((rawData, seriesIndex) => {
            const color = this.alias
                ? this.getAliasSeriesColor(rawData, seriesRawData, pieIndex)
                : this.getSeriesColor(rawData);
            const { data, name } = rawData;
            if (data) {
                const degree = Math.max((data / total) * totalAngle, 1) * (clockwise ? 1 : -1);
                const percentValue = (data / total) * 100;
                const prevModel = sectorModels[sectorModels.length - 1];
                const startDegree = seriesIndex && prevModel ? prevModel.degree.end : defaultStartDegree;
                const endDegree = clockwise
                    ? Math.min(startDegree + degree, _helpers_sector__WEBPACK_IMPORTED_MODULE_6__.DEGREE_360)
                    : Math.max(startDegree + degree, _helpers_sector__WEBPACK_IMPORTED_MODULE_6__.DEGREE_0);
                sectorModels.push({
                    type: 'sector',
                    name,
                    color,
                    x: cx,
                    y: cy,
                    degree: {
                        start: startDegree,
                        end: endDegree,
                    },
                    radius: {
                        inner,
                        outer,
                    },
                    value: data,
                    style: [{ strokeStyle }],
                    lineWidth,
                    clockwise,
                    drawingStartAngle,
                    totalAngle,
                    percentValue,
                });
            }
        });
        return sectorModels;
    }
    makeTooltipResponder(responders) {
        return responders.map((responder) => (Object.assign(Object.assign({}, responder), (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_6__.getRadialAnchorPosition)((0,_helpers_sector__WEBPACK_IMPORTED_MODULE_6__.makeAnchorPositionParam)('center', this.models.series[responder.seriesIndex])))));
    }
    onMousemove({ responders }) {
        this.eventBus.emit('renderHoveredSeries', {
            models: this.getResponderModelsWithTheme(responders, 'hover'),
            name: this.alias || this.name,
        });
        this.activatedResponders = this.makeTooltipResponder(responders);
        this.eventBus.emit('seriesPointHovered', {
            models: this.activatedResponders,
            name: this.alias || this.name,
        });
        this.eventBus.emit('needDraw');
    }
    onClick({ responders }) {
        if (this.selectable) {
            this.eventBus.emit('renderSelectedSeries', {
                models: this.getResponderModelsWithTheme(responders, 'select'),
                name: this.name,
                alias: this.alias,
            });
            this.eventBus.emit('needDraw');
        }
    }
    getResponderModelsWithTheme(responders, type) {
        const theme = this.theme[type];
        const lineWidth = theme.lineWidth;
        const isSameLineWidth = this.theme.lineWidth === lineWidth;
        const thickness = isSameLineWidth ? 0 : lineWidth * 0.5;
        return responders.map((m) => {
            var _a, _b;
            return (Object.assign(Object.assign({}, m), { color: (_b = (_a = theme) === null || _a === void 0 ? void 0 : _a.color, (_b !== null && _b !== void 0 ? _b : m.color)), lineWidth, style: [
                    (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_4__.pick)(theme, 'strokeStyle', 'shadowBlur', 'shadowColor', 'shadowOffsetX', 'shadowOffsetY'),
                ], radius: {
                    inner: Math.max(m.radius.inner - thickness, 0),
                    outer: m.radius.outer + thickness,
                } }));
        });
    }
    getOpacity(active, selectedState) {
        const { select, areaOpacity } = this.theme;
        const { areaOpacity: selectedAreaOpacity, restSeries: { areaOpacity: restAreaOpacity }, } = select;
        const selectThemeOpacity = active ? selectedAreaOpacity : restAreaOpacity;
        return selectedState ? selectThemeOpacity : areaOpacity;
    }
    getIndexOfGroup(seriesRawData, parentName, name) {
        return seriesRawData
            .filter((datum) => parentName === datum.parentName)
            .findIndex((datum) => name === datum.name);
    }
    getSeriesColor(rawData) {
        const { color, name } = rawData;
        const active = this.activeSeriesMap[name];
        const opacity = this.getOpacity(active, this.hasActiveSeries());
        return (0,_helpers_color__WEBPACK_IMPORTED_MODULE_9__.getRGBA)(color, opacity);
    }
    getAliasSeriesColor(rawData, seriesRawData, pieIndex) {
        const { color, name } = rawData;
        const { select: { color: selectedColor }, } = this.theme;
        const { rootParentName, parentName } = rawData;
        const indexOfGroup = this.getIndexOfGroup(seriesRawData, parentName, name);
        const opacity = this.getAliasSeriesOpacity(rootParentName, parentName, pieIndex, indexOfGroup, name);
        const active = this.activeSeriesMap[(rootParentName !== null && rootParentName !== void 0 ? rootParentName : name)];
        const seriesColor = active ? (selectedColor !== null && selectedColor !== void 0 ? selectedColor : color) : color;
        return (0,_helpers_color__WEBPACK_IMPORTED_MODULE_9__.getRGBA)(seriesColor, opacity);
    }
    getAliasSeriesOpacity(rootParentName, parentName, pieIndex, indexOfGroup, name) {
        const active = this.activeSeriesMap[(rootParentName !== null && rootParentName !== void 0 ? rootParentName : name)];
        const opacity = this.getOpacity(active, this.hasActiveSeries());
        return pieIndex && parentName
            ? getPieSeriesOpacityByDepth(opacity, pieIndex, indexOfGroup)
            : opacity;
    }
    hasActiveSeries() {
        return Object.values(this.activeSeriesMap).some((elem) => !elem);
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/plot.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/plot.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Plot)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");



function getValidIndex(index, startIndex = 0) {
    return ~~index ? index - startIndex : index;
}
function validXPosition({ axisData, offsetSize, value, startIndex = 0 }) {
    const dataIndex = getValidIndex(value, startIndex);
    const x = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.getXPosition)(axisData, offsetSize, value, dataIndex);
    return x > 0 ? Math.min(offsetSize, x) : 0;
}
function getPlotAxisData(vertical, axes) {
    return vertical ? axes.xAxis : axes.yAxis;
}
class Plot extends _component__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor() {
        super(...arguments);
        this.models = { plot: [], line: [], band: [] };
        this.startIndex = 0;
    }
    initialize() {
        this.type = 'plot';
    }
    getPlotAxisSize(vertical) {
        return {
            offsetSize: vertical ? this.rect.width : this.rect.height,
            anchorSize: vertical ? this.rect.height : this.rect.width,
        };
    }
    renderLines(axes, categories, lines = []) {
        return lines.map(({ value, color }) => {
            const { offsetSize } = this.getPlotAxisSize(true);
            const position = validXPosition({
                axisData: getPlotAxisData(true, axes),
                offsetSize,
                value,
                categories,
                startIndex: this.startIndex,
            });
            return this.makeLineModel(true, position, { color });
        });
    }
    renderBands(axes, categories, bands = []) {
        const { offsetSize, anchorSize } = this.getPlotAxisSize(true);
        return bands.map(({ range, color }) => {
            const [start, end] = range.map((value) => validXPosition({
                axisData: getPlotAxisData(true, axes),
                offsetSize,
                value,
                categories,
                startIndex: this.startIndex,
            }));
            return {
                type: 'rect',
                x: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.crispPixel)(start),
                y: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.crispPixel)(0),
                width: end - start,
                height: anchorSize,
                color,
            };
        });
    }
    renderPlotLineModels(relativePositions, vertical, options = {}) {
        var _a, _b, _c;
        const { size, startPosition, axes } = options;
        const { lineColor: color, lineWidth, dashSegments } = this.theme[vertical ? 'vertical' : 'horizontal'];
        const tickInterval = ((_c = (vertical ? (_a = axes) === null || _a === void 0 ? void 0 : _a.xAxis : (_b = axes) === null || _b === void 0 ? void 0 : _b.yAxis)) === null || _c === void 0 ? void 0 : _c.tickInterval) || 1;
        return relativePositions
            .filter((_, idx) => !(idx % tickInterval))
            .map((position) => this.makeLineModel(vertical, position, { color, lineWidth, dashSegments }, (size !== null && size !== void 0 ? size : this.rect.width), (startPosition !== null && startPosition !== void 0 ? startPosition : 0)));
    }
    renderPlotsForCenterYAxis(axes) {
        const { xAxisHalfSize, secondStartX, yAxisHeight } = axes.centerYAxis;
        // vertical
        const xAxisTickCount = axes.xAxis.tickCount;
        const verticalLines = [
            ...this.renderPlotLineModels((0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.makeTickPixelPositions)(xAxisHalfSize, xAxisTickCount), true),
            ...this.renderPlotLineModels((0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.makeTickPixelPositions)(xAxisHalfSize, xAxisTickCount, secondStartX), true),
        ];
        // horizontal
        const yAxisTickCount = axes.yAxis.tickCount;
        const yAxisTickPixelPositions = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.makeTickPixelPositions)(yAxisHeight, yAxisTickCount);
        const horizontalLines = [
            ...this.renderPlotLineModels(yAxisTickPixelPositions, false, { size: xAxisHalfSize }),
            ...this.renderPlotLineModels(yAxisTickPixelPositions, false, {
                size: xAxisHalfSize,
                startPosition: secondStartX,
            }),
        ];
        return [...verticalLines, ...horizontalLines];
    }
    renderPlots(axes, scale) {
        const vertical = true;
        return axes.centerYAxis
            ? this.renderPlotsForCenterYAxis(axes)
            : [
                ...this.renderPlotLineModels(this.getHorizontalTickPixelPositions(axes), !vertical, {
                    axes,
                }),
                ...this.renderPlotLineModels(this.getVerticalTickPixelPositions(axes, scale), vertical, {
                    axes,
                }),
            ];
    }
    getVerticalTickPixelPositions(axes, scale) {
        var _a, _b, _c, _d, _e, _f, _g;
        const { offsetSize } = this.getPlotAxisSize(true);
        const axisData = getPlotAxisData(true, axes);
        if ((_a = axisData) === null || _a === void 0 ? void 0 : _a.labelRange) {
            const sizeRatio = (_d = (_c = (_b = scale) === null || _b === void 0 ? void 0 : _b.xAxis) === null || _c === void 0 ? void 0 : _c.sizeRatio, (_d !== null && _d !== void 0 ? _d : 1));
            const positionRatio = (_g = (_f = (_e = scale) === null || _e === void 0 ? void 0 : _e.xAxis) === null || _f === void 0 ? void 0 : _f.positionRatio, (_g !== null && _g !== void 0 ? _g : 0));
            const axisSizeAppliedRatio = offsetSize * sizeRatio;
            const additional = offsetSize * positionRatio;
            return (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.makeTickPixelPositions)(axisSizeAppliedRatio, axisData.tickCount, additional);
        }
        return (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.makeTickPixelPositions)(offsetSize, axisData.tickCount);
    }
    getHorizontalTickPixelPositions(axes) {
        const { offsetSize } = this.getPlotAxisSize(false);
        const axisData = getPlotAxisData(false, axes);
        return (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.makeTickPixelPositions)(offsetSize, axisData.tickCount);
    }
    renderPlotBackgroundRect() {
        return Object.assign(Object.assign({ type: 'rect', x: 0, y: 0 }, (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.pick)(this.rect, 'width', 'height')), { color: this.theme.backgroundColor });
    }
    render(state) {
        var _a, _b, _c;
        const { layout, axes, plot, zoomRange, theme, scale } = state;
        if (!plot) {
            return;
        }
        this.rect = layout.plot;
        this.startIndex = (_b = (_a = zoomRange) === null || _a === void 0 ? void 0 : _a[0], (_b !== null && _b !== void 0 ? _b : 0));
        this.theme = theme.plot;
        const categories = (_c = state.categories, (_c !== null && _c !== void 0 ? _c : []));
        const { lines, bands, visible } = plot;
        this.models.line = this.renderLines(axes, categories, lines);
        this.models.band = this.renderBands(axes, categories, bands);
        if (visible) {
            this.models.plot = [this.renderPlotBackgroundRect(), ...this.renderPlots(axes, scale)];
        }
    }
    makeLineModel(vertical, position, { color, dashSegments = [], lineWidth = 1, }, sizeWidth, xPos = 0) {
        const x = vertical ? (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.crispPixel)(position) : (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.crispPixel)(xPos);
        const y = vertical ? (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.crispPixel)(0) : (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_0__.crispPixel)(position);
        const width = vertical ? 0 : (sizeWidth !== null && sizeWidth !== void 0 ? sizeWidth : this.rect.width);
        const height = vertical ? this.rect.height : 0;
        return {
            type: 'line',
            x,
            y,
            x2: x + width,
            y2: y + height,
            strokeStyle: color,
            lineWidth,
            dashSegments,
        };
    }
    beforeDraw(painter) {
        painter.ctx.strokeStyle = 'rgba(0, 0, 0, 0.05)';
        painter.ctx.lineWidth = 1;
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/radarSeries.js":
/*!************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/radarSeries.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RadarSeries)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_legend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/legend */ "./node_modules/@toast-ui/chart/dist/esm/helpers/legend.js");
/* harmony import */ var _helpers_sector__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/sector */ "./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js");
/* harmony import */ var _helpers_color__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _helpers_theme__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/theme */ "./node_modules/@toast-ui/chart/dist/esm/helpers/theme.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");









const NONE_AREA_OPACITY = 0;
const seriesOpacity = {
    INACTIVE: 0.2,
    ACTIVE: 1,
};
class RadarSeries extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = { area: [], line: [], dot: [] };
        this.activatedResponders = [];
        this.onMouseoutComponent = () => {
            this.eventBus.emit('seriesPointHovered', { models: [], name: this.name });
            this.eventBus.emit('renderHoveredSeries', {
                models: [],
                name: this.name,
            });
            this.eventBus.emit('needDraw');
        };
        this.selectSeries = ({ index, seriesIndex, state }) => {
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(index) || !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(seriesIndex)) {
                return;
            }
            const { name } = state.series.radar.data[seriesIndex];
            const model = this.responders.filter(({ name: dataName }) => dataName === name)[index];
            if (!model) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.SELECT_SERIES_API_INDEX_ERROR);
            }
            this.eventBus.emit('renderSelectedSeries', {
                models: this.getRespondersWithTheme([model], 'select'),
                name: this.name,
            });
            this.eventBus.emit('needDraw');
        };
        this.showTooltip = ({ index, seriesIndex, state }) => {
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(index) || !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(seriesIndex)) {
                return;
            }
            const { name } = state.series.radar.data[seriesIndex];
            const models = [this.responders.filter(({ name: dataName }) => dataName === name)[index]];
            if (!models.length) {
                return;
            }
            this.eventBus.emit('renderHoveredSeries', {
                models: this.getRespondersWithTheme(models, 'hover'),
                name: this.name,
            });
            this.activatedResponders = models;
            this.eventBus.emit('seriesPointHovered', { models: this.activatedResponders, name: this.name });
            this.eventBus.emit('needDraw');
        };
    }
    initialize() {
        this.type = 'series';
        this.name = 'radar';
        this.eventBus.on('selectSeries', this.selectSeries);
        this.eventBus.on('showTooltip', this.showTooltip);
        this.eventBus.on('hideTooltip', this.onMouseoutComponent);
    }
    render(state) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const { layout, radialAxes, series, legend, options, theme, scale } = state;
        if (!series.radar) {
            throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.noDataError(this.name));
        }
        this.theme = theme.series.radar;
        this.rect = layout.plot;
        this.activeSeriesMap = (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_3__.getActiveSeriesMap)(legend);
        this.selectable = this.getSelectableOption(options);
        const categories = state.categories;
        const { axisSize, centerX, centerY } = radialAxes.verticalAxis;
        const { limit, stepSize } = scale.verticalAxis;
        const labels = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_4__.makeLabelsFromLimit)(limit, stepSize);
        const { min, max } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_5__.getLimitOnAxis)(labels);
        const renderOptions = {
            categories,
            degree: _helpers_sector__WEBPACK_IMPORTED_MODULE_6__.DEGREE_360 / categories.length,
            centerX,
            centerY,
            showArea: (_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b.showArea, (_c !== null && _c !== void 0 ? _c : false)),
            ratio: axisSize / (max - min),
        };
        const radarData = (_d = series.radar) === null || _d === void 0 ? void 0 : _d.data;
        const radarPointsData = this.makeRadarPointsData(radarData, renderOptions);
        const circleModel = this.renderDotModels(radarPointsData);
        this.models.area = ((_f = (_e = options) === null || _e === void 0 ? void 0 : _e.series) === null || _f === void 0 ? void 0 : _f.showArea) ? this.renderAreaModels(radarPointsData) : [];
        this.models.line = this.renderLineModels(radarPointsData);
        this.models.dot = ((_h = (_g = options) === null || _g === void 0 ? void 0 : _g.series) === null || _h === void 0 ? void 0 : _h.showDot) ? circleModel : [];
        if (!this.drawModels) {
            this.drawModels = {
                area: this.initDrawModels('area', centerX, centerY),
                line: this.initDrawModels('line', centerX, centerY),
                dot: this.models.dot.map((m) => (Object.assign(Object.assign({}, m), { x: centerX, y: centerY }))),
            };
        }
        const tooltipDataArr = this.makeTooltipModel(circleModel, categories);
        this.responders = circleModel.map((m, index) => (Object.assign(Object.assign({}, m), { data: tooltipDataArr[index], color: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_7__.getRGBA)(m.color, 1) })));
    }
    initDrawModels(modelName, centerX, centerY) {
        return this.models[modelName].map((m) => {
            var _a;
            return (Object.assign(Object.assign({}, m), { distances: (_a = m.distances) === null || _a === void 0 ? void 0 : _a.map(() => 0), points: m.points.map(() => ({ x: centerX, y: centerY })) }));
        });
    }
    makeTooltipModel(circleModel, categories) {
        return circleModel.map(({ name, color, value, index }) => ({
            label: name,
            color,
            value,
            category: categories[index],
        }));
    }
    getRespondersWithTheme(responders, type) {
        const { radius, borderWidth, borderColor, color } = this.theme[type].dot;
        return responders.map((responder) => {
            const modelColor = (color !== null && color !== void 0 ? color : responder.color);
            return Object.assign(Object.assign({}, responder), { radius, color: modelColor, borderColor: (borderColor !== null && borderColor !== void 0 ? borderColor : (0,_helpers_color__WEBPACK_IMPORTED_MODULE_7__.getRGBA)(modelColor, 0.5)), borderWidth });
        });
    }
    onClick({ responders }) {
        if (this.selectable) {
            this.eventBus.emit('renderSelectedSeries', {
                models: this.getRespondersWithTheme(responders, 'select'),
                name: this.name,
            });
            this.eventBus.emit('needDraw');
        }
    }
    onMousemove({ responders }) {
        this.eventBus.emit('renderHoveredSeries', {
            models: this.getRespondersWithTheme(responders, 'hover'),
            name: this.name,
        });
        this.activatedResponders = responders;
        this.eventBus.emit('seriesPointHovered', { models: this.activatedResponders, name: this.name });
        this.eventBus.emit('needDraw');
    }
    makeRadarPointsData(seriesData, renderOptions) {
        const { centerX, centerY, degree, ratio, showArea } = renderOptions;
        return seriesData.map(({ data, color: seriesColor, name }) => {
            const radarPoints = data.reduce((acc, value, index) => {
                if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(value)) {
                    return {
                        distances: [...acc.distances, 0],
                        linePoints: [...acc.linePoints, null],
                        areaPoints: [...acc.areaPoints, { x: centerX, y: centerY }],
                    };
                }
                const distance = value * ratio;
                const point = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_6__.getRadialPosition)(centerX, centerY, distance, (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_6__.calculateDegreeToRadian)(degree * index));
                return {
                    distances: [...acc.distances, distance],
                    linePoints: [...acc.linePoints, point],
                    areaPoints: [...acc.areaPoints, point],
                };
            }, { linePoints: [], distances: [], areaPoints: [] });
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(data[0]) && !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(data[data.length - 1])) {
                radarPoints.linePoints.push(radarPoints.linePoints[0]);
                radarPoints.areaPoints.push(radarPoints.areaPoints[0]);
            }
            return Object.assign(Object.assign({ name,
                seriesColor,
                data }, radarPoints), this.getSeriesColor(showArea, seriesColor, name));
        });
    }
    renderAreaModels(radarPointsData) {
        return radarPointsData.map(({ distances, areaPoints, name, fillColor, seriesColor }) => ({
            type: 'areaPoints',
            name,
            distances,
            points: areaPoints,
            fillColor,
            color: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_7__.getRGBA)(seriesColor, 0),
            lineWidth: 0,
        }));
    }
    renderLineModels(radarPointsData) {
        const { lineWidth, dashSegments } = this.theme;
        return radarPointsData.map(({ distances, linePoints, name, lineColor }) => ({
            type: 'linePoints',
            lineWidth: (lineWidth !== null && lineWidth !== void 0 ? lineWidth : _helpers_theme__WEBPACK_IMPORTED_MODULE_8__.radarDefault.LINE_WIDTH),
            name,
            distances,
            points: linePoints,
            color: lineColor,
            dashSegments,
        }));
    }
    renderDotModels(radarPointsData) {
        const { radius, color: dotColor } = this.theme.dot;
        const result = [];
        radarPointsData.forEach(({ linePoints, lineColor, name, data }, seriesIndex) => linePoints.slice(0, linePoints.length - 1).forEach((point, index) => {
            var _a;
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(point)) {
                result.push(Object.assign(Object.assign({ type: 'circle' }, point), { radius, color: (dotColor !== null && dotColor !== void 0 ? dotColor : lineColor), style: [{ strokeStyle: 'rgba(0, 0, 0, 0)' }], name,
                    seriesIndex,
                    index, value: (_a = data) === null || _a === void 0 ? void 0 : _a[index] }));
            }
        }));
        return result;
    }
    getSeriesColor(showArea, seriesColor, name) {
        const active = this.activeSeriesMap[name];
        const { select, areaOpacity } = this.theme;
        const selected = Object.values(this.activeSeriesMap).some((elem) => !elem);
        const color = (0,_helpers_color__WEBPACK_IMPORTED_MODULE_7__.getRGBA)(seriesColor, active ? seriesOpacity.ACTIVE : seriesOpacity.INACTIVE);
        let fillOpacity = NONE_AREA_OPACITY;
        if (showArea) {
            const selectedAreaOpacity = active ? select.areaOpacity : select.restSeries.areaOpacity;
            fillOpacity = selected ? selectedAreaOpacity : areaOpacity;
        }
        return { lineColor: color, fillColor: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_7__.getRGBA)(color, fillOpacity) };
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/radialAxis.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/radialAxis.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RadialAxis)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_sector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/sector */ "./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_validation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/validation */ "./node_modules/@toast-ui/chart/dist/esm/helpers/validation.js");





const RECT_SIZE = 4;
const HALF_TICK = 5;
function hasNeedRender(index, pointOnColumn, labelInterval, innerRadius, outerRadius) {
    return !pointOnColumn && index === 0
        ? false
        : !(index % labelInterval) &&
            ((pointOnColumn && innerRadius <= outerRadius) ||
                (!pointOnColumn && innerRadius < outerRadius));
}
class RadialAxis extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = {
            verticalAxisLabel: [],
            circularAxisLabel: [],
            dot: [],
            line: [],
            tick: [],
        };
    }
    initialize(initParam) {
        var _a, _b;
        this.type = 'axis';
        this.name = (_b = (_a = initParam) === null || _a === void 0 ? void 0 : _a.name, (_b !== null && _b !== void 0 ? _b : 'radial'));
    }
    render({ layout, radialAxes, theme, series }) {
        this.isShow = !(0,_helpers_validation__WEBPACK_IMPORTED_MODULE_1__.isNoData)(series);
        this.rect = layout.plot;
        if (!radialAxes) {
            return;
        }
        this.circularAxisTheme = theme.circularAxis;
        const { circularAxis, verticalAxis } = radialAxes;
        if (verticalAxis) {
            this.verticalAxisTheme = theme.verticalAxis;
            this.models.verticalAxisLabel = this.renderVerticalAxisLabel(verticalAxis);
        }
        this.models.circularAxisLabel = this.renderCircularAxisLabel(circularAxis);
        if (this.name === 'gauge') {
            this.models.line = this.renderArcLine(circularAxis);
            this.models.tick = this.renderTick(circularAxis);
        }
        else {
            this.models.dot = this.renderDotModel(circularAxis);
        }
    }
    getBubbleShadowStyle() {
        const { visible, shadowColor, shadowOffsetX, shadowOffsetY, shadowBlur, } = this.verticalAxisTheme.label.textBubble;
        return visible && shadowColor
            ? [
                {
                    shadowColor,
                    shadowOffsetX,
                    shadowOffsetY,
                    shadowBlur,
                },
            ]
            : null;
    }
    renderVerticalAxisLabel(verticalAxis) {
        const { radius: { ranges, outer }, label: { labels, interval, maxWidth, maxHeight, margin, align }, angle: { start }, pointOnColumn, centerX, centerY, tickDistance, } = verticalAxis;
        const labelAdjustment = pointOnColumn ? tickDistance / 2 : 0;
        const font = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_2__.getTitleFontString)(this.verticalAxisTheme.label);
        const { visible: textBubbleVisible, backgroundColor, borderRadius, borderColor, borderWidth, paddingX, paddingY, } = this.verticalAxisTheme.label.textBubble;
        const labelPaddingX = textBubbleVisible ? paddingX : 0;
        const labelPaddingY = textBubbleVisible ? paddingY : 0;
        const width = maxWidth + labelPaddingX * 2 - margin;
        const height = maxHeight + labelPaddingY * 2;
        const fontColor = this.verticalAxisTheme.label.color;
        return ranges.reduce((acc, radius, index) => {
            const { x, y } = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.getRadialPosition)(centerX, centerY, radius - labelAdjustment, (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.calculateDegreeToRadian)(start));
            const needRender = hasNeedRender(index, pointOnColumn, interval, radius, outer);
            let posX = x + margin;
            let labelPosX = x + margin + labelPaddingX;
            if (align === 'center') {
                posX = x - margin - width / 2;
                labelPosX = x - margin;
            }
            else if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_4__.includes)(['right', 'end'], align)) {
                posX = x - margin - width;
                labelPosX = x - margin - labelPaddingX;
            }
            return needRender
                ? [
                    ...acc,
                    {
                        type: 'bubbleLabel',
                        rotationPosition: { x, y },
                        radian: (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.calculateDegreeToRadian)(start, 0),
                        bubble: {
                            x: posX,
                            y: y - height / 2,
                            width,
                            height,
                            align,
                            radius: borderRadius,
                            fill: backgroundColor,
                            lineWidth: borderWidth,
                            strokeStyle: borderColor,
                            style: this.getBubbleShadowStyle(),
                        },
                        label: {
                            text: labels[index],
                            x: labelPosX,
                            y,
                            style: [{ font, fillStyle: fontColor, textAlign: align, textBaseline: 'middle' }],
                        },
                    },
                ]
                : acc;
        }, []);
    }
    renderDotModel(circularAxis) {
        const { angle: { central, drawingStart }, label: { labels, interval }, radius: { outer }, centerX, centerY, clockwise, } = circularAxis;
        const { dotColor } = this.circularAxisTheme;
        return labels.reduce((acc, cur, index) => {
            const startDegree = drawingStart + central * index * (clockwise ? 1 : -1);
            const { x, y } = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.getRadialPosition)(centerX, centerY, outer, (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.calculateDegreeToRadian)((0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.calculateValidAngle)(startDegree)));
            return index % interval === 0
                ? [
                    ...acc,
                    {
                        type: 'rect',
                        color: dotColor,
                        width: RECT_SIZE,
                        height: RECT_SIZE,
                        x: x - RECT_SIZE / 2,
                        y: y - RECT_SIZE / 2,
                    },
                ]
                : acc;
        }, []);
    }
    renderCircularAxisLabel(circularAxis) {
        const { centerX, centerY, clockwise, label: { labels, interval, margin, maxHeight }, angle: { drawingStart, central }, radius: { outer }, } = circularAxis;
        const radius = outer + (margin + maxHeight / 2) * (this.name === 'gauge' ? -1 : 1);
        const labelTheme = this.circularAxisTheme.label;
        const font = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_2__.getTitleFontString)(labelTheme);
        const degree = central * (clockwise ? 1 : -1);
        return labels.reduce((acc, text, index) => {
            const startDegree = drawingStart + degree * index;
            const validStartAngle = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.calculateValidAngle)(startDegree);
            return index % interval === 0
                ? [
                    ...acc,
                    Object.assign({ type: 'label', style: [
                            { textAlign: 'center', textBaseline: 'middle', font, fillStyle: labelTheme.color },
                        ], text }, (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.getRadialPosition)(centerX, centerY, radius, (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.calculateDegreeToRadian)(validStartAngle))),
                ]
                : acc;
        }, []);
    }
    renderTick(circularAxis) {
        const { centerX, centerY, tickInterval, clockwise, angle: { central, drawingStart }, label: { labels }, radius: { outer }, } = circularAxis;
        const { strokeStyle, lineWidth } = this.circularAxisTheme.tick;
        return labels.reduce((acc, cur, index) => {
            const startDegree = drawingStart + central * index * (clockwise ? 1 : -1);
            const { x, y } = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.getRadialPosition)(centerX, centerY, outer - HALF_TICK, (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.calculateDegreeToRadian)((0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.calculateValidAngle)(startDegree)));
            const { x: x2, y: y2 } = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.getRadialPosition)(centerX, centerY, outer + HALF_TICK, (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.calculateDegreeToRadian)((0,_helpers_sector__WEBPACK_IMPORTED_MODULE_3__.calculateValidAngle)(startDegree)));
            return index % tickInterval === 0
                ? [
                    ...acc,
                    {
                        type: 'line',
                        lineWidth,
                        strokeStyle,
                        x,
                        y,
                        x2,
                        y2,
                    },
                ]
                : acc;
        }, []);
    }
    renderArcLine(circularAxis) {
        const { centerX, centerY, clockwise, angle: { start, end, total }, radius: { outer }, } = circularAxis;
        const { strokeStyle, lineWidth } = this.circularAxisTheme;
        return total === _helpers_sector__WEBPACK_IMPORTED_MODULE_3__.DEGREE_360
            ? [
                {
                    type: 'circle',
                    x: centerX,
                    y: centerY,
                    radius: outer,
                    borderWidth: lineWidth,
                    borderColor: strokeStyle,
                    color: 'rgba(0, 0, 0, 0)',
                },
            ]
            : [
                {
                    type: 'arc',
                    borderWidth: lineWidth,
                    borderColor: strokeStyle,
                    x: centerX,
                    y: centerY,
                    angle: { start, end },
                    drawingStartAngle: _helpers_sector__WEBPACK_IMPORTED_MODULE_3__.DEGREE_NEGATIVE_90,
                    radius: outer,
                    clockwise,
                },
            ];
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/radialBarSeries.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/radialBarSeries.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RadialBarSeries)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");
/* harmony import */ var _helpers_responders__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/responders */ "./node_modules/@toast-ui/chart/dist/esm/helpers/responders.js");
/* harmony import */ var _helpers_sector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/sector */ "./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js");
/* harmony import */ var _helpers_legend__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/legend */ "./node_modules/@toast-ui/chart/dist/esm/helpers/legend.js");
/* harmony import */ var _helpers_dataLabels__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/helpers/dataLabels.js");
/* harmony import */ var _helpers_color__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../helpers/color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");
/* harmony import */ var _helpers_pieSeries__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/pieSeries */ "./node_modules/@toast-ui/chart/dist/esm/helpers/pieSeries.js");
/* harmony import */ var _helpers_validation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/validation */ "./node_modules/@toast-ui/chart/dist/esm/helpers/validation.js");










class RadialBarSeries extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = {};
        this.activatedResponders = [];
        this.eventDetectType = 'point';
        this.onMouseoutComponent = () => {
            this.eventBus.emit('seriesPointHovered', { models: [], name: this.name });
            this.eventBus.emit('renderHoveredSeries', { models: [], name: this.name });
            this.eventBus.emit('needDraw');
        };
        this.selectSeries = (info) => {
            var _a;
            const { index, seriesIndex } = info;
            const isAvailable = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(index) && (this.eventDetectType === 'grouped' || (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(seriesIndex));
            if (!isAvailable) {
                return;
            }
            const models = this.eventDetectType === 'grouped'
                ? [
                    ...this.getGroupedSector([this.responders[index]], 'select'),
                    ...this.getRadialBarSectorModelsFromResponders([this.responders[index]]),
                ]
                : (_a = this.getResponderModelsWithTheme([this.tooltipSectorMap[index][seriesIndex]], 'select'), (_a !== null && _a !== void 0 ? _a : []));
            if (!models.length) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.SELECT_SERIES_API_INDEX_ERROR);
            }
            this.eventBus.emit('renderSelectedSeries', {
                models: models,
                name: this.name,
                eventDetectType: this.eventDetectType,
            });
            this.eventBus.emit('needDraw');
        };
        this.showTooltip = (info) => {
            const { index, seriesIndex } = info;
            if (!(0,_helpers_validation__WEBPACK_IMPORTED_MODULE_3__.isAvailableShowTooltipInfo)(info, this.eventDetectType, 'radialBar')) {
                return;
            }
            const models = this.eventDetectType === 'grouped'
                ? this.getGroupedSector([this.responders[index]], 'hover')
                : this.getResponderModelsWithTheme([this.tooltipSectorMap[index][seriesIndex]], 'hover');
            if (!models.length) {
                return;
            }
            this.eventBus.emit('renderHoveredSeries', {
                models,
                name: this.name,
                eventDetectType: this.eventDetectType,
            });
            this.activatedResponders =
                this.eventDetectType === 'grouped' ? this.tooltipSectorMap[index] : models;
            this.eventBus.emit('seriesPointHovered', { models: this.activatedResponders, name: this.name });
            this.eventBus.emit('needDraw');
        };
    }
    initUpdate(delta) {
        if (!this.drawModels) {
            return;
        }
        const { angle: { start: startAngle, total: totalAngle }, } = this.circularAxis;
        let currentDegree;
        Object.keys(this.models).forEach((category) => {
            const index = this.models[category].findIndex(({ clockwise, degree: { start, end } }) => {
                currentDegree = clockwise
                    ? startAngle + totalAngle * delta
                    : startAngle - totalAngle * delta;
                return (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_4__.withinRadian)(clockwise, start, end, currentDegree);
            });
            this.syncEndAngle(index < 0 ? this.models[category].length : index, category);
            if (index !== -1) {
                this.drawModels[category][index].degree.end = currentDegree;
            }
        });
    }
    syncEndAngle(index, category) {
        if (index < 1) {
            return;
        }
        for (let i = 0; i < index; i += 1) {
            const prevTargetEndDegree = this.models[category][i].degree.end;
            if (this.drawModels[category][i].degree.end !== prevTargetEndDegree) {
                this.drawModels[category][i].degree.end = prevTargetEndDegree;
            }
        }
    }
    initialize() {
        this.type = 'series';
        this.name = 'radialBar';
        this.eventBus.on('selectSeries', this.selectSeries);
        this.eventBus.on('showTooltip', this.showTooltip);
        this.eventBus.on('hideTooltip', this.onMouseoutComponent);
    }
    render(chartState) {
        var _a, _b;
        const { layout, series, legend, options, theme, stackSeries, scale, radialAxes } = chartState;
        const categories = (_a = chartState.categories, (_a !== null && _a !== void 0 ? _a : []));
        if (!series.radialBar || !stackSeries.radialBar) {
            throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.noDataError(this.name));
        }
        this.theme = theme.series.radialBar;
        this.rect = layout.plot;
        this.activeSeriesMap = (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_5__.getActiveSeriesMap)(legend);
        this.selectable = this.getSelectableOption(options);
        this.setEventDetectType(options);
        const initialCategoryMap = categories.reduce((acc, category) => {
            if (!acc[category]) {
                acc[category] = [];
            }
            return acc;
        }, {});
        const seriesData = series.radialBar.data;
        this.circularAxis = radialAxes.circularAxis;
        const verticalAxisData = radialAxes.verticalAxis;
        const renderOptions = this.makeRenderOptions(verticalAxisData, scale.circularAxis, (_b = options) === null || _b === void 0 ? void 0 : _b.series);
        const { categoryMap, seriesModels } = this.makeSeriesModelData(seriesData, stackSeries.radialBar.stackData, renderOptions, initialCategoryMap);
        const tooltipData = this.makeTooltipData(seriesModels, categories);
        this.models = categoryMap;
        if (!this.drawModels) {
            this.initDrawModels(categoryMap);
        }
        if ((0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_6__.getDataLabelsOptions)(options, this.name).visible) {
            const dataLabelData = seriesModels.reduce((acc, data) => {
                return [...acc, Object.assign(Object.assign({}, data), { type: 'sector', theme: this.theme.dataLabels })];
            }, []);
            this.renderDataLabels(dataLabelData);
        }
        this.tooltipSectorMap = this.makeTooltipSectorMap(seriesModels, tooltipData);
        this.responders = this.makeResponders(verticalAxisData.radius.ranges, seriesModels, renderOptions, categories, tooltipData);
    }
    initDrawModels(categoryMap) {
        this.drawModels = {};
        Object.keys(categoryMap).forEach((category) => {
            this.drawModels[category] = categoryMap[category].map((m) => (Object.assign(Object.assign({}, m), { degree: Object.assign(Object.assign({}, m.degree), { end: m.degree.start }) })));
        });
    }
    makeResponders(radiusRanges, seriesModels, renderOptions, categories, tooltipData) {
        return this.eventDetectType === 'grouped'
            ? (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_7__.makeGroupedSectorResponderModel)(radiusRanges, renderOptions, categories)
            : seriesModels.map((m, index) => (Object.assign(Object.assign({}, m), { data: Object.assign({}, tooltipData[index]) })));
    }
    makeTooltipSectorMap(seriesModels, tooltipData) {
        return seriesModels.reduce((acc, cur, index) => {
            const categoryIndex = cur.index;
            if (!acc[categoryIndex]) {
                acc[categoryIndex] = [];
            }
            acc[categoryIndex].push(Object.assign(Object.assign({}, cur), { data: Object.assign({}, tooltipData[index]) }));
            return acc;
        }, {});
    }
    setEventDetectType(options) {
        var _a, _b;
        if ((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b.eventDetectType) {
            this.eventDetectType = options.series.eventDetectType;
        }
    }
    getBarWidth(tickDistance, axisSize) {
        const { barWidth } = this.theme;
        const DEFAULT_PADDING = 5;
        return barWidth
            ? Math.min(tickDistance, (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.calculateSizeWithPercentString)(axisSize, barWidth))
            : tickDistance - DEFAULT_PADDING * 2;
    }
    makeRenderOptions({ axisSize, centerX, centerY, tickDistance, radius: { ranges }, angle: { start, end }, }, scale, options) {
        var _a, _b;
        const { limit: { max }, stepSize, } = scale;
        const clockwise = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.clockwise, (_b !== null && _b !== void 0 ? _b : true));
        const totalAngle = (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_8__.getTotalAngle)(clockwise, start, end);
        const barWidth = this.getBarWidth(tickDistance, axisSize);
        const padding = (tickDistance - barWidth) / 2;
        const scaleMaxLimitValue = max + (totalAngle < _helpers_sector__WEBPACK_IMPORTED_MODULE_4__.DEGREE_360 ? _helpers_sector__WEBPACK_IMPORTED_MODULE_4__.DEGREE_0 : stepSize);
        return {
            clockwise,
            centerX,
            centerY,
            radiusRanges: (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_4__.getRadiusRanges)(ranges, padding),
            angleRange: {
                start,
                end,
            },
            totalAngle,
            scaleMaxLimitValue,
            startAngle: start,
        };
    }
    makeSeriesModelData(seriesData, stackSeriesData, renderOptions, initialCategoryMap) {
        const { clockwise, centerX, centerY, radiusRanges, totalAngle, scaleMaxLimitValue, startAngle, } = renderOptions;
        const defaultStartDegree = startAngle;
        const { lineWidth, strokeStyle } = this.theme;
        const sectorModels = [];
        const categories = Object.keys(initialCategoryMap);
        const categoryMap = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(initialCategoryMap);
        stackSeriesData.forEach(({ values }, categoryIndex) => {
            const { inner, outer } = radiusRanges[categoryIndex];
            values.forEach((value, seriesIndex) => {
                if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(value)) {
                    const degree = Math.max((value / scaleMaxLimitValue) * totalAngle, 1) * (clockwise ? 1 : -1);
                    const prevModel = sectorModels[sectorModels.length - 1];
                    const startDegree = seriesIndex && prevModel ? prevModel.degree.end : defaultStartDegree;
                    const endDegree = clockwise
                        ? Math.min(startDegree + degree, _helpers_sector__WEBPACK_IMPORTED_MODULE_4__.DEGREE_360)
                        : Math.max(startDegree + degree, _helpers_sector__WEBPACK_IMPORTED_MODULE_4__.DEGREE_0);
                    const { name, color: seriesColor } = seriesData[seriesIndex];
                    const color = this.getSeriesColor(name, seriesColor);
                    const sectorModel = {
                        type: 'sector',
                        name,
                        color: color,
                        x: centerX,
                        y: centerY,
                        degree: {
                            start: startDegree,
                            end: endDegree,
                        },
                        radius: {
                            inner,
                            outer,
                        },
                        value,
                        style: [{ strokeStyle }],
                        lineWidth,
                        clockwise,
                        totalAngle,
                        seriesColor,
                        seriesIndex,
                        index: categoryIndex,
                        drawingStartAngle: _helpers_sector__WEBPACK_IMPORTED_MODULE_4__.DEGREE_NEGATIVE_90,
                    };
                    categoryMap[categories[categoryIndex]].push(sectorModel);
                    sectorModels.push(sectorModel);
                }
            });
        });
        return { seriesModels: sectorModels, categoryMap };
    }
    getSeriesColor(name, color) {
        const { select, areaOpacity } = this.theme;
        const active = this.activeSeriesMap[name];
        const selected = Object.values(this.activeSeriesMap).some((elem) => !elem);
        return selected
            ? (0,_helpers_color__WEBPACK_IMPORTED_MODULE_9__.getRGBA)(color, active ? select.areaOpacity : select.restSeries.areaOpacity)
            : (0,_helpers_color__WEBPACK_IMPORTED_MODULE_9__.getRGBA)(color, areaOpacity);
    }
    makeTooltipData(seriesModels, categories) {
        const tooltipData = [];
        seriesModels.forEach(({ seriesColor, name, value, index }) => {
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(value)) {
                tooltipData.push({
                    label: name,
                    color: seriesColor,
                    value: value,
                    category: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(index) ? categories[index] : '',
                });
            }
        });
        return tooltipData;
    }
    makeTooltipResponder(responders) {
        const categories = Object.keys(this.models);
        return responders.map((responder) => (Object.assign(Object.assign({}, responder), (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_4__.getRadialAnchorPosition)((0,_helpers_sector__WEBPACK_IMPORTED_MODULE_4__.makeAnchorPositionParam)('center', this.models[categories[responder.index]].find(({ name }) => name === responder.name))))));
    }
    getRadialBarSectorModelsFromResponders(responders) {
        var _a;
        if (!responders.length) {
            return [];
        }
        return _a = this.tooltipSectorMap[responders[0].index], (_a !== null && _a !== void 0 ? _a : []);
    }
    getGroupedSector(responders, type) {
        const RadialBarSectorModels = this.getRadialBarSectorModelsFromResponders(responders);
        const { color, opacity } = this.theme[type].groupedSector;
        return RadialBarSectorModels.length
            ? responders.map((m) => (Object.assign(Object.assign({}, m), { color: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_9__.getRGBA)(color, opacity) })))
            : [];
    }
    onMousemoveGroupedType(responders) {
        const RadialBarSectorModels = this.getRadialBarSectorModelsFromResponders(responders);
        this.eventBus.emit('renderHoveredSeries', {
            models: this.getGroupedSector(responders, 'hover'),
            name: this.name,
            eventDetectType: this.eventDetectType,
        });
        this.activatedResponders = RadialBarSectorModels;
    }
    onMousemove({ responders }) {
        if (this.eventDetectType === 'grouped') {
            this.onMousemoveGroupedType(responders);
        }
        else {
            this.eventBus.emit('renderHoveredSeries', {
                models: this.getResponderModelsWithTheme(responders, 'hover'),
                name: this.name,
            });
            this.activatedResponders = this.makeTooltipResponder(responders);
        }
        this.eventBus.emit('seriesPointHovered', {
            models: this.activatedResponders,
            name: this.name,
            eventDetectType: this.eventDetectType,
        });
        this.eventBus.emit('needDraw');
    }
    onClick({ responders }) {
        if (this.selectable) {
            let models;
            if (this.eventDetectType === 'grouped') {
                models = [
                    ...this.getGroupedSector(responders, 'select'),
                    ...this.getRadialBarSectorModelsFromResponders(responders),
                ];
            }
            else {
                models = this.getResponderModelsWithTheme(responders, 'select');
            }
            this.eventBus.emit('renderSelectedSeries', {
                models,
                name: this.name,
                eventDetectType: this.eventDetectType,
            });
            this.eventBus.emit('needDraw');
        }
    }
    getResponderModelsWithTheme(responders, type) {
        const theme = this.theme[type];
        const lineWidth = theme.lineWidth;
        const isSameLineWidth = this.theme.lineWidth === lineWidth;
        const thickness = isSameLineWidth ? 0 : lineWidth * 0.5;
        return responders.map((m) => {
            var _a, _b;
            return (Object.assign(Object.assign({}, m), { color: (_b = (_a = theme) === null || _a === void 0 ? void 0 : _a.color, (_b !== null && _b !== void 0 ? _b : m.color)), lineWidth: lineWidth, style: [
                    (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.pick)(theme, 'strokeStyle', 'shadowBlur', 'shadowColor', 'shadowOffsetX', 'shadowOffsetY'),
                ], radius: {
                    inner: Math.max(m.radius.inner - thickness, 0),
                    outer: m.radius.outer + thickness,
                } }));
        });
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/radialPlot.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/radialPlot.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getScaleMaxLimitValue": () => (/* binding */ getScaleMaxLimitValue),
/* harmony export */   "default": () => (/* binding */ RadarPlot)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_sector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/sector */ "./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");




function getScaleMaxLimitValue(scale, totalAngle) {
    const { limit: { max }, stepSize, } = scale;
    return max + (totalAngle < _helpers_sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_360 ? _helpers_sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_0 : stepSize);
}
function findCategoryIndex(categories, value) {
    return categories.findIndex((category) => category === value);
}
class RadarPlot extends _component__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor() {
        super(...arguments);
        this.models = { plot: [], line: [], band: [] };
    }
    initialize(initParam) {
        var _a, _b;
        this.type = 'plot';
        this.name = (_b = (_a = initParam) === null || _a === void 0 ? void 0 : _a.name, (_b !== null && _b !== void 0 ? _b : 'radialPlot'));
    }
    render(state) {
        var _a, _b, _c, _d, _e, _f;
        const { layout, radialAxes, options, series, theme, scale } = state;
        this.rect = layout.plot;
        this.circularAxisTheme = theme.circularAxis;
        const categories = (_a = state.categories, (_a !== null && _a !== void 0 ? _a : []));
        if (this.name === 'gauge') {
            const bandData = (_d = (_c = (_b = options) === null || _b === void 0 ? void 0 : _b.plot) === null || _c === void 0 ? void 0 : _c.bands, (_d !== null && _d !== void 0 ? _d : []));
            const hasCategoryAxis = !(0,_helpers_axes__WEBPACK_IMPORTED_MODULE_2__.isLabelAxisOnYAxis)({ series, categories });
            const renderOptions = this.makeRenderOptionsOnGauge(hasCategoryAxis, radialAxes.circularAxis, categories, scale);
            this.models.band = this.renderBands(bandData, renderOptions, categories);
        }
        else {
            const isRadarChart = !!series.radar;
            const plotType = (_f = (_e = options.plot) === null || _e === void 0 ? void 0 : _e.type, (_f !== null && _f !== void 0 ? _f : (isRadarChart ? 'spiderweb' : 'circle')));
            const renderOptions = this.makeRenderOptions(radialAxes, plotType, categories);
            this.models.plot = this.renderPlot(renderOptions);
            this.models.line = series.radialBar ? this.renderLine(renderOptions) : [];
        }
    }
    makeRenderOptionsOnGauge(hasCategoryAxis, circularAxis, categories, scale) {
        const { angle: { total, start }, radius: { outer }, clockwise, centerX, centerY, } = circularAxis;
        const { width: bandWidth, margin: bandMargin } = circularAxis.band;
        return {
            centerX,
            centerY,
            clockwise,
            totalAngle: total,
            scaleMaxLimitValue: hasCategoryAxis
                ? categories.length
                : getScaleMaxLimitValue(scale.circularAxis, total),
            startAngle: start,
            outerRadius: outer,
            bandWidth,
            bandMargin,
            hasCategoryAxis,
        };
    }
    makeRenderOptions(radialAxes, type, categories = []) {
        const { centerX, centerY, radius: { ranges, inner, outer }, } = radialAxes.verticalAxis;
        const { angle: { central, total, start, end, drawingStart }, label: { labels }, tickInterval, clockwise, } = radialAxes.circularAxis;
        const usingArcPlot = total !== _helpers_sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_360;
        const lineCount = labels.length;
        return {
            type,
            categories,
            centralAngle: central,
            centerX,
            centerY,
            initialRadius: inner,
            radius: outer,
            radiusRanges: ranges,
            lineCount,
            tickInterval,
            drawingStartAngle: drawingStart,
            usingArcPlot,
            startAngle: start,
            endAngle: end,
            clockwise,
        };
    }
    renderPlot(renderOptions) {
        const { type, usingArcPlot } = renderOptions;
        if (usingArcPlot) {
            return this.makeArc(renderOptions);
        }
        if (type === 'spiderweb') {
            return this.makeSpiderwebPlot(renderOptions);
        }
        return this.makeCirclePlot(renderOptions);
    }
    makeSpiderwebPlot(renderOptions) {
        const { centralAngle, centerX, centerY, categories, radiusRanges } = renderOptions;
        const { strokeStyle, lineWidth } = this.circularAxisTheme;
        return radiusRanges.map((radius) => {
            const points = categories.map((_, index) => (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_0__.getRadialPosition)(centerX, centerY, radius, (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_0__.calculateDegreeToRadian)(centralAngle * index)));
            return {
                type: 'polygon',
                color: strokeStyle,
                lineWidth,
                points,
            };
        });
    }
    makeCirclePlot(renderOptions) {
        const { centerX, centerY, radiusRanges } = renderOptions;
        const { strokeStyle, lineWidth } = this.circularAxisTheme;
        return radiusRanges.map((radius) => ({
            type: 'circle',
            color: 'rgba(0, 0, 0, 0)',
            radius,
            x: centerX,
            y: centerY,
            borderColor: strokeStyle,
            borderWidth: lineWidth,
        }));
    }
    makeArc(renderOptions) {
        const { centerX, centerY, radiusRanges, startAngle, endAngle, clockwise } = renderOptions;
        const { strokeStyle, lineWidth } = this.circularAxisTheme;
        return radiusRanges.map((radius) => ({
            type: 'arc',
            borderWidth: lineWidth,
            borderColor: strokeStyle,
            x: centerX,
            y: centerY,
            angle: { start: startAngle, end: endAngle },
            drawingStartAngle: _helpers_sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_NEGATIVE_90,
            radius,
            clockwise,
        }));
    }
    renderLine(renderOptions) {
        const { centerX, centerY, initialRadius, radius, lineCount, centralAngle, tickInterval, drawingStartAngle, clockwise, } = renderOptions;
        const { strokeStyle, lineWidth } = this.circularAxisTheme;
        return (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.range)(0, lineCount).reduce((acc, cur, index) => {
            const startDegree = drawingStartAngle + centralAngle * index * (clockwise ? 1 : -1);
            const { x, y } = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_0__.getRadialPosition)(centerX, centerY, initialRadius, (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_0__.calculateDegreeToRadian)(startDegree));
            const { x: x2, y: y2 } = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_0__.getRadialPosition)(centerX, centerY, radius, (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_0__.calculateDegreeToRadian)(startDegree));
            return index % tickInterval === 0
                ? [
                    ...acc,
                    {
                        type: 'line',
                        x,
                        y,
                        x2,
                        y2,
                        strokeStyle,
                        lineWidth,
                    },
                ]
                : acc;
        }, []);
    }
    renderBands(bands, renderOptions, categories) {
        const sectors = [];
        const { centerX, centerY, clockwise, totalAngle, scaleMaxLimitValue, startAngle, outerRadius, bandWidth, bandMargin, hasCategoryAxis, } = renderOptions;
        bands.forEach(({ range: rangeData, color }, index) => {
            const value = hasCategoryAxis
                ? findCategoryIndex(categories, rangeData[1].toString()) -
                    findCategoryIndex(categories, rangeData[0].toString())
                : Number(rangeData[1]) - Number(rangeData[0]);
            const degree = (value / scaleMaxLimitValue) * totalAngle * (clockwise ? 1 : -1);
            const validDegree = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_0__.calculateValidAngle)(degree);
            const prevModel = sectors[sectors.length - 1];
            const startDegree = index && prevModel ? prevModel.degree.end : startAngle;
            const endDegree = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_0__.calculateValidAngle)(startDegree + validDegree);
            sectors.push({
                type: 'sector',
                color,
                x: centerX,
                y: centerY,
                clockwise,
                degree: {
                    start: startDegree,
                    end: endDegree,
                },
                radius: {
                    inner: outerRadius + bandMargin,
                    outer: outerRadius + bandWidth,
                },
            });
        });
        return sectors;
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/rangeSelection.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/rangeSelection.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RangeSelection)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _store_reactive__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../store/reactive */ "./node_modules/@toast-ui/chart/dist/esm/store/reactive.js");
/* harmony import */ var _helpers_coordinate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/coordinate */ "./node_modules/@toast-ui/chart/dist/esm/helpers/coordinate.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _helpers_responders__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/responders */ "./node_modules/@toast-ui/chart/dist/esm/helpers/responders.js");







const DRAG_MIN_WIDTH = 15;
class RangeSelection extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = { selectionArea: [] };
        this.dragStartPosition = null;
        this.dragStartPoint = null;
        this.isDragging = false;
    }
    initialize() {
        this.type = 'rangeSelection';
    }
    render(state, computed) {
        var _a, _b;
        if (!state.selectionRange && !state.zoomRange) {
            return;
        }
        this.resetSelectionArea();
        const { viewRange } = computed;
        const { layout, axes, series, scale } = state;
        const categories = state.categories;
        this.rect = layout.plot;
        this.startIndex = (_b = (_a = viewRange) === null || _a === void 0 ? void 0 : _a[0], (_b !== null && _b !== void 0 ? _b : 0));
        const coordinateChart = (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_1__.isCoordinateSeries)(series);
        if (coordinateChart) {
            const responderInfo = this.getRectResponderInfoForCoordinateType(series, scale, axes.xAxis, categories);
            this.responders = this.makeRectResponderModelForCoordinateType(responderInfo, categories);
        }
        else {
            this.responders = this.makeRectResponderModel(categories, axes.xAxis);
        }
    }
    getRectResponderInfoForCoordinateType(series, scale, axisData, categories) {
        const points = [];
        const duplicateCheckMap = {};
        Object.keys(series).forEach((seriesName) => {
            const data = series[seriesName].data;
            data.forEach(({ rawData }) => {
                rawData.forEach((datum, idx) => {
                    if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.isNull)(datum)) {
                        return;
                    }
                    const dataIndex = (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_1__.getCoordinateDataIndex)(datum, categories, idx, this.startIndex);
                    const x = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.getXPosition)(axisData, this.rect.width, (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_1__.getCoordinateXValue)(datum), dataIndex);
                    const xWithinRect = x >= 0 && x <= this.rect.width;
                    if (!duplicateCheckMap[x] && xWithinRect) {
                        duplicateCheckMap[x] = true;
                        points.push({ x, label: categories[dataIndex] });
                    }
                });
            });
        });
        return points;
    }
    resetSelectionArea() {
        this.dragStartPosition = null;
        this.dragStartPoint = null;
        this.models.selectionArea = [];
        this.isDragging = false;
    }
    onMousedown({ responders, mousePosition }) {
        if (responders.length) {
            this.dragStartPoint = responders.find((responder) => responder.data.name === 'selectionArea');
            this.dragStartPosition = mousePosition;
        }
    }
    onMouseup({ responders }) {
        var _a, _b;
        if (this.isDragging && this.dragStartPoint && responders.length) {
            const dragRange = [this.dragStartPoint, responders[0]]
                .sort((a, b) => a.index - b.index)
                .map((m) => { var _a; return (_a = m.data) === null || _a === void 0 ? void 0 : _a.value; });
            const { series, options } = this.store.state;
            const { series: seriesOptions } = options;
            if (!series.column && ((_a = seriesOptions) === null || _a === void 0 ? void 0 : _a.zoomable)) {
                this.store.dispatch('zoom', dragRange);
                this.eventBus.emit('zoom', (0,_store_reactive__WEBPACK_IMPORTED_MODULE_4__.makeObservableObjectToNormal)(dragRange));
            }
            if ((_b = seriesOptions) === null || _b === void 0 ? void 0 : _b.rangeSelectable) {
                this.eventBus.emit('rangeSelection', dragRange);
            }
            this.eventBus.emit('resetHoveredSeries');
            this.eventBus.emit('hideTooltip');
            // @TODO: Should occur after the series' click event
            // Additional logic to control the sequence of events with each other is required.
            setTimeout(() => {
                this.eventBus.emit('resetSelectedSeries');
            });
        }
        this.resetSelectionArea();
    }
    makeRectResponderModel(categories, axisData) {
        const categorySize = categories.length;
        const { pointOnColumn, tickDistance } = axisData;
        const { height } = this.rect;
        const halfDetectAreaIndex = pointOnColumn ? [] : [0, categorySize - 1];
        const halfWidth = tickDistance / 2;
        return (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.range)(0, categorySize).map((index) => {
            const half = halfDetectAreaIndex.includes(index);
            const width = half ? halfWidth : tickDistance;
            let startX = 0;
            if (index !== 0) {
                startX += pointOnColumn ? tickDistance * index : halfWidth + tickDistance * (index - 1);
            }
            return {
                type: 'rect',
                x: startX,
                y: 0,
                height,
                width,
                index,
                data: { name: 'selectionArea', value: categories[index] },
            };
        });
    }
    makeRectResponderModelForCoordinateType(responderInfo, categories) {
        const responders = (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_5__.makeRectResponderModelForCoordinateType)(responderInfo, this.rect);
        return responders.map((m, idx) => (Object.assign(Object.assign({}, m), { data: { name: 'selectionArea', value: categories[idx] } })));
    }
    onMousemove({ responders, mousePosition }) {
        if (!responders.length) {
            return;
        }
        if (this.dragStartPosition && !this.isDragging) {
            const { x } = mousePosition;
            const { x: startX } = this.dragStartPosition;
            this.isDragging = Math.abs(startX - x) > DRAG_MIN_WIDTH;
        }
        if (this.isDragging) {
            const startIndex = this.dragStartPoint.index;
            const endIndex = responders[0].index;
            const [start, end] = [startIndex, endIndex].sort(_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.sortNumber);
            const includedResponders = this.responders.slice(start, end + 1);
            this.models.selectionArea = [
                ...includedResponders.map((m) => (Object.assign(Object.assign({}, m), { x: m.x, y: 0, type: 'rect', color: 'rgba(0, 0, 0, 0.2)' }))),
            ];
            this.eventBus.emit('needDraw');
        }
    }
    onMouseoutComponent() {
        this.resetSelectionArea();
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/resetButton.js":
/*!************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/resetButton.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ResetButton)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _store_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/layout */ "./node_modules/@toast-ui/chart/dist/esm/store/layout.js");
/* harmony import */ var _exportMenu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");



class ResetButton extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    initialize() {
        this.type = 'resetButton';
        this.name = 'resetButton';
    }
    onClick({ responders }) {
        if (responders.length) {
            this.eventBus.emit('resetZoom');
            this.store.dispatch('resetZoom');
        }
    }
    render({ options, layout }, computed) {
        if (!(0,_store_layout__WEBPACK_IMPORTED_MODULE_1__.isUsingResetButton)(options)) {
            return;
        }
        this.rect = layout.resetButton;
        this.isShow = computed.isLineTypeSeriesZooming;
        this.models = this.isShow ? [{ type: 'resetButton', x: 0, y: 0 }] : [];
        this.responders = this.isShow
            ? [{ type: 'rect', x: 0, y: 0, width: _exportMenu__WEBPACK_IMPORTED_MODULE_2__.BUTTON_RECT_SIZE, height: _exportMenu__WEBPACK_IMPORTED_MODULE_2__.BUTTON_RECT_SIZE }]
            : [];
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/scatterSeries.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/scatterSeries.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScatterSeries)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_coordinate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/coordinate */ "./node_modules/@toast-ui/chart/dist/esm/helpers/coordinate.js");
/* harmony import */ var _helpers_color__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_legend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/legend */ "./node_modules/@toast-ui/chart/dist/esm/helpers/legend.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _helpers_responders__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../helpers/responders */ "./node_modules/@toast-ui/chart/dist/esm/helpers/responders.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");
/* harmony import */ var _helpers_validation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/validation */ "./node_modules/@toast-ui/chart/dist/esm/helpers/validation.js");










class ScatterSeries extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = { series: [] };
        this.activatedResponders = [];
        this.onMouseoutComponent = () => {
            this.eventBus.emit('seriesPointHovered', { models: [], name: this.name });
            this.eventBus.emit('renderHoveredSeries', {
                models: [],
                name: this.name,
            });
            this.eventBus.emit('needDraw');
        };
        this.getModelsForSelectInfo = (info) => {
            const { index, seriesIndex, state } = info;
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(index) || !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(seriesIndex) || !(0,_helpers_validation__WEBPACK_IMPORTED_MODULE_2__.isAvailableSelectSeries)(info, 'scatter')) {
                return;
            }
            const { name } = state.series.scatter.data[seriesIndex];
            return [this.responders.filter(({ name: dataName }) => dataName === name)[index]];
        };
        this.selectSeries = (info) => {
            const models = this.getModelsForSelectInfo(info);
            if (!models) {
                return;
            }
            const closestModel = this.getClosestModel(models);
            if (!models.length) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_3__.message.SELECT_SERIES_API_INDEX_ERROR);
            }
            this.eventBus.emit('renderSelectedSeries', {
                models: this.getResponderAppliedTheme(closestModel, 'select'),
                name: this.name,
            });
            this.eventBus.emit('needDraw');
        };
        this.showTooltip = (info) => {
            const models = this.getModelsForSelectInfo(info);
            if (!models) {
                return;
            }
            this.eventBus.emit('renderHoveredSeries', { models, name: this.name });
            this.activatedResponders = models;
            this.eventBus.emit('seriesPointHovered', { models: this.activatedResponders, name: this.name });
            this.eventBus.emit('needDraw');
        };
    }
    initialize() {
        this.type = 'series';
        this.name = 'scatter';
        this.eventBus.on('selectSeries', this.selectSeries);
        this.eventBus.on('showTooltip', this.showTooltip);
        this.eventBus.on('hideTooltip', this.onMouseoutComponent);
    }
    initUpdate(delta) {
        this.drawModels.series.forEach((model, index) => {
            model.size = this.models.series[index].size * delta;
        });
    }
    render(chartState) {
        var _a, _b;
        const { layout, series, scale, legend, options, theme, axes } = chartState;
        if (!series.scatter) {
            throw new Error(_message__WEBPACK_IMPORTED_MODULE_3__.message.noDataError(this.name));
        }
        const scatterData = series.scatter.data;
        this.theme = theme.series.scatter;
        this.rect = layout.plot;
        this.activeSeriesMap = (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_4__.getActiveSeriesMap)(legend);
        this.selectable = this.getSelectableOption(options);
        const limit = (_b = (_a = axes.xAxis) === null || _a === void 0 ? void 0 : _a.labelRange, (_b !== null && _b !== void 0 ? _b : scale.xAxis.limit)); // labelRange is created only for line scatter charts
        const seriesModel = this.renderScatterPointsModel(scatterData, limit, scale[(0,_helpers_axes__WEBPACK_IMPORTED_MODULE_5__.getValueAxisName)(options, this.name, 'yAxis')].limit);
        const tooltipModel = this.makeTooltipModel(scatterData);
        this.models.series = seriesModel;
        if (!this.drawModels) {
            this.drawModels = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(this.models);
        }
        this.responders = seriesModel.map((m, index) => (Object.assign(Object.assign({}, m), { type: 'circle', detectionSize: 0, radius: this.theme.size / 2, color: m.fillColor, style: [{ strokeStyle: m.borderColor, lineWidth: m.borderWidth }], data: tooltipModel[index] })));
    }
    renderScatterPointsModel(seriesRawData, xAxisLimit, yAxisLimit) {
        return seriesRawData.flatMap(({ data, name, color: seriesColor, iconType }, seriesIndex) => {
            const models = [];
            const active = this.activeSeriesMap[name];
            const color = (0,_helpers_color__WEBPACK_IMPORTED_MODULE_6__.getRGBA)(seriesColor, active ? 1 : 0.3);
            data.forEach((datum, index) => {
                const rawXValue = (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_7__.getCoordinateXValue)(datum);
                const xValue = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isString)(rawXValue) ? Number(new Date(rawXValue)) : Number(rawXValue);
                const yValue = (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_7__.getCoordinateYValue)(datum);
                const xValueRatio = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_8__.getValueRatio)(xValue, xAxisLimit);
                const yValueRatio = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_8__.getValueRatio)(yValue, yAxisLimit);
                const x = xValueRatio * this.rect.width;
                const y = (1 - yValueRatio) * this.rect.height;
                models.push(Object.assign({ x,
                    y, type: 'scatterSeries', iconType,
                    seriesIndex,
                    name, borderColor: color, index }, (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.pick)(this.theme, 'borderWidth', 'size', 'fillColor')));
            });
            return models;
        });
    }
    makeTooltipModel(circleData) {
        return [...circleData].flatMap(({ data, name, color }) => {
            const tooltipData = [];
            data.forEach((datum) => {
                const value = {
                    x: (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_7__.getCoordinateXValue)(datum),
                    y: (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_7__.getCoordinateYValue)(datum),
                };
                tooltipData.push({ label: name, color, value });
            });
            return tooltipData;
        });
    }
    getClosestModel(closestResponder) {
        if (!closestResponder.length) {
            return [];
        }
        const model = this.models.series.find(({ index, seriesIndex }) => (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(index) &&
            (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(seriesIndex) &&
            index === closestResponder[0].index &&
            seriesIndex === closestResponder[0].seriesIndex);
        return model ? [model] : [];
    }
    getResponderAppliedTheme(closestModel, type) {
        const { fillColor, size } = this.theme[type];
        return closestModel.map((m) => (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.deepMergedCopy)(m, Object.assign(Object.assign({}, this.theme[type]), { color: fillColor, radius: size / 2 })));
    }
    onMousemove({ responders, mousePosition }) {
        const closestResponder = (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_9__.getNearestResponder)(responders, mousePosition, this.rect);
        let closestModel = this.getClosestModel(closestResponder);
        closestModel = this.getResponderAppliedTheme(closestModel, 'hover');
        this.eventBus.emit('renderHoveredSeries', { models: closestModel, name: this.name });
        this.activatedResponders = closestResponder;
        this.eventBus.emit('seriesPointHovered', { models: this.activatedResponders, name: this.name });
        this.eventBus.emit('needDraw');
    }
    onClick({ responders, mousePosition }) {
        if (this.selectable) {
            const closestResponder = (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_9__.getNearestResponder)(responders, mousePosition, this.rect);
            let closestModel = this.getClosestModel(closestResponder);
            closestModel = this.getResponderAppliedTheme(closestModel, 'select');
            this.eventBus.emit('renderSelectedSeries', {
                models: closestModel,
                name: this.name,
            });
            this.eventBus.emit('needDraw');
        }
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SelectedSeries)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_responders__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/responders */ "./node_modules/@toast-ui/chart/dist/esm/helpers/responders.js");
/* harmony import */ var _store_reactive__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/reactive */ "./node_modules/@toast-ui/chart/dist/esm/store/reactive.js");




class SelectedSeries extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = {};
        this.seriesModels = {};
        this.activeSeriesNames = {};
        this.isShow = false;
        this.renderSelectedSeries = (selectedSeriesEventModel) => {
            const { name, alias } = selectedSeriesEventModel;
            const models = this.getSelectedSeriesModelsForRendering(selectedSeriesEventModel);
            this.models[alias || name] = (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_1__.isSameSeriesResponder)(Object.assign(Object.assign({}, selectedSeriesEventModel), { models, comparisonModel: this.models[alias || name] }))
                ? []
                : models;
            this.seriesModels[alias || name] = this.getSelectedSeriesModels(selectedSeriesEventModel);
            this.isShow = !!Object.values(this.models).flatMap((value) => value).length;
            this.eventBus.emit(this.isShow ? 'selectSeries' : 'unselectSeries', (0,_store_reactive__WEBPACK_IMPORTED_MODULE_2__.makeObservableObjectToNormal)(this.seriesModels));
            this.activeSeriesNames[name] = this.getSeriesNames(selectedSeriesEventModel.models, name);
            this.setActiveState();
        };
        this.resetSelectedSeries = () => {
            this.models = {};
            this.store.dispatch('setAllLegendActiveState', true);
        };
    }
    getSeriesNames(selectedSeries, name) {
        const names = [];
        if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.includes)(['line', 'area', 'radar', 'bubble', 'scatter', 'bullet', 'boxPlot'], name)) {
            selectedSeries.forEach((model) => {
                const label = model
                    .name;
                if (label) {
                    names.push(label);
                }
            });
        }
        else if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.includes)(['bar', 'column', 'radialBar'], name)) {
            selectedSeries.forEach((model) => {
                var _a;
                const label = (_a = model.data) === null || _a === void 0 ? void 0 : _a.label;
                if (label) {
                    names.push(label);
                }
            });
        }
        else if (name === 'pie') {
            Object.keys(this.models)
                .flatMap((key) => this.models[key])
                .forEach((model) => {
                var _a, _b;
                const label = ((_a = model.data) === null || _a === void 0 ? void 0 : _a.rootParentName) || ((_b = model.data) === null || _b === void 0 ? void 0 : _b.label);
                if (label) {
                    names.push(label);
                }
            });
        }
        return names;
    }
    getSelectedSeriesModelsForRendering(selectedSeriesEventModel) {
        const { models, eventDetectType, name } = selectedSeriesEventModel;
        let renderingModels = models;
        if ((name === 'column' || name === 'bar' || name === 'bullet') &&
            eventDetectType === 'grouped') {
            renderingModels = models.filter((model) => !model.data);
        }
        else if (name === 'radialBar' && eventDetectType === 'grouped') {
            renderingModels = models.filter((model) => !model.data);
        }
        return renderingModels;
    }
    getSelectedSeriesModels(selectedSeriesEventModel) {
        const { models, eventDetectType, name } = selectedSeriesEventModel;
        let selectedSeriesModels = models;
        if ((name === 'column' || name === 'bar' || name === 'bullet') &&
            eventDetectType === 'grouped') {
            selectedSeriesModels = models.filter((model) => model.data);
        }
        else if (name === 'radialBar' && eventDetectType === 'grouped') {
            selectedSeriesModels = models.filter((model) => model.data);
        }
        return selectedSeriesModels;
    }
    setActiveState() {
        if (this.isShow) {
            this.store.dispatch('setAllLegendActiveState', false);
            Object.values(this.activeSeriesNames).forEach((names) => {
                names.forEach((name) => {
                    this.store.dispatch('setLegendActiveState', { name, active: true });
                });
            });
        }
        else {
            this.store.dispatch('setAllLegendActiveState', true);
        }
        this.eventBus.emit('needDraw');
    }
    initialize() {
        this.type = 'selectedSeries';
        this.name = 'selectedSeries';
        this.eventBus.on('renderSelectedSeries', this.renderSelectedSeries);
        this.eventBus.on('resetSelectedSeries', this.resetSelectedSeries);
    }
    render({ layout }) {
        this.rect = layout.plot;
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/spectrumLegend.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/spectrumLegend.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SpectrumLegend)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _store_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/layout */ "./node_modules/@toast-ui/chart/dist/esm/store/layout.js");



class SpectrumLegend extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.labels = [];
        this.renderSpectrumTooltip = ([responderData]) => {
            if (responderData) {
                const { labels, align } = this;
                const { colorValue, color } = responderData;
                const { width, height } = this.rect;
                this.models.tooltip = [
                    {
                        type: 'spectrumTooltip',
                        width,
                        height,
                        x: 0,
                        y: 0,
                        labels,
                        align,
                        colorRatio: responderData.colorRatio,
                        color,
                        text: String(colorValue),
                        verticalAlign: (0,_store_layout__WEBPACK_IMPORTED_MODULE_1__.isVerticalAlign)(align),
                    },
                ];
            }
            else {
                this.models.tooltip = [];
            }
        };
    }
    initialize() {
        this.type = 'spectrumLegend';
        this.name = 'spectrumLegend';
    }
    makeLabels(scale) {
        const { stepCount, limit, stepSize } = scale;
        const minValue = limit.min;
        return (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.range)(0, stepCount + 1).reduce((labels, value) => {
            return [...labels, String(minValue + stepSize * value)];
        }, []);
    }
    renderSpectrumLegendModel(startColor, endColor) {
        const { labels, align } = this;
        const { width, height } = this.rect;
        return [
            {
                type: 'spectrumLegend',
                width,
                height,
                x: 0,
                y: 0,
                labels,
                align,
                startColor,
                endColor,
                verticalAlign: (0,_store_layout__WEBPACK_IMPORTED_MODULE_1__.isVerticalAlign)(this.align),
            },
        ];
    }
    render({ layout, legend, colorValueScale, theme }) {
        var _a, _b;
        this.rect = layout.legend;
        this.align = legend.align;
        this.isShow = legend.visible && !!legend.data.length;
        if (!this.isShow) {
            return;
        }
        this.labels = this.makeLabels(colorValueScale);
        const { startColor, endColor } = ((_a = theme.series) === null || _a === void 0 ? void 0 : _a.heatmap) || ((_b = theme.series) === null || _b === void 0 ? void 0 : _b.treemap);
        this.models = { legend: this.renderSpectrumLegendModel(startColor, endColor), tooltip: [] };
        this.eventBus.on('renderSpectrumTooltip', this.renderSpectrumTooltip);
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/title.js":
/*!******************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/title.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Title)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");




class Title extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    initialize() {
        this.type = 'title';
        this.name = 'title';
    }
    renderTitle(options) {
        var _a, _b, _c;
        let text = '';
        let x = 0;
        let y = 0;
        let align = 'left';
        if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isString)(options)) {
            text = options;
        }
        else {
            text = options.text;
            align = (_a = options.align, (_a !== null && _a !== void 0 ? _a : 'left'));
            x += (_b = options.offsetX, (_b !== null && _b !== void 0 ? _b : 0));
            y += (_c = options.offsetY, (_c !== null && _c !== void 0 ? _c : 0));
        }
        const font = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_2__.getTitleFontString)(this.theme);
        const textWidth = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.getTextWidth)(text, font);
        if (align === 'center') {
            x += (this.rect.width - textWidth) / 2;
        }
        else if (align === 'right') {
            x += this.rect.width - textWidth;
        }
        return [
            {
                type: 'label',
                x,
                y,
                text,
                style: ['title', { font, fillStyle: this.theme.color }],
            },
        ];
    }
    render({ options, layout, theme }) {
        var _a;
        this.isShow = !!((_a = options.chart) === null || _a === void 0 ? void 0 : _a.title);
        if (!this.isShow) {
            return;
        }
        this.theme = theme.title;
        this.rect = layout.title;
        this.models = this.renderTitle(options.chart.title);
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js":
/*!********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/tooltip.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Tooltip)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_tooltip__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/tooltip */ "./node_modules/@toast-ui/chart/dist/esm/helpers/tooltip.js");
/* harmony import */ var _helpers_tooltipTemplate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/tooltipTemplate */ "./node_modules/@toast-ui/chart/dist/esm/helpers/tooltipTemplate.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _helpers_htmlSanitizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/htmlSanitizer */ "./node_modules/@toast-ui/chart/dist/esm/helpers/htmlSanitizer.js");






const DEFAULT_TOOLTIP_TRANSITION = 'transform 0.2s ease';
class Tooltip extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.tooltipInfoModels = {};
        this.onSeriesPointHovered = ({ models, name }) => {
            var _a;
            this.tooltipInfoModels[name] = ((_a = models) === null || _a === void 0 ? void 0 : _a.length) ? [...models] : [];
            const isShow = !!this.getTooltipInfoModels().length;
            if (isShow) {
                this.renderTooltip();
            }
            else {
                this.removeTooltip();
            }
        };
    }
    isTooltipContainerOverflow(x, y) {
        const { width, height } = this.tooltipContainerEl.getBoundingClientRect();
        const { x: rectX, y: rectY, width: rectWidth, height: rectHeight } = this.rect;
        return {
            overflowX: x > rectX + rectWidth || x + width > rectX + rectWidth,
            overflowY: y > rectY + rectHeight || y + height > rectY + rectHeight,
        };
    }
    getPositionInRect(model) {
        const { target } = model;
        const startX = this.rect.x + model.x;
        const startY = this.rect.y + model.y;
        let x = startX + target.radius + target.width + this.offsetX;
        let y = startY + this.offsetY;
        const { overflowX, overflowY } = this.isTooltipContainerOverflow(x, y);
        const { width, height } = this.tooltipContainerEl.getBoundingClientRect();
        if (overflowX) {
            x =
                startX - (width + target.radius + this.offsetX) > 0
                    ? startX - (width + target.radius + this.offsetX)
                    : startX + this.offsetX;
        }
        if (overflowY) {
            y =
                startY + target.height - (height + this.offsetY) > 0
                    ? startY + target.height - (height + this.offsetY)
                    : y;
        }
        return { x, y };
    }
    setTooltipPosition(model) {
        const { x, y } = this.getPositionInRect(model);
        this.tooltipContainerEl.style.transform = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_1__.getTranslateString)(x, y);
    }
    getTooltipInfoModels() {
        return Object.values(this.tooltipInfoModels).flatMap((item) => item);
    }
    renderTooltip() {
        const model = this.getTooltipInfoModels().reduce((acc, item) => {
            const { data, x, y, radius, width, height } = item;
            acc.x = acc.x ? (acc.x + x) / 2 : x;
            acc.y = acc.y ? (acc.y + y) / 2 : y;
            if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.isNumber)(radius)) {
                acc.target.radius = radius;
            }
            if (width) {
                acc.target.width = width;
            }
            if (height) {
                acc.target.height = height;
            }
            acc.data.push(Object.assign(Object.assign({}, data), { value: Array.isArray(data.value)
                    ? data.value.map((titleValue) => (Object.assign(Object.assign({}, titleValue), { formattedValue: this.getFormattedValue(titleValue.value, data) })))
                    : data.value, formattedValue: this.getFormattedValue(data.value, data) }));
            if (!acc.category && data.category) {
                acc.category = data.category;
            }
            if (data.templateType) {
                acc.templateType = data.templateType;
            }
            return acc;
        }, { type: 'tooltip', x: 0, y: 0, data: [], target: { radius: 0, width: 0, height: 0 } });
        this.tooltipContainerEl.innerHTML = (0,_helpers_htmlSanitizer__WEBPACK_IMPORTED_MODULE_3__.sanitizeHTML)(this.templateFunc(model, {
            header: _helpers_tooltipTemplate__WEBPACK_IMPORTED_MODULE_4__.tooltipTemplates.defaultHeader(model, this.theme),
            body: (0,_helpers_tooltipTemplate__WEBPACK_IMPORTED_MODULE_4__.getBodyTemplate)(model.templateType)(model, this.theme),
        }, this.theme));
        this.setTooltipPosition(model);
    }
    initialize({ chartEl }) {
        this.type = 'tooltip';
        this.name = 'tooltip';
        this.chartEl = chartEl;
        this.tooltipContainerEl = document.createElement('div');
        this.tooltipContainerEl.classList.add('toastui-chart-tooltip-container');
        const { width, height, top, left } = this.chartEl.getBoundingClientRect();
        this.tooltipContainerEl.style.transform = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_1__.getTranslateString)(left + width / 2, top + height / 2);
        this.chartEl.appendChild(this.tooltipContainerEl);
        this.eventBus.on('seriesPointHovered', this.onSeriesPointHovered);
    }
    removeTooltip() {
        this.tooltipContainerEl.innerHTML = '';
    }
    setTooltipTransition(options) {
        var _a;
        const transition = (_a = options.tooltip) === null || _a === void 0 ? void 0 : _a.transition;
        if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.isBoolean)(transition) && transition) {
            this.tooltipContainerEl.style.transition = DEFAULT_TOOLTIP_TRANSITION;
        }
        else if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.isString)(transition)) {
            this.tooltipContainerEl.style.transition = transition;
        }
    }
    render({ layout, options, theme }) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        this.setTooltipTransition(options);
        this.rect = layout.plot;
        this.theme = theme.tooltip;
        this.templateFunc = (_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.tooltip) === null || _b === void 0 ? void 0 : _b.template, (_c !== null && _c !== void 0 ? _c : _helpers_tooltipTemplate__WEBPACK_IMPORTED_MODULE_4__.tooltipTemplates["default"]));
        this.offsetX = (_f = (_e = (_d = options) === null || _d === void 0 ? void 0 : _d.tooltip) === null || _e === void 0 ? void 0 : _e.offsetX, (_f !== null && _f !== void 0 ? _f : 10));
        this.offsetY = (_j = (_h = (_g = options) === null || _g === void 0 ? void 0 : _g.tooltip) === null || _h === void 0 ? void 0 : _h.offsetY, (_j !== null && _j !== void 0 ? _j : 0));
        this.formatter = (_l = (_k = options) === null || _k === void 0 ? void 0 : _k.tooltip) === null || _l === void 0 ? void 0 : _l.formatter;
    }
    getFormattedValue(value, tooltipDataInfo) {
        return this.formatter
            ? this.formatter(value, tooltipDataInfo)
            : (0,_helpers_tooltip__WEBPACK_IMPORTED_MODULE_5__.getValueString)(value);
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/treemapSeries.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/treemapSeries.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TreemapSeries)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_squarifier__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/squarifier */ "./node_modules/@toast-ui/chart/dist/esm/helpers/squarifier.js");
/* harmony import */ var _helpers_color__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");
/* harmony import */ var _helpers_responders__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/responders */ "./node_modules/@toast-ui/chart/dist/esm/helpers/responders.js");
/* harmony import */ var _helpers_dataLabels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/dataLabels */ "./node_modules/@toast-ui/chart/dist/esm/helpers/dataLabels.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_colorSpectrum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/colorSpectrum */ "./node_modules/@toast-ui/chart/dist/esm/helpers/colorSpectrum.js");
/* harmony import */ var _helpers_theme__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/theme */ "./node_modules/@toast-ui/chart/dist/esm/helpers/theme.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");









class TreemapSeries extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = { series: [], layer: [] };
        this.activatedResponders = [];
        this.onMouseoutComponent = () => {
            this.emitMouseEvent([]);
        };
        this.selectSeries = ({ seriesIndex }) => {
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(seriesIndex)) {
                return;
            }
            const model = this.responders.find(({ indexes }) => (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.last)(indexes) === seriesIndex);
            if (!model) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.SELECT_SERIES_API_INDEX_ERROR);
            }
            const models = this.getRespondersWithTheme([model], 'select');
            this.eventBus.emit('renderSelectedSeries', { models, name: this.name });
            this.eventBus.emit('needDraw');
        };
        this.showTooltip = ({ seriesIndex }) => {
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(seriesIndex)) {
                return;
            }
            const model = this.responders.find(({ indexes }) => (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.last)(indexes) === seriesIndex);
            if (model) {
                this.emitMouseEvent([model]);
            }
        };
    }
    initialize() {
        this.type = 'series';
        this.name = 'treemap';
        this.eventBus.on('selectSeries', this.selectSeries);
        this.eventBus.on('showTooltip', this.showTooltip);
        this.eventBus.on('hideTooltip', this.onMouseoutComponent);
    }
    getAllChildSeries(series, parentId) {
        const allChildSeries = [];
        series.forEach((data) => {
            if (data.parentId === parentId) {
                allChildSeries.push(data);
                if (data.hasChild) {
                    const res = this.getAllChildSeries(series, data.id);
                    allChildSeries.push(...res);
                }
            }
        });
        return allChildSeries;
    }
    render(chartState) {
        var _a, _b, _c, _d, _e;
        const { layout, treemapSeries, colorValueScale, options, theme, treemapZoomId } = chartState;
        if (!treemapSeries) {
            throw new Error(_message__WEBPACK_IMPORTED_MODULE_2__.message.noDataError(this.name));
        }
        const currentTreemapZoomId = treemapZoomId.cur;
        const series = this.getAllChildSeries(treemapSeries, currentTreemapZoomId);
        this.theme = theme.series.treemap;
        this.rect = layout.plot;
        this.selectable = this.getSelectableOption(options);
        this.models = this.renderTreemapSeries(series, options, colorValueScale, currentTreemapZoomId);
        this.zoomable = (_b = (_a = options.series) === null || _a === void 0 ? void 0 : _a.zoomable, (_b !== null && _b !== void 0 ? _b : false));
        if ((0,_helpers_dataLabels__WEBPACK_IMPORTED_MODULE_3__.getDataLabelsOptions)(options, this.name).visible) {
            const useTreemapLeaf = (_e = (_d = (_c = options.series) === null || _c === void 0 ? void 0 : _c.dataLabels) === null || _d === void 0 ? void 0 : _d.useTreemapLeaf, (_e !== null && _e !== void 0 ? _e : false));
            const dataLabelModel = this.makeDataLabel(useTreemapLeaf, currentTreemapZoomId);
            this.renderDataLabels(dataLabelModel);
        }
        this.responders = this.makeTreemapSeriesResponder(currentTreemapZoomId);
    }
    makeTreemapSeriesResponder(treemapCurrentDepthParentId) {
        const tooltipData = this.makeTooltipData();
        let { series } = this.models;
        if (this.zoomable) {
            series = series.filter(({ parentId }) => parentId === treemapCurrentDepthParentId);
        }
        return series.map((m, idx) => (Object.assign(Object.assign({}, m), { data: tooltipData[idx], thickness: _helpers_theme__WEBPACK_IMPORTED_MODULE_4__.boxDefault.HOVER_THICKNESS, style: ['shadow'] })));
    }
    makeTooltipData() {
        return this.models.series.map(({ label, data, color }) => ({
            label: label,
            color,
            value: data,
        }));
    }
    makeBoundMap(series, parentId, layout, boundMap = {}) {
        const seriesItems = series.filter((item) => item.parentId === parentId);
        boundMap = Object.assign(Object.assign({}, boundMap), (0,_helpers_squarifier__WEBPACK_IMPORTED_MODULE_5__.squarify)(Object.assign({}, layout), seriesItems));
        seriesItems.forEach((seriesItem) => {
            boundMap = this.makeBoundMap(series, seriesItem.id, boundMap[seriesItem.id], boundMap);
        });
        return boundMap;
    }
    makeDataLabel(useTreemapLeaf, treemapCurrentDepthParentId) {
        const series = useTreemapLeaf
            ? this.models.series.filter(({ hasChild }) => !hasChild)
            : this.models.series.filter(({ parentId }) => parentId === treemapCurrentDepthParentId);
        const dataLabelTheme = this.theme.dataLabels;
        return series.map((m) => (Object.assign(Object.assign({}, m), { type: 'treemapSeriesName', value: m.label, direction: 'left', plot: { x: 0, y: 0, size: 0 }, theme: Object.assign(Object.assign({}, dataLabelTheme), { color: dataLabelTheme.useSeriesColor ? m.color : dataLabelTheme.color }) })));
    }
    getColor(treemapSeries, colors) {
        const { indexes } = treemapSeries;
        const colorIdx = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.first)(indexes);
        return colors[colorIdx];
    }
    getOpacity(treemapSeries) {
        const { indexes, depth } = treemapSeries;
        const idx = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.last)(indexes);
        return indexes.length === 1 ? 0 : Number((0.1 * depth + 0.05 * idx).toFixed(2));
    }
    renderTreemapSeries(seriesData, options, colorValueScale, treemapCurrentDepthParentId) {
        var _a, _b, _c;
        let layer = [];
        const boundMap = this.makeBoundMap(seriesData, treemapCurrentDepthParentId, Object.assign(Object.assign({}, this.rect), { x: 0, y: 0 }));
        const { colors, startColor, endColor, borderWidth, borderColor } = this.theme;
        let startRGB, distances;
        const useColorValue = (_b = (_a = options.series) === null || _a === void 0 ? void 0 : _a.useColorValue, (_b !== null && _b !== void 0 ? _b : false));
        if (useColorValue && startColor && endColor) {
            startRGB = (0,_helpers_color__WEBPACK_IMPORTED_MODULE_6__.hexToRGB)(startColor);
            distances = (0,_helpers_colorSpectrum__WEBPACK_IMPORTED_MODULE_7__.makeDistances)(startRGB, (0,_helpers_color__WEBPACK_IMPORTED_MODULE_6__.hexToRGB)(endColor));
        }
        const series = Object.keys(boundMap).map((id) => {
            const treemapSeries = seriesData.find((item) => item.id === id);
            let colorRatio;
            if (useColorValue) {
                colorRatio = (0,_helpers_colorSpectrum__WEBPACK_IMPORTED_MODULE_7__.getColorRatio)(colorValueScale.limit, treemapSeries.colorValue);
            }
            return Object.assign(Object.assign(Object.assign({}, treemapSeries), boundMap[id]), { type: 'rect', colorRatio, color: useColorValue
                    ? (0,_helpers_colorSpectrum__WEBPACK_IMPORTED_MODULE_7__.getSpectrumColor)(colorRatio, distances, startRGB)
                    : this.getColor(treemapSeries, colors), opacity: useColorValue ? 0 : this.getOpacity(treemapSeries), thickness: borderWidth, borderColor: borderColor });
        });
        if (!((_c = options.series) === null || _c === void 0 ? void 0 : _c.useColorValue)) {
            layer = series.map((m) => (Object.assign(Object.assign({}, m), { color: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_6__.getRGBA)('#000000', m.opacity) })));
        }
        return { series, layer };
    }
    getRespondersWithTheme(responders, type) {
        return responders.map((responder) => (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.deepMergedCopy)(responder, Object.assign(Object.assign({}, this.theme[type]), { style: ['shadow'] })));
    }
    onClick({ responders }) {
        if (responders.length) {
            if (this.zoomable) {
                const { id, hasChild } = responders[0];
                if (hasChild) {
                    this.emitMouseEvent([]);
                    this.store.dispatch('setTreemapZoomId', id);
                    this.eventBus.emit('resetSelectedSeries');
                }
                else if (this.selectable) {
                    this.eventBus.emit('renderSelectedSeries', {
                        models: this.getRespondersWithTheme(responders, 'select'),
                        name: this.name,
                    });
                }
            }
            else if (this.selectable) {
                const deepestNode = (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_8__.getDeepestNode)(responders);
                this.eventBus.emit('renderSelectedSeries', {
                    models: this.getRespondersWithTheme(deepestNode, 'select'),
                    name: this.name,
                });
            }
        }
    }
    onMousemove({ responders }) {
        const deepestNode = (0,_helpers_responders__WEBPACK_IMPORTED_MODULE_8__.getDeepestNode)(responders);
        this.activatedResponders = deepestNode;
        this.emitMouseEvent(deepestNode);
    }
    emitMouseEvent(responders) {
        this.eventBus.emit('renderHoveredSeries', {
            models: this.getRespondersWithTheme(responders, 'hover'),
            name: this.name,
        });
        this.eventBus.emit('seriesPointHovered', {
            models: responders,
            name: this.name,
        });
        this.eventBus.emit('renderSpectrumTooltip', responders);
        this.eventBus.emit('needDraw');
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/component/zeroAxis.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/component/zeroAxis.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ZeroAxis)
/* harmony export */ });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@toast-ui/chart/dist/esm/component/component.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");




class ZeroAxis extends _component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this.models = [];
    }
    initialize() {
        this.type = 'zeroAxis';
        this.name = 'zeroAxis';
    }
    render({ layout, axes, series, options }) {
        this.rect = layout.plot;
        const labelAxisOnYAxis = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.isLabelAxisOnYAxis)({ series, options });
        const valueAxisName = labelAxisOnYAxis ? 'xAxis' : 'yAxis';
        const { zeroPosition } = axes[valueAxisName];
        if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.isNumber)(zeroPosition)) {
            this.models = this.renderZeroModel(zeroPosition, labelAxisOnYAxis);
        }
    }
    renderZeroModel(zeroPosition, vertical) {
        const zeroPixel = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(0);
        const position = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(zeroPosition);
        let model;
        if (vertical) {
            model = {
                type: 'line',
                x: position,
                y: zeroPixel,
                x2: position,
                y2: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(this.rect.height),
                strokeStyle: 'rgba(0, 0, 0, 0.5)',
            };
        }
        else {
            model = {
                type: 'line',
                x: zeroPixel,
                y: position,
                x2: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.crispPixel)(this.rect.width),
                y2: position,
                strokeStyle: 'rgba(0, 0, 0, 0.5)',
            };
        }
        return [model];
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/eventEmitter.js":
/*!***************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/eventEmitter.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EventEmitter)
/* harmony export */ });
class EventEmitter {
    constructor() {
        this.handlers = [];
    }
    on(type, handler) {
        if (!this.handlers[type]) {
            this.handlers[type] = [];
        }
        this.handlers[type].push(handler);
    }
    emit(type, ...args) {
        var _a;
        (_a = this.handlers[type]) === null || _a === void 0 ? void 0 : _a.forEach((handler) => handler(...args));
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/arrayUtil.js":
/*!********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/arrayUtil.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "max": () => (/* binding */ max),
/* harmony export */   "pivot": () => (/* binding */ pivot),
/* harmony export */   "isSameArray": () => (/* binding */ isSameArray),
/* harmony export */   "pluck": () => (/* binding */ pluck)
/* harmony export */ });
function max(arr, condition, context) {
    let result;
    if (!condition) {
        result = Math.max(...arr);
    }
    else {
        [result] = arr;
        const rest = arr.slice(1);
        let maxValue = condition.call(context, result, 0);
        rest.forEach((item, index) => {
            const compareValue = condition.call(context, item, index + 1);
            if (compareValue > maxValue) {
                maxValue = compareValue;
                result = item;
            }
        });
    }
    return result;
}
/**
 * Array pivot.
 * @memberOf module:arrayUtil
 * @param {Array.<Array>} arr2d target 2d array
 * @returns {Array.<Array>} pivoted 2d array
 */
function pivot(arr2d) {
    const result = [];
    const len = max(arr2d.map((arr) => arr.length));
    arr2d.forEach((arr) => {
        for (let index = 0; index < len; index += 1) {
            if (!result[index]) {
                result[index] = [];
            }
            result[index].push(arr[index]);
        }
    });
    return result;
}
function isSameArray(arr1, arr2) {
    if (arr1.length !== arr2.length) {
        return false;
    }
    for (let i = 0; i < arr1.length; i += 1) {
        if (arr1[i] !== arr2[i]) {
            return false;
        }
    }
    return true;
}
function pluck(arr, property) {
    return arr.reduce((acc, cur) => {
        return [...acc, cur[property]];
    }, []);
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js":
/*!***************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAutoAdjustingInterval": () => (/* binding */ getAutoAdjustingInterval),
/* harmony export */   "isLabelAxisOnYAxis": () => (/* binding */ isLabelAxisOnYAxis),
/* harmony export */   "hasBoxTypeSeries": () => (/* binding */ hasBoxTypeSeries),
/* harmony export */   "isPointOnColumn": () => (/* binding */ isPointOnColumn),
/* harmony export */   "isSeriesUsingRadialAxes": () => (/* binding */ isSeriesUsingRadialAxes),
/* harmony export */   "getAxisName": () => (/* binding */ getAxisName),
/* harmony export */   "getSizeKey": () => (/* binding */ getSizeKey),
/* harmony export */   "getLimitOnAxis": () => (/* binding */ getLimitOnAxis),
/* harmony export */   "hasSecondaryYAxis": () => (/* binding */ hasSecondaryYAxis),
/* harmony export */   "getYAxisOption": () => (/* binding */ getYAxisOption),
/* harmony export */   "getValueAxisName": () => (/* binding */ getValueAxisName),
/* harmony export */   "getValueAxisNames": () => (/* binding */ getValueAxisNames),
/* harmony export */   "getAxisTheme": () => (/* binding */ getAxisTheme),
/* harmony export */   "hasAxesLayoutChanged": () => (/* binding */ hasAxesLayoutChanged),
/* harmony export */   "getRotatableOption": () => (/* binding */ getRotatableOption),
/* harmony export */   "getViewAxisLabels": () => (/* binding */ getViewAxisLabels),
/* harmony export */   "makeTitleOption": () => (/* binding */ makeTitleOption),
/* harmony export */   "getAxisFormatter": () => (/* binding */ getAxisFormatter),
/* harmony export */   "getLabelsAppliedFormatter": () => (/* binding */ getLabelsAppliedFormatter),
/* harmony export */   "makeRotationData": () => (/* binding */ makeRotationData),
/* harmony export */   "getMaxLabelSize": () => (/* binding */ getMaxLabelSize),
/* harmony export */   "getLabelXMargin": () => (/* binding */ getLabelXMargin),
/* harmony export */   "getInitAxisIntervalData": () => (/* binding */ getInitAxisIntervalData),
/* harmony export */   "getDefaultRadialAxisData": () => (/* binding */ getDefaultRadialAxisData),
/* harmony export */   "getRadiusInfo": () => (/* binding */ getRadiusInfo),
/* harmony export */   "isDateType": () => (/* binding */ isDateType)
/* harmony export */ });
/* harmony import */ var _component_axis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component/axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");
/* harmony import */ var _calculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _geometric__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./geometric */ "./node_modules/@toast-ui/chart/dist/esm/helpers/geometric.js");
/* harmony import */ var _formatDate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./formatDate */ "./node_modules/@toast-ui/chart/dist/esm/helpers/formatDate.js");
/* harmony import */ var _sector__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sector */ "./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _pieSeries__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./pieSeries */ "./node_modules/@toast-ui/chart/dist/esm/helpers/pieSeries.js");
/* harmony import */ var _store_radialAxes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/radialAxes */ "./node_modules/@toast-ui/chart/dist/esm/store/radialAxes.js");









function makeAdjustingIntervalInfo(blockCount, axisWidth, blockSize) {
    let remainBlockCount;
    let newBlockCount = Math.floor(axisWidth / blockSize);
    let intervalInfo = null;
    const interval = newBlockCount ? Math.floor(blockCount / newBlockCount) : blockCount;
    if (interval > 1) {
        // remainBlockCount : remaining block count after filling new blocks
        // | | | | | | | | | | | |  - previous block interval
        // |     |     |     |      - new block interval
        //                   |*|*|  - remaining block
        remainBlockCount = blockCount - interval * newBlockCount;
        if (remainBlockCount >= interval) {
            newBlockCount += Math.floor(remainBlockCount / interval);
            remainBlockCount = remainBlockCount % interval;
        }
        intervalInfo = {
            blockCount: newBlockCount,
            remainBlockCount,
            interval,
        };
    }
    return intervalInfo;
}
function getAutoAdjustingInterval(count, axisWidth, categories) {
    var _a;
    const autoInterval = {
        MIN_WIDTH: 90,
        MAX_WIDTH: 121,
        STEP_SIZE: 5,
    };
    const LABEL_MARGIN = 5;
    if ((_a = categories) === null || _a === void 0 ? void 0 : _a[0]) {
        const categoryMinWidth = (0,_calculator__WEBPACK_IMPORTED_MODULE_0__.getTextWidth)(categories[0]);
        if (categoryMinWidth < axisWidth / count - LABEL_MARGIN) {
            return 1;
        }
    }
    let candidates = [];
    (0,_calculator__WEBPACK_IMPORTED_MODULE_0__.divisors)(count).forEach((interval) => {
        const intervalWidth = (interval / count) * axisWidth;
        if (intervalWidth >= autoInterval.MIN_WIDTH && intervalWidth <= autoInterval.MAX_WIDTH) {
            candidates.push({ interval, blockCount: Math.floor(count / interval), remainBlockCount: 0 });
        }
    });
    if (!candidates.length) {
        const blockSizeRange = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.range)(autoInterval.MIN_WIDTH, autoInterval.MAX_WIDTH, autoInterval.STEP_SIZE);
        candidates = blockSizeRange.reduce((acc, blockSize) => {
            const candidate = makeAdjustingIntervalInfo(count, axisWidth, blockSize);
            return candidate ? [...acc, candidate] : acc;
        }, []);
    }
    let tickInterval = 1;
    if (candidates.length) {
        const candidate = candidates.reduce((acc, cur) => (cur.blockCount > acc.blockCount ? cur : acc), { blockCount: 0, interval: 1 });
        tickInterval = candidate.interval;
    }
    return tickInterval;
}
function isLabelAxisOnYAxis({ series, options, categories, }) {
    var _a, _b;
    return (!!series.bar ||
        !!series.radialBar ||
        (!!series.gauge && Array.isArray(categories) && !categories.length) ||
        (!!series.bullet && !((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b.vertical)));
}
function hasBoxTypeSeries(series) {
    return !!series.column || !!series.bar || !!series.boxPlot || !!series.bullet;
}
function isPointOnColumn(series, options) {
    var _a;
    if (hasBoxTypeSeries(series)) {
        return true;
    }
    if (series.line || series.area) {
        return Boolean((_a = options.xAxis) === null || _a === void 0 ? void 0 : _a.pointOnColumn);
    }
    return false;
}
function isSeriesUsingRadialAxes(series) {
    return !!series.radar || !!series.radialBar || !!series.gauge;
}
function getAxisNameUsingRadialAxes(labelAxisOnYAxis) {
    return {
        valueAxisName: labelAxisOnYAxis ? 'circularAxis' : 'verticalAxis',
        labelAxisName: labelAxisOnYAxis ? 'verticalAxis' : 'circularAxis',
    };
}
function getAxisName(labelAxisOnYAxis, series) {
    return isSeriesUsingRadialAxes(series)
        ? getAxisNameUsingRadialAxes(labelAxisOnYAxis)
        : {
            valueAxisName: labelAxisOnYAxis ? 'xAxis' : 'yAxis',
            labelAxisName: labelAxisOnYAxis ? 'yAxis' : 'xAxis',
        };
}
function getSizeKey(labelAxisOnYAxis) {
    return {
        valueSizeKey: labelAxisOnYAxis ? 'width' : 'height',
        labelSizeKey: labelAxisOnYAxis ? 'height' : 'width',
    };
}
function getLimitOnAxis(labels) {
    const values = labels.map((label) => Number(label));
    return {
        min: Math.min(...values),
        max: Math.max(...values),
    };
}
function hasSecondaryYAxis(options) {
    var _a;
    return Array.isArray((_a = options) === null || _a === void 0 ? void 0 : _a.yAxis) && options.yAxis.length === 2;
}
function getYAxisOption(options) {
    var _a;
    const secondaryYAxis = hasSecondaryYAxis(options);
    return {
        yAxis: secondaryYAxis ? options.yAxis[0] : (_a = options) === null || _a === void 0 ? void 0 : _a.yAxis,
        secondaryYAxis: secondaryYAxis ? options.yAxis[1] : null,
    };
}
function getValueAxisName(options, seriesName, valueAxisName) {
    var _a;
    const { secondaryYAxis } = getYAxisOption(options);
    return ((_a = secondaryYAxis) === null || _a === void 0 ? void 0 : _a.chartType) === seriesName ? 'secondaryYAxis' : valueAxisName;
}
function getValueAxisNames(options, valueAxisName) {
    if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.includes)([_component_axis__WEBPACK_IMPORTED_MODULE_2__.AxisType.X, _component_axis__WEBPACK_IMPORTED_MODULE_2__.AxisType.CIRCULAR, _component_axis__WEBPACK_IMPORTED_MODULE_2__.AxisType.VERTICAL], valueAxisName)) {
        return [valueAxisName];
    }
    const optionsUsingYAxis = options;
    const { yAxis, secondaryYAxis } = getYAxisOption(optionsUsingYAxis);
    return secondaryYAxis
        ? [yAxis.chartType, secondaryYAxis.chartType].map((seriesName, index) => seriesName
            ? getValueAxisName(optionsUsingYAxis, seriesName, valueAxisName)
            : ['yAxis', 'secondaryYAxis'][index])
        : [valueAxisName];
}
function getAxisTheme(theme, name) {
    const { xAxis, yAxis, circularAxis } = theme;
    let axisTheme;
    if (name === _component_axis__WEBPACK_IMPORTED_MODULE_2__.AxisType.X) {
        axisTheme = xAxis;
    }
    else if (Array.isArray(yAxis)) {
        axisTheme = name === _component_axis__WEBPACK_IMPORTED_MODULE_2__.AxisType.Y ? yAxis[0] : yAxis[1];
    }
    else if (name === _store_radialAxes__WEBPACK_IMPORTED_MODULE_3__.RadialAxisType.CIRCULAR) {
        axisTheme = circularAxis;
    }
    else {
        axisTheme = yAxis;
    }
    return axisTheme;
}
function getRotationDegree(distance, labelWidth, labelHeight, axisLayout) {
    let degree = 0;
    _geometric__WEBPACK_IMPORTED_MODULE_4__.ANGLE_CANDIDATES.every((angle) => {
        const compareWidth = (0,_geometric__WEBPACK_IMPORTED_MODULE_4__.calculateRotatedWidth)(angle, labelWidth, labelHeight);
        degree = angle;
        return compareWidth > distance || compareWidth / 2 > axisLayout.x;
    });
    return distance < labelWidth || labelWidth / 2 > axisLayout.x ? degree : 0;
}
function hasYAxisMaxLabelLengthChanged(previousAxes, currentAxes, field) {
    var _a, _b;
    const prevYAxis = previousAxes[field];
    const yAxis = currentAxes[field];
    if (!prevYAxis && !yAxis) {
        return false;
    }
    return ((_a = prevYAxis) === null || _a === void 0 ? void 0 : _a.maxLabelWidth) !== ((_b = yAxis) === null || _b === void 0 ? void 0 : _b.maxLabelWidth);
}
function hasYAxisTypeMaxLabelChanged(previousAxes, currentAxes) {
    return (hasYAxisMaxLabelLengthChanged(previousAxes, currentAxes, 'yAxis') ||
        hasYAxisMaxLabelLengthChanged(previousAxes, currentAxes, 'secondaryYAxis'));
}
function hasXAxisSizeChanged(previousAxes, currentAxes) {
    const { maxHeight: prevMaxHeight } = previousAxes.xAxis;
    const { maxHeight } = currentAxes.xAxis;
    return prevMaxHeight !== maxHeight;
}
function hasAxesLayoutChanged(previousAxes, currentAxes) {
    return (hasYAxisTypeMaxLabelChanged(previousAxes, currentAxes) ||
        hasXAxisSizeChanged(previousAxes, currentAxes));
}
function getRotatableOption(options) {
    var _a, _b, _c, _d;
    return _d = (_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.xAxis) === null || _b === void 0 ? void 0 : _b.label) === null || _c === void 0 ? void 0 : _c.rotatable, (_d !== null && _d !== void 0 ? _d : true);
}
function getViewAxisLabels(axisData, axisSize) {
    var _a, _b, _c, _d;
    const { labels, pointOnColumn, labelDistance, tickDistance, labelInterval, tickInterval, tickCount, scale, } = axisData;
    let axisSizeAppliedRatio = axisSize;
    let additional = 0;
    let labelAdjustment = 0;
    if (scale) {
        const sizeRatio = (_b = (_a = scale) === null || _a === void 0 ? void 0 : _a.sizeRatio, (_b !== null && _b !== void 0 ? _b : 1));
        const positionRatio = (_d = (_c = scale) === null || _c === void 0 ? void 0 : _c.positionRatio, (_d !== null && _d !== void 0 ? _d : 0));
        axisSizeAppliedRatio = axisSize * sizeRatio;
        additional = axisSize * positionRatio;
    }
    else {
        const interval = labelInterval === tickInterval ? labelInterval : 1;
        labelAdjustment = pointOnColumn ? ((labelDistance !== null && labelDistance !== void 0 ? labelDistance : tickDistance * interval)) / 2 : 0;
    }
    const relativePositions = (0,_calculator__WEBPACK_IMPORTED_MODULE_0__.makeTickPixelPositions)(axisSizeAppliedRatio, tickCount, additional);
    return labels.reduce((acc, text, index) => {
        const offsetPos = relativePositions[index] + labelAdjustment;
        const needRender = !(index % labelInterval) && offsetPos <= axisSize;
        return needRender ? [...acc, { offsetPos, text }] : acc;
    }, []);
}
function makeTitleOption(title) {
    if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(title)) {
        return title;
    }
    const defaultOption = { text: '', offsetX: 0, offsetY: 0 };
    return (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isString)(title) ? Object.assign(Object.assign({}, defaultOption), { text: title }) : Object.assign(Object.assign({}, defaultOption), title);
}
function getAxisFormatter(options, axisName) {
    var _a, _b, _c;
    const axisOptions = Object.assign(Object.assign({}, getYAxisOption(options)), { xAxis: options.xAxis });
    return _c = (_b = (_a = axisOptions[axisName]) === null || _a === void 0 ? void 0 : _a.label) === null || _b === void 0 ? void 0 : _b.formatter, (_c !== null && _c !== void 0 ? _c : ((value) => value));
}
function getLabelsAppliedFormatter(labels, options, dateType, axisName) {
    var _a, _b;
    const dateFormatter = (0,_formatDate__WEBPACK_IMPORTED_MODULE_5__.getDateFormat)((_b = (_a = options) === null || _a === void 0 ? void 0 : _a[axisName]) === null || _b === void 0 ? void 0 : _b.date);
    const formattedLabels = dateType && dateFormatter
        ? labels.map((label) => (0,_formatDate__WEBPACK_IMPORTED_MODULE_5__.formatDate)(dateFormatter, new Date(label)))
        : labels;
    const formatter = getAxisFormatter(options, axisName);
    return formattedLabels.map((label, index) => formatter(label, { index, labels, axisName }));
}
function makeRotationData(maxLabelWidth, maxLabelHeight, distance, rotatable, axisLayout) {
    const degree = getRotationDegree(distance, maxLabelWidth, maxLabelHeight, axisLayout);
    if (!rotatable || degree === 0) {
        return {
            needRotateLabel: false,
            radian: 0,
            rotationHeight: maxLabelHeight,
        };
    }
    return {
        needRotateLabel: degree > 0,
        radian: (0,_sector__WEBPACK_IMPORTED_MODULE_6__.calculateDegreeToRadian)(degree, 0),
        rotationHeight: (0,_geometric__WEBPACK_IMPORTED_MODULE_4__.calculateRotatedHeight)(degree, maxLabelWidth, maxLabelHeight),
    };
}
function getMaxLabelSize(labels, xMargin, font = _brushes_label__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_LABEL_TEXT) {
    const maxLengthLabel = labels.reduce((acc, cur) => (acc.length > cur.length ? acc : cur), '');
    return {
        maxLabelWidth: (0,_calculator__WEBPACK_IMPORTED_MODULE_0__.getTextWidth)(maxLengthLabel, font) + xMargin,
        maxLabelHeight: (0,_calculator__WEBPACK_IMPORTED_MODULE_0__.getTextHeight)(maxLengthLabel, font),
    };
}
function getLabelXMargin(axisName, options) {
    var _a, _b, _c, _d;
    if (axisName === 'xAxis') {
        return 0;
    }
    const axisOptions = getYAxisOption(options);
    return Math.abs((_d = (_c = (_b = (_a = axisOptions) === null || _a === void 0 ? void 0 : _a[axisName]) === null || _b === void 0 ? void 0 : _b.label) === null || _c === void 0 ? void 0 : _c.margin, (_d !== null && _d !== void 0 ? _d : 0)));
}
function getInitAxisIntervalData(isLabelAxis, params) {
    var _a, _b, _c, _d, _e, _f;
    const { axis, categories, layout, isCoordinateTypeChart } = params;
    const tickInterval = (_b = (_a = axis) === null || _a === void 0 ? void 0 : _a.tick) === null || _b === void 0 ? void 0 : _b.interval;
    const labelInterval = (_d = (_c = axis) === null || _c === void 0 ? void 0 : _c.label) === null || _d === void 0 ? void 0 : _d.interval;
    const existIntervalOptions = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(tickInterval) || (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(labelInterval);
    const needAdjustInterval = isLabelAxis &&
        !(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)((_f = (_e = axis) === null || _e === void 0 ? void 0 : _e.scale) === null || _f === void 0 ? void 0 : _f.stepSize) &&
        !params.shift &&
        !existIntervalOptions &&
        !isCoordinateTypeChart;
    const initTickInterval = needAdjustInterval ? getInitTickInterval(categories, layout) : 1;
    const initLabelInterval = needAdjustInterval ? initTickInterval : 1;
    const axisData = {
        tickInterval: (tickInterval !== null && tickInterval !== void 0 ? tickInterval : initTickInterval),
        labelInterval: (labelInterval !== null && labelInterval !== void 0 ? labelInterval : initLabelInterval),
    };
    return axisData;
}
function getInitTickInterval(categories, layout) {
    if (!categories || !layout) {
        return 1;
    }
    const { width } = layout.xAxis;
    const count = categories.length;
    return getAutoAdjustingInterval(count, width, categories);
}
function getDefaultRadialAxisData(options, plot, maxLabelWidth = 0, maxLabelHeight = 0, isLabelOnVerticalAxis = false) {
    var _a;
    const centerX = plot.width / 2;
    if (isLabelOnVerticalAxis) {
        const { startAngle, endAngle, clockwise } = (0,_sector__WEBPACK_IMPORTED_MODULE_6__.initSectorOptions)((_a = options) === null || _a === void 0 ? void 0 : _a.series);
        const isSemiCircular = (0,_pieSeries__WEBPACK_IMPORTED_MODULE_8__.isSemiCircle)(clockwise, startAngle, endAngle);
        return {
            isSemiCircular,
            axisSize: (0,_sector__WEBPACK_IMPORTED_MODULE_6__.getDefaultRadius)(plot, isSemiCircular, maxLabelWidth, maxLabelHeight),
            centerX,
            centerY: isSemiCircular ? (0,_pieSeries__WEBPACK_IMPORTED_MODULE_8__.getSemiCircleCenterY)(plot.height, clockwise) : plot.height / 2,
            totalAngle: (0,_pieSeries__WEBPACK_IMPORTED_MODULE_8__.getTotalAngle)(clockwise, startAngle, endAngle),
            drawingStartAngle: startAngle,
            clockwise,
            startAngle,
            endAngle,
        };
    }
    return {
        isSemiCircular: false,
        axisSize: (0,_sector__WEBPACK_IMPORTED_MODULE_6__.getDefaultRadius)(plot, false, maxLabelWidth, maxLabelHeight),
        centerX,
        centerY: plot.height / 2,
        totalAngle: _sector__WEBPACK_IMPORTED_MODULE_6__.DEGREE_360,
        drawingStartAngle: _sector__WEBPACK_IMPORTED_MODULE_6__.DEGREE_0,
        clockwise: true,
        startAngle: _sector__WEBPACK_IMPORTED_MODULE_6__.DEGREE_0,
        endAngle: _sector__WEBPACK_IMPORTED_MODULE_6__.DEGREE_360,
    };
}
function getRadiusInfo(axisSize, radiusRange, count = 1) {
    var _a, _b, _c, _d;
    const innerRadius = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.calculateSizeWithPercentString)(axisSize, (_b = (_a = radiusRange) === null || _a === void 0 ? void 0 : _a.inner, (_b !== null && _b !== void 0 ? _b : 0)));
    const outerRadius = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.calculateSizeWithPercentString)(axisSize, (_d = (_c = radiusRange) === null || _c === void 0 ? void 0 : _c.outer, (_d !== null && _d !== void 0 ? _d : axisSize)));
    return {
        radiusRanges: (0,_calculator__WEBPACK_IMPORTED_MODULE_0__.makeTickPixelPositions)(outerRadius - innerRadius, count, innerRadius)
            .splice(innerRadius === 0 ? 1 : 0, count)
            .reverse(),
        innerRadius,
        outerRadius,
    };
}
function isDateType(options, axisName) {
    var _a;
    return !!((_a = options[axisName]) === null || _a === void 0 ? void 0 : _a.date);
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/boxSeries.js":
/*!********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/boxSeries.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "calibrateDrawingValue": () => (/* binding */ calibrateDrawingValue),
/* harmony export */   "sumValuesBeforeIndex": () => (/* binding */ sumValuesBeforeIndex),
/* harmony export */   "outsideRange": () => (/* binding */ outsideRange),
/* harmony export */   "calibrateBoxStackDrawingValue": () => (/* binding */ calibrateBoxStackDrawingValue)
/* harmony export */ });
function limitNegative(value, min, max) {
    let result = value;
    if (result >= max) {
        return 0;
    }
    if (max < 0) {
        result = Math.min(value - max, 0);
    }
    if (value < min) {
        result -= value - min;
    }
    return result;
}
function limitPositive(value, min, max) {
    let result = value;
    if (min > 0) {
        result = Math.max(value - min, 0);
    }
    if (value > max) {
        result -= value - max;
    }
    return result;
}
function calibrateDrawingValue(value, min, max) {
    return value < 0 ? limitNegative(value, min, max) : limitPositive(value, min, max);
}
function sumValuesBeforeIndex(values, targetIndex, includeTarget = false) {
    const target = values[targetIndex];
    return values.reduce((total, value, idx) => {
        const isBefore = includeTarget ? idx <= targetIndex : idx < targetIndex;
        const isSameSign = value * target >= 0;
        return isBefore && isSameSign ? total + value : total;
    }, 0);
}
function outsideRange(values, currentIndex, min, max) {
    const value = values[currentIndex];
    const totalOfIndexBefore = sumValuesBeforeIndex(values, currentIndex, false);
    const positive = value >= 0;
    const negative = value < 0;
    return ((positive && totalOfIndexBefore >= max) ||
        (negative && totalOfIndexBefore <= min) ||
        (currentIndex === 0 && positive && value < min) ||
        (currentIndex === 0 && negative && value > max));
}
function calibrateBoxStackDrawingValue(values, currentIndex, min, max) {
    const totalOfIndexBefore = sumValuesBeforeIndex(values, currentIndex, false);
    const totalOfValues = sumValuesBeforeIndex(values, currentIndex, true);
    if (outsideRange(values, currentIndex, min, max)) {
        return null;
    }
    if (currentIndex === 0) {
        return calibrateDrawingValue(values[currentIndex], min, max);
    }
    if (totalOfIndexBefore < min && totalOfValues > max) {
        return max - min;
    }
    let result = values[currentIndex];
    if (totalOfValues > max) {
        result = max - totalOfIndexBefore;
    }
    else if (totalOfValues < min) {
        result = min - totalOfIndexBefore;
    }
    else if (totalOfIndexBefore < min) {
        result = totalOfValues - min;
    }
    else if (totalOfIndexBefore > max) {
        result = totalOfValues - max;
    }
    return result;
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getTextWidth": () => (/* binding */ getTextWidth),
/* harmony export */   "getTextHeight": () => (/* binding */ getTextHeight),
/* harmony export */   "getFontHeight": () => (/* binding */ getFontHeight),
/* harmony export */   "getAxisLabelAnchorPoint": () => (/* binding */ getAxisLabelAnchorPoint),
/* harmony export */   "add": () => (/* binding */ add),
/* harmony export */   "multiply": () => (/* binding */ multiply),
/* harmony export */   "divide": () => (/* binding */ divide),
/* harmony export */   "sum": () => (/* binding */ sum),
/* harmony export */   "divisors": () => (/* binding */ divisors),
/* harmony export */   "makeLabelsFromLimit": () => (/* binding */ makeLabelsFromLimit),
/* harmony export */   "makeTickPixelPositions": () => (/* binding */ makeTickPixelPositions),
/* harmony export */   "crispPixel": () => (/* binding */ crispPixel),
/* harmony export */   "setSplineControlPoint": () => (/* binding */ setSplineControlPoint),
/* harmony export */   "getValueRatio": () => (/* binding */ getValueRatio),
/* harmony export */   "getDistance": () => (/* binding */ getDistance),
/* harmony export */   "getMaxLengthLabelWidth": () => (/* binding */ getMaxLengthLabelWidth),
/* harmony export */   "getXPosition": () => (/* binding */ getXPosition)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _brushes_label__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brushes/label */ "./node_modules/@toast-ui/chart/dist/esm/brushes/label.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");



const LINE_HEIGHT_NORMAL = 1.2;
const ctx = document.createElement('canvas').getContext('2d');
function getTextWidth(text, font = _brushes_label__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_LABEL_TEXT) {
    ctx.font = font;
    return Math.ceil(ctx.measureText(text).width);
}
/*
 * Calculate height of canvas text
 * https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics
 * */
function getTextHeight(text, font = _brushes_label__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_LABEL_TEXT) {
    ctx.font = font;
    const { actualBoundingBoxAscent, actualBoundingBoxDescent } = ctx.measureText(text);
    const validActualBoundingBox = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(actualBoundingBoxAscent) && (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(actualBoundingBoxDescent);
    return validActualBoundingBox
        ? Math.ceil(Math.abs(actualBoundingBoxAscent) + Math.abs(actualBoundingBoxDescent)) + 1
        : getFontHeight(font);
}
function getFontHeight(font = _brushes_label__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_LABEL_TEXT) {
    const fontSize = font.match(/\d+(?=px)/);
    return parseInt(String(Number(fontSize) * LINE_HEIGHT_NORMAL), 10);
}
function getAxisLabelAnchorPoint(labelHeight) {
    return crispPixel(_brushes_axis__WEBPACK_IMPORTED_MODULE_2__.TICK_SIZE * 2 + labelHeight / 2);
}
function getDecimalLength(value) {
    var _a, _b;
    return _b = (_a = String(value).split('.')[1]) === null || _a === void 0 ? void 0 : _a.length, (_b !== null && _b !== void 0 ? _b : 0);
}
function findMultipleNum(...args) {
    const underPointLens = args.map((value) => getDecimalLength(value));
    const underPointLen = Math.max(...underPointLens);
    return Math.pow(10, underPointLen);
}
function add(a, b) {
    const multipleNum = findMultipleNum(a, b);
    return (a * multipleNum + b * multipleNum) / multipleNum;
}
function multiply(a, b) {
    const multipleNum = findMultipleNum(a, b);
    return (a * multipleNum * (b * multipleNum)) / (multipleNum * multipleNum);
}
function divide(a, b) {
    const multipleNum = findMultipleNum(a, b);
    return (a * multipleNum) / (b * multipleNum);
}
function sum(values) {
    const copyArr = values.slice();
    copyArr.unshift(0);
    return copyArr.reduce((base, value) => add(parseFloat(String(base)), parseFloat(String(value))));
}
function divisors(value) {
    const result = [];
    for (let a = 2, b; a * a <= value; a += 1) {
        if (value % a === 0) {
            b = value / a;
            result.push(a);
            if (b !== a) {
                result.push(b);
            }
        }
    }
    return result.sort((prev, next) => prev - next);
}
function makeLabelsFromLimit(limit, stepSize, isDateType) {
    const multipleNum = findMultipleNum(stepSize);
    const min = Math.round(limit.min * multipleNum);
    const max = Math.round(limit.max * multipleNum);
    const labels = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.range)(min, max + 1, stepSize * multipleNum);
    return labels.map((label) => {
        return String(isDateType ? new Date(label) : label / multipleNum);
    });
}
function makeTickPixelPositions(size, count, additionalPosition = 0, remainLastBlockIntervalPosition = 0) {
    let positions = [];
    if (count > 0) {
        positions = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.range)(0, count).map((index) => {
            const ratio = index === 0 ? 0 : index / (count - 1);
            return ratio * size + additionalPosition;
        });
    }
    if (remainLastBlockIntervalPosition) {
        positions.push(remainLastBlockIntervalPosition);
    }
    return positions;
}
function crispPixel(pixel, thickness = 1) {
    const halfThickness = thickness / 2;
    return thickness % 2
        ? ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isInteger)(pixel) ? pixel : Math.round(pixel - halfThickness)) + halfThickness
        : Math.round(pixel);
}
function getControlPoints(prev, cur, next) {
    // http://scaledinnovation.com/analytics/splines/aboutSplines.html
    const TENSION = 0.333;
    const { x: x0, y: y0 } = prev;
    const { x: x1, y: y1 } = cur;
    const { x: x2, y: y2 } = next;
    const d12 = getDistance(next, cur);
    const d01 = getDistance(cur, prev);
    const fa = (TENSION * d01) / (d01 + d12) || 0; // scaling factor for triangle Ta
    const fb = (TENSION * d12) / (d01 + d12) || 0; // ditto for Tb, simplifies to fb=t-fa
    return {
        prev: {
            x: x1 - fa * (x2 - x0),
            y: y1 - fa * (y2 - y0),
        },
        next: { x: x1 + fb * (x2 - x0), y: y1 + fb * (y2 - y0) },
    };
}
function setSplineControlPoint(points) {
    for (let i = 0, pointsSize = points.length, prev = points[0]; i < pointsSize; i += 1) {
        const point = points[i];
        if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(point)) {
            prev = points[i + 1];
            continue;
        }
        const next = points[Math.min(i + 1, pointsSize - 1) % pointsSize];
        if (prev && next) {
            point.controlPoint = getControlPoints(prev, point, next);
        }
        prev = point;
    }
}
function getValueRatio(value, { min, max }) {
    if (max === min) {
        return 0;
    }
    return (value - min) / (max - min);
}
function getDistance(point1, point2) {
    return Math.sqrt(Math.pow((point2.x - point1.x), 2) + Math.pow((point2.y - point1.y), 2));
}
function getMaxLengthLabelWidth(labels) {
    const maxLengthLabel = labels.reduce((acc, cur) => (acc.length > cur.length ? acc : cur), '');
    return getTextWidth(maxLengthLabel);
}
function getXPosition(axisData, offsetSize, value, dataIndex) {
    const { pointOnColumn, tickDistance, labelRange } = axisData;
    let x;
    if (labelRange) {
        const xValue = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isString)(value) ? Number(new Date(value)) : Number(value);
        const xValueRatio = getValueRatio(xValue, labelRange);
        x = xValueRatio * offsetSize;
    }
    else {
        x = tickDistance * dataIndex + (pointOnColumn ? tickDistance / 2 : 0);
    }
    return x;
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js":
/*!****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/color.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "colorMap": () => (/* binding */ colorMap),
/* harmony export */   "hexToRGB": () => (/* binding */ hexToRGB),
/* harmony export */   "rgbToHEX": () => (/* binding */ rgbToHEX),
/* harmony export */   "getRGBA": () => (/* binding */ getRGBA),
/* harmony export */   "getAlpha": () => (/* binding */ getAlpha),
/* harmony export */   "rgba": () => (/* binding */ rgba)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");

const hexRX = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i;
const rgbRX = /rgb\((\d{1,3}), ?(\d{1,3}), ?(\d{1,3})\)/;
const rgbaRX = /rgba\((\d{1,3}), ?(\d{1,3}), ?(\d{1,3}), ?(1|0?\.?\d+)\)/;
/**
 * Color map.
 * http://stackoverflow.com/questions/1573053/javascript-function-to-convert-color-names-to-hex-codes
 * http://www.w3schools.com/HTML/html_colornames.asp
 * @ignore
 */
const colorMap = {
    aliceblue: '#f0f8ff',
    antiquewhite: '#faebd7',
    aqua: '#00ffff',
    aquamarine: '#7fffd4',
    azure: '#f0ffff',
    beige: '#f5f5dc',
    bisque: '#ffe4c4',
    black: '#000000',
    blanchedalmond: '#ffebcd',
    blue: '#0000ff',
    blueviolet: '#8a2be2',
    brown: '#a52a2a',
    burlywood: '#deb887',
    cadetblue: '#5f9ea0',
    chartreuse: '#7fff00',
    chocolate: '#d2691e',
    coral: '#ff7f50',
    cornflowerblue: '#6495ed',
    cornsilk: '#fff8dc',
    crimson: '#dc143c',
    cyan: '#00ffff',
    darkblue: '#00008b',
    darkcyan: '#008b8b',
    darkgoldenrod: '#b8860b',
    darkgray: '#a9a9a9',
    darkgreen: '#006400',
    darkkhaki: '#bdb76b',
    darkmagenta: '#8b008b',
    darkolivegreen: '#556b2f',
    darkorange: '#ff8c00',
    darkorchid: '#9932cc',
    darkred: '#8b0000',
    darksalmon: '#e9967a',
    darkseagreen: '#8fbc8f',
    darkslateblue: '#483d8b',
    darkslategray: '#2f4f4f',
    darkturquoise: '#00ced1',
    darkviolet: '#9400d3',
    deeppink: '#ff1493',
    deepskyblue: '#00bfff',
    dimgray: '#696969',
    dodgerblue: '#1e90ff',
    firebrick: '#b22222',
    floralwhite: '#fffaf0',
    forestgreen: '#228b22',
    fuchsia: '#ff00ff',
    gainsboro: '#dcdcdc',
    ghostwhite: '#f8f8ff',
    gold: '#ffd700',
    goldenrod: '#daa520',
    gray: '#808080',
    green: '#008000',
    greenyellow: '#adff2f',
    honeydew: '#f0fff0',
    hotpink: '#ff69b4',
    indianred: '#cd5c5c',
    indigo: '#4b0082',
    ivory: '#fffff0',
    khaki: '#f0e68c',
    lavender: '#e6e6fa',
    lavenderblush: '#fff0f5',
    lawngreen: '#7cfc00',
    lemonchiffon: '#fffacd',
    lightblue: '#add8e6',
    lightcoral: '#f08080',
    lightcyan: '#e0ffff',
    lightgoldenrodyellow: '#fafad2',
    lightgrey: '#d3d3d3',
    lightgreen: '#90ee90',
    lightpink: '#ffb6c1',
    lightsalmon: '#ffa07a',
    lightseagreen: '#20b2aa',
    lightskyblue: '#87cefa',
    lightslategray: '#778899',
    lightsteelblue: '#b0c4de',
    lightyellow: '#ffffe0',
    lime: '#00ff00',
    limegreen: '#32cd32',
    linen: '#faf0e6',
    magenta: '#ff00ff',
    maroon: '#800000',
    mediumaquamarine: '#66cdaa',
    mediumblue: '#0000cd',
    mediumorchid: '#ba55d3',
    mediumpurple: '#9370d8',
    mediumseagreen: '#3cb371',
    mediumslateblue: '#7b68ee',
    mediumspringgreen: '#00fa9a',
    mediumturquoise: '#48d1cc',
    mediumvioletred: '#c71585',
    midnightblue: '#191970',
    mintcream: '#f5fffa',
    mistyrose: '#ffe4e1',
    moccasin: '#ffe4b5',
    navajowhite: '#ffdead',
    navy: '#000080',
    oldlace: '#fdf5e6',
    olive: '#808000',
    olivedrab: '#6b8e23',
    orange: '#ffa500',
    orangered: '#ff4500',
    orchid: '#da70d6',
    palegoldenrod: '#eee8aa',
    palegreen: '#98fb98',
    paleturquoise: '#afeeee',
    palevioletred: '#d87093',
    papayawhip: '#ffefd5',
    peachpuff: '#ffdab9',
    peru: '#cd853f',
    pink: '#ffc0cb',
    plum: '#dda0dd',
    powderblue: '#b0e0e6',
    purple: '#800080',
    red: '#ff0000',
    rosybrown: '#bc8f8f',
    royalblue: '#4169e1',
    saddlebrown: '#8b4513',
    salmon: '#fa8072',
    sandybrown: '#f4a460',
    seagreen: '#2e8b57',
    seashell: '#fff5ee',
    sienna: '#a0522d',
    silver: '#c0c0c0',
    skyblue: '#87ceeb',
    slateblue: '#6a5acd',
    slategray: '#708090',
    snow: '#fffafa',
    springgreen: '#00ff7f',
    steelblue: '#4682b4',
    tan: '#d2b48c',
    teal: '#008080',
    thistle: '#d8bfd8',
    tomato: '#ff6347',
    turquoise: '#40e0d0',
    violet: '#ee82ee',
    wheat: '#f5deb3',
    white: '#ffffff',
    whitesmoke: '#f5f5f5',
    yellow: '#ffff00',
    yellowgreen: '#9acd32',
};
function leadingZero(number, length) {
    if (number.length > length) {
        return number;
    }
    let res = number;
    (0,_utils__WEBPACK_IMPORTED_MODULE_0__.range)(0, length - 1).forEach((_) => {
        res = '0' + res;
    });
    return res.slice(length * -1);
}
function isValidRGB(str) {
    return hexRX.test(str);
}
function colorNameToHex(colorName) {
    return colorMap[colorName.toLowerCase()] || colorName;
}
// @license RGB <-> HSV conversion utilities based off of http://www.cs.rit.edu/~ncs/color/t_convert.html
function hexToRGB(str) {
    const hexStr = colorNameToHex(str);
    if (!isValidRGB(hexStr)) {
        return false;
    }
    return hexStr
        .replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, (m, r, g, b) => '#' + r + r + g + g + b + b)
        .substring(1)
        .match(/.{2}/g)
        .map((x) => parseInt(x, 16));
}
function rgbToHEX(r, g, b) {
    const hexPreFix = '#';
    const hexStr = hexPreFix +
        leadingZero(r.toString(16), 2) +
        leadingZero(g.toString(16), 2) +
        leadingZero(b.toString(16), 2);
    if (isValidRGB(hexStr)) {
        return hexStr;
    }
    return false;
}
function getRGBA(str, opacity) {
    const hexStr = colorNameToHex(str);
    if (isValidRGB(hexStr)) {
        const [r, g, b] = hexToRGB(hexStr);
        return `rgba(${r}, ${g}, ${b}, ${opacity})`;
    }
    if (rgbRX.test(str)) {
        const match = rgbRX.exec(str);
        return `rgba(${match[1]}, ${match[2]}, ${match[3]}, ${opacity})`;
    }
    if (rgbaRX.test(str)) {
        const match = rgbaRX.exec(str);
        return `rgba(${match[1]}, ${match[2]}, ${match[3]}, ${opacity})`;
    }
    return str;
}
function getAlpha(str) {
    if (rgbaRX.test(str)) {
        const match = rgbaRX.exec(str);
        return Number(match[4]);
    }
    return 1;
}
function rgba(color, opacity = 1) {
    const alpha = getAlpha(color) * opacity;
    return getRGBA(color, alpha);
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/colorSpectrum.js":
/*!************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/colorSpectrum.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "makeDistances": () => (/* binding */ makeDistances),
/* harmony export */   "getColorRatio": () => (/* binding */ getColorRatio),
/* harmony export */   "getSpectrumColor": () => (/* binding */ getSpectrumColor)
/* harmony export */ });
/* harmony import */ var _color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");


function makeDistances(startRGB, endRGB) {
    return startRGB.map((value, index) => endRGB[index] - value);
}
function getColorRatio(limit, value) {
    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(value)) {
        return;
    }
    const divNumber = Math.abs(limit.max - limit.min);
    return divNumber && !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isNull)(value) ? (value - limit.min) / divNumber : 0;
}
function getSpectrumColor(ratio, distances, startRGB) {
    const rgbColor = startRGB.map((start, index) => start + parseInt(String(distances[index] * ratio), 10));
    const color = (0,_color__WEBPACK_IMPORTED_MODULE_1__.rgbToHEX)(...rgbColor);
    return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isString)(color) ? color : '';
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/coordinate.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/coordinate.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCoordinateYValue": () => (/* binding */ getCoordinateYValue),
/* harmony export */   "getCoordinateXValue": () => (/* binding */ getCoordinateXValue),
/* harmony export */   "isValueAfterLastCategory": () => (/* binding */ isValueAfterLastCategory),
/* harmony export */   "getCoordinateDataIndex": () => (/* binding */ getCoordinateDataIndex),
/* harmony export */   "isCoordinateSeries": () => (/* binding */ isCoordinateSeries),
/* harmony export */   "isModelExistingInRect": () => (/* binding */ isModelExistingInRect),
/* harmony export */   "isMouseInRect": () => (/* binding */ isMouseInRect)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");

function getCoordinateYValue(datum) {
    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(datum)) {
        return datum;
    }
    return Array.isArray(datum) ? datum[1] : datum.y;
}
function getCoordinateXValue(datum) {
    return Array.isArray(datum) ? datum[0] : datum.x;
}
function isValueAfterLastCategory(value, categories) {
    const category = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.last)(categories);
    if (!category) {
        return false;
    }
    return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(value) ? value >= Number(category) : new Date(value) >= new Date(category);
}
function getCoordinateDataIndex(datum, categories, dataIndex, startIndex) {
    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(datum)) {
        return dataIndex - startIndex;
    }
    const value = getCoordinateXValue(datum);
    let index = categories.findIndex((category) => category === String(value));
    if (index === -1 && isValueAfterLastCategory(value, categories)) {
        index = categories.length;
    }
    return index;
}
function isLineCoordinateSeries(series) {
    var _a;
    if (!series.line) {
        return false;
    }
    const firstData = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getFirstValidValue)((_a = series.line[0]) === null || _a === void 0 ? void 0 : _a.data);
    return firstData && (Array.isArray(firstData) || (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(firstData));
}
function isCoordinateSeries(series) {
    return isLineCoordinateSeries(series) || !!series.scatter || !!series.bubble;
}
function isModelExistingInRect(rect, point) {
    const { height, width } = rect;
    const { x, y } = point;
    return x >= 0 && x <= width && y >= 0 && y <= height;
}
function isMouseInRect(rect, mousePosition) {
    const { x, y, width, height } = rect;
    return (mousePosition.x >= x &&
        mousePosition.x <= x + width &&
        mousePosition.y >= y &&
        mousePosition.y <= y + height);
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/dataLabels.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/dataLabels.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RADIUS_PADDING": () => (/* binding */ RADIUS_PADDING),
/* harmony export */   "getDefaultDataLabelsOptions": () => (/* binding */ getDefaultDataLabelsOptions),
/* harmony export */   "makePointLabelInfo": () => (/* binding */ makePointLabelInfo),
/* harmony export */   "makeRectLabelInfo": () => (/* binding */ makeRectLabelInfo),
/* harmony export */   "makeSectorLabelPosition": () => (/* binding */ makeSectorLabelPosition),
/* harmony export */   "makeSectorBarLabelInfo": () => (/* binding */ makeSectorBarLabelInfo),
/* harmony export */   "makeSectorLabelInfo": () => (/* binding */ makeSectorLabelInfo),
/* harmony export */   "makePieSeriesNameLabelInfo": () => (/* binding */ makePieSeriesNameLabelInfo),
/* harmony export */   "getDataLabelsOptions": () => (/* binding */ getDataLabelsOptions),
/* harmony export */   "makeLineLabelInfo": () => (/* binding */ makeLineLabelInfo)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _calculator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _sector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sector */ "./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js");
/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");




const RADIUS_PADDING = 30;
const CALLOUT_LENGTH = 20;
function getDefaultAnchor(type, withStack = false) {
    let anchor = 'auto';
    switch (type) {
        case 'point':
            anchor = 'center';
            break;
        case 'rect':
            anchor = !withStack ? 'auto' : 'center';
            break;
        case 'sector':
        case 'treemapSeriesName':
            anchor = 'center';
            break;
        case 'stackTotal':
            anchor = 'auto';
            break;
    }
    return anchor;
}
function getAnchor(dataLabelOptions, type, withStack = false) {
    return type !== 'stackTotal' &&
        (0,_utils__WEBPACK_IMPORTED_MODULE_0__.includes)(['center', 'start', 'end', 'auto', 'outer'], dataLabelOptions.anchor)
        ? dataLabelOptions.anchor
        : getDefaultAnchor(type, withStack);
}
function getDefaultDataLabelsOptions(dataLabelOptions, type, withStack = false) {
    var _a, _b, _c;
    const anchor = getAnchor(dataLabelOptions, type, withStack);
    const { offsetX = 0, offsetY = 0 } = dataLabelOptions;
    const formatter = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isFunction)(dataLabelOptions.formatter)
        ? dataLabelOptions.formatter
        : (value) => String(value) || '';
    const options = {
        anchor,
        offsetX,
        offsetY,
        formatter,
    };
    if (withStack) {
        const stackTotal = dataLabelOptions.stackTotal;
        options.stackTotal = {
            visible: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isBoolean)((_a = stackTotal) === null || _a === void 0 ? void 0 : _a.visible) ? stackTotal.visible : true,
            formatter: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isFunction)((_b = stackTotal) === null || _b === void 0 ? void 0 : _b.formatter) ? stackTotal.formatter : formatter,
        };
    }
    if (type === 'sector' && ((_c = dataLabelOptions.pieSeriesName) === null || _c === void 0 ? void 0 : _c.visible)) {
        options.pieSeriesName = Object.assign({ anchor: 'center' }, dataLabelOptions.pieSeriesName);
    }
    return options;
}
function makePointLabelInfo(point, dataLabelOptions, rect) {
    const { width, height } = rect;
    const { anchor, offsetX = 0, offsetY = 0, formatter } = dataLabelOptions;
    const { name, theme } = point;
    let textBaseline = 'middle';
    if (anchor === 'end') {
        textBaseline = 'bottom';
    }
    else if (anchor === 'start') {
        textBaseline = 'top';
    }
    const xWithOffset = point.x + offsetX;
    const yWithOffset = point.y + offsetY;
    const x = xWithOffset < 0 || xWithOffset > width ? point.x : xWithOffset;
    const y = yWithOffset < 0 || yWithOffset > height ? point.y : yWithOffset;
    return {
        type: 'point',
        x,
        y,
        text: formatter(point.value, point.data),
        textAlign: 'center',
        textBaseline,
        name,
        theme,
    };
}
function isHorizontal(direction) {
    return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.includes)(['left', 'right'], direction);
}
function makeHorizontalRectPosition(rect, anchor) {
    const { x, y, width, height, direction } = rect;
    const textBaseline = 'middle';
    const posY = y + height / 2;
    let textAlign = 'center';
    let posX;
    if (direction === 'right') {
        switch (anchor) {
            case 'start':
                textAlign = 'left';
                posX = x;
                break;
            case 'end':
                textAlign = 'right';
                posX = x + width;
                break;
            case 'center':
                textAlign = 'center';
                posX = x + width / 2;
                break;
            default:
                textAlign = 'left';
                posX = x + width;
        }
    }
    else {
        switch (anchor) {
            case 'start':
                textAlign = 'right';
                posX = x + width;
                break;
            case 'end':
                textAlign = 'left';
                posX = x;
                break;
            case 'center':
                textAlign = 'center';
                posX = x + width / 2;
                break;
            default:
                textAlign = 'right';
                posX = x;
        }
    }
    return {
        x: posX,
        y: posY,
        textAlign,
        textBaseline,
    };
}
function makeVerticalRectPosition(rect, anchor) {
    const { x, y, width, height, direction } = rect;
    const textAlign = 'center';
    const posX = x + width / 2;
    let textBaseline = 'middle';
    let posY = 0;
    if (direction === 'top') {
        switch (anchor) {
            case 'end':
                textBaseline = 'top';
                posY = y;
                break;
            case 'start':
                textBaseline = 'bottom';
                posY = y + height;
                break;
            case 'center':
                textBaseline = 'middle';
                posY = y + height / 2;
                break;
            default:
                textBaseline = 'bottom';
                posY = y;
        }
    }
    else {
        switch (anchor) {
            case 'end':
                textBaseline = 'bottom';
                posY = y + height;
                break;
            case 'start':
                textBaseline = 'top';
                posY = y;
                break;
            case 'center':
                textBaseline = 'middle';
                posY = y + height / 2;
                break;
            default:
                textBaseline = 'top';
                posY = y + height;
                break;
        }
    }
    return {
        x: posX,
        y: posY,
        textAlign,
        textBaseline,
    };
}
function adjustOverflowHorizontalRect(rect, dataLabelOptions, position) {
    const { width, value, direction, plot, theme } = rect;
    const { formatter } = dataLabelOptions;
    const font = (0,_style__WEBPACK_IMPORTED_MODULE_1__.getFont)(theme);
    const text = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isString)(value) ? value : formatter(value);
    const textWidth = (0,_calculator__WEBPACK_IMPORTED_MODULE_2__.getTextWidth)(text, font);
    let { x, textAlign } = position;
    const isOverflow = (direction === 'left' && x - textWidth < 0) || x + textWidth > plot.size;
    if (isOverflow) {
        x = rect.x + width;
        textAlign = 'right';
        if (direction === 'left' && width >= textWidth) {
            x = rect.x;
            textAlign = 'left';
        }
    }
    return {
        x,
        textAlign,
    };
}
function adjustOverflowVerticalRect(rect, dataLabelOptions, position) {
    const { height, direction, plot, theme, value } = rect;
    const font = (0,_style__WEBPACK_IMPORTED_MODULE_1__.getFont)(theme);
    const plotSize = plot.size;
    const textHeight = (0,_calculator__WEBPACK_IMPORTED_MODULE_2__.getTextHeight)(`${value}`, font); // @TODO: formatter 값해서 넘기기
    let { y, textBaseline } = position;
    const isOverflow = (!(direction === 'bottom') && y - textHeight < 0) || y + textHeight > plotSize;
    if (isOverflow) {
        y = rect.y;
        textBaseline = 'top';
        if (y + textHeight > plotSize) {
            y = rect.y;
            textBaseline = 'bottom';
        }
        if (direction === 'bottom') {
            y = rect.y + height;
            textBaseline = 'bottom';
        }
    }
    return {
        y,
        textBaseline,
    };
}
function makeHorizontalRectLabelInfo(rect, dataLabelOptions) {
    const { anchor, offsetX = 0, offsetY = 0 } = dataLabelOptions;
    const { direction, plot: { x: startOffsetX = 0, y: startOffsetY = 0 }, } = rect;
    const position = makeHorizontalRectPosition(rect, anchor);
    let { x: posX, y: posY, textAlign } = position;
    if (anchor === 'auto') {
        const adjustRect = adjustOverflowHorizontalRect(rect, dataLabelOptions, { x: posX, textAlign });
        posX = adjustRect.x;
        textAlign = adjustRect.textAlign;
    }
    posY += offsetY;
    if (direction === 'left') {
        posX = posX - offsetX;
    }
    else {
        posX = posX + offsetX;
    }
    const padding = 10;
    if (textAlign === 'right') {
        posX -= padding;
    }
    else if (textAlign === 'left') {
        posX += padding;
    }
    posX -= startOffsetX;
    posY -= startOffsetY;
    return {
        x: posX,
        y: posY,
        textAlign,
        textBaseline: position.textBaseline,
    };
}
function makeVerticalRectLabelInfo(rect, dataLabelOptions) {
    const { anchor, offsetX = 0, offsetY = 0 } = dataLabelOptions;
    const { direction, plot: { x: startOffsetX = 0, y: startOffsetY = 0 }, } = rect;
    const position = makeVerticalRectPosition(rect, anchor);
    let { x: posX, y: posY, textBaseline } = position;
    if (anchor === 'auto') {
        const adjustRect = adjustOverflowVerticalRect(rect, dataLabelOptions, position);
        posY = adjustRect.y;
        textBaseline = adjustRect.textBaseline;
    }
    posX += offsetX;
    if (direction === 'top') {
        posY = posY + offsetY;
    }
    else if (direction === 'bottom') {
        posY = posY - offsetY;
    }
    const padding = 5;
    if (textBaseline === 'bottom') {
        posY -= padding;
    }
    else if (textBaseline === 'top') {
        posY += padding;
    }
    posX -= startOffsetX;
    posY -= startOffsetY;
    return {
        x: posX,
        y: posY,
        textAlign: position.textAlign,
        textBaseline,
    };
}
function makeRectLabelInfo(rect, dataLabelOptions) {
    const { type, value, direction, name, theme } = rect;
    const horizontal = isHorizontal(direction);
    const labelPosition = horizontal
        ? makeHorizontalRectLabelInfo(rect, dataLabelOptions)
        : makeVerticalRectLabelInfo(rect, dataLabelOptions);
    const formatter = type === 'stackTotal' ? dataLabelOptions.stackTotal.formatter : dataLabelOptions.formatter;
    return Object.assign(Object.assign({ type }, labelPosition), { text: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isString)(value) ? value : formatter(value), name, seriesColor: rect.color, theme });
}
function makeSectorLabelPosition(model, dataLabelOptions) {
    const anchor = dataLabelOptions.anchor;
    const position = (0,_sector__WEBPACK_IMPORTED_MODULE_3__.getRadialAnchorPosition)((0,_sector__WEBPACK_IMPORTED_MODULE_3__.makeAnchorPositionParam)(anchor, Object.assign(Object.assign({}, model), { radius: Object.assign(Object.assign({}, model.radius), { outer: anchor === 'outer' ? model.radius.outer + RADIUS_PADDING : model.radius.outer }) })));
    const textAlign = (0,_sector__WEBPACK_IMPORTED_MODULE_3__.getRadialLabelAlign)(model, anchor);
    return Object.assign(Object.assign({}, position), { textAlign, textBaseline: hasSameAnchorPieDataLabel(dataLabelOptions) ? 'bottom' : 'middle' });
}
function makeSectorBarLabelPosition(model, dataLabelOptions) {
    const { anchor } = dataLabelOptions;
    const { clockwise, degree: { start, end }, radius: { inner, outer }, } = model;
    let startAngle = start;
    let endAngle = end;
    let textAlign = 'center';
    let rotationDegree = (start + end) / 2;
    if (anchor === 'start') {
        textAlign = clockwise ? 'left' : 'right';
        endAngle = startAngle;
        rotationDegree = start;
    }
    else if (anchor === 'end') {
        textAlign = clockwise ? 'right' : 'left';
        startAngle = endAngle;
        rotationDegree = end;
    }
    const { x, y } = (0,_sector__WEBPACK_IMPORTED_MODULE_3__.getRadialAnchorPosition)((0,_sector__WEBPACK_IMPORTED_MODULE_3__.makeAnchorPositionParam)(anchor, Object.assign(Object.assign({}, model), { degree: {
            start: startAngle,
            end: endAngle,
        }, radius: {
            inner: inner,
            outer: outer,
        } })));
    return {
        x,
        y,
        textAlign,
        textBaseline: 'middle',
        radian: (0,_sector__WEBPACK_IMPORTED_MODULE_3__.calculateDegreeToRadian)(rotationDegree, 0),
    };
}
function makeSectorBarLabelInfo(model, dataLabelOptions) {
    const { formatter } = dataLabelOptions;
    const labelPosition = makeSectorBarLabelPosition(model, dataLabelOptions);
    const { value, name, theme: dataLabelTheme } = model;
    const theme = Object.assign(Object.assign({}, dataLabelTheme), { color: dataLabelTheme.useSeriesColor ? model.color : dataLabelTheme.color });
    return Object.assign(Object.assign({ type: 'sector' }, labelPosition), { text: formatter(value), name,
        theme });
}
function makeSectorLabelInfo(model, dataLabelOptions) {
    const { formatter } = dataLabelOptions;
    const labelPosition = makeSectorLabelPosition(model, dataLabelOptions);
    const { value, name, theme: dataLabelTheme } = model;
    const anchor = dataLabelOptions.anchor;
    const theme = Object.assign(Object.assign({}, dataLabelTheme), { color: dataLabelTheme.useSeriesColor ? model.color : dataLabelTheme.color });
    return Object.assign(Object.assign({ type: 'sector' }, labelPosition), { text: formatter(value), name, callout: hasSectorCallout(dataLabelOptions) ? getPieDataLabelCallout(model, anchor) : null, theme });
}
function makePieSeriesNameLabelInfo(model, dataLabelOptions) {
    var _a;
    const seriesNameAnchor = (_a = dataLabelOptions.pieSeriesName) === null || _a === void 0 ? void 0 : _a.anchor;
    const hasOuterAnchor = seriesNameAnchor === 'outer';
    const position = (0,_sector__WEBPACK_IMPORTED_MODULE_3__.getRadialAnchorPosition)((0,_sector__WEBPACK_IMPORTED_MODULE_3__.makeAnchorPositionParam)(seriesNameAnchor, Object.assign(Object.assign({}, model), { radius: Object.assign(Object.assign({}, model.radius), { outer: hasOuterAnchor ? model.radius.outer + RADIUS_PADDING : model.radius.outer }) })));
    const textAlign = (0,_sector__WEBPACK_IMPORTED_MODULE_3__.getRadialLabelAlign)(model, seriesNameAnchor);
    const pieSeriesNameTheme = model.theme.pieSeriesName;
    const theme = Object.assign(Object.assign({}, pieSeriesNameTheme), { color: pieSeriesNameTheme.useSeriesColor ? model.color : pieSeriesNameTheme.color });
    return Object.assign(Object.assign({ type: 'pieSeriesName' }, position), { text: model.name, callout: hasPieSeriesNameCallout(dataLabelOptions)
            ? getPieDataLabelCallout(model, seriesNameAnchor)
            : null, textAlign, textBaseline: hasSameAnchorPieDataLabel(dataLabelOptions) ? 'top' : 'middle', theme });
}
function getDataLabelsOptions(options, name) {
    var _a, _b, _c, _d, _e;
    return ((_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b[name]) === null || _c === void 0 ? void 0 : _c.dataLabels) || ((_e = (_d = options) === null || _d === void 0 ? void 0 : _d.series) === null || _e === void 0 ? void 0 : _e.dataLabels) || {};
}
function makeLineLabelInfo(model, dataLabelOptions) {
    const { value, textAlign, textBaseline } = model;
    const { formatter } = dataLabelOptions;
    return Object.assign(Object.assign({}, model), { x: model.x, y: (model.y + model.y2) / 2, textAlign: (textAlign !== null && textAlign !== void 0 ? textAlign : 'center'), textBaseline: (textBaseline !== null && textBaseline !== void 0 ? textBaseline : 'middle'), text: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isString)(value) ? value : formatter(value) });
}
function hasSameAnchorPieDataLabel(dataLabelOptions) {
    var _a;
    return dataLabelOptions.anchor === ((_a = dataLabelOptions.pieSeriesName) === null || _a === void 0 ? void 0 : _a.anchor);
}
function hasSectorCallout(dataLabelOptions) {
    var _a;
    return dataLabelOptions.anchor === 'outer' || ((_a = dataLabelOptions.pieSeriesName) === null || _a === void 0 ? void 0 : _a.anchor) !== 'outer';
}
function hasPieSeriesNameCallout(dataLabelOptions) {
    var _a;
    return dataLabelOptions.anchor !== 'outer' || ((_a = dataLabelOptions.pieSeriesName) === null || _a === void 0 ? void 0 : _a.anchor) === 'outer';
}
function getPieDataLabelCallout(model, anchor) {
    if (anchor !== 'outer') {
        return null;
    }
    const { x, y } = (0,_sector__WEBPACK_IMPORTED_MODULE_3__.getRadialAnchorPosition)((0,_sector__WEBPACK_IMPORTED_MODULE_3__.makeAnchorPositionParam)('outer', Object.assign(Object.assign({}, model), { radius: Object.assign(Object.assign({}, model.radius), { outer: model.radius.outer + CALLOUT_LENGTH }) })));
    const { x: x2, y: y2 } = (0,_sector__WEBPACK_IMPORTED_MODULE_3__.getRadialAnchorPosition)((0,_sector__WEBPACK_IMPORTED_MODULE_3__.makeAnchorPositionParam)('outer', Object.assign({}, model)));
    const { callout } = model.theme;
    const theme = Object.assign(Object.assign({}, callout), { lineColor: callout.useSeriesColor ? model.color : callout.lineColor });
    return { x, y, x2, y2, theme };
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/dom.js":
/*!**************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/dom.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "findNodes": () => (/* binding */ findNodes),
/* harmony export */   "removeNode": () => (/* binding */ removeNode)
/* harmony export */ });
function findNodes(element, selector) {
    return element.querySelectorAll(selector);
}
function removeNode(node) {
    if (node.parentNode) {
        node.parentNode.removeChild(node);
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/downloader.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/downloader.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "execDownload": () => (/* binding */ execDownload),
/* harmony export */   "downloadSpreadSheet": () => (/* binding */ downloadSpreadSheet)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _coordinate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./coordinate */ "./node_modules/@toast-ui/chart/dist/esm/helpers/coordinate.js");


const DATA_URI_HEADERS = {
    xls: 'data:application/vnd.ms-excel;base64,',
    csv: 'data:text/csv;charset=utf-8,%EF%BB%BF' /* BOM for utf-8 */,
};
function getDownloadMethod() {
    let method;
    const isDownloadAttributeSupported = !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(document.createElement('a').download);
    const isMSSaveOrOpenBlobSupported = !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(window.Blob && window.navigator.msSaveOrOpenBlob);
    if (isMSSaveOrOpenBlobSupported) {
        method = downloadWithMSSaveOrOpenBlob;
    }
    else if (isDownloadAttributeSupported) {
        method = downloadWithAnchorElementDownloadAttribute;
    }
    return method;
}
/**
 * Base64 string to blob
 * original source ref: https://github.com/miguelmota/base64toblob/blob/master/base64toblob.js
 * Licence: MIT Licence
 */
function base64toBlob(base64String) {
    const contentType = base64String
        .substr(0, base64String.indexOf(';base64,'))
        .substr(base64String.indexOf(':') + 1);
    const sliceSize = 1024;
    const byteCharacters = atob(base64String.substr(base64String.indexOf(',') + 1));
    const byteArrays = [];
    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
        const slice = byteCharacters.slice(offset, offset + sliceSize);
        const byteNumbers = new Array(slice.length);
        for (let i = 0; i < slice.length; i += 1) {
            byteNumbers[i] = slice.charCodeAt(i);
        }
        byteArrays.push(new window.Uint8Array(byteNumbers));
    }
    try {
        // for IE 11
        return new Blob(byteArrays, { type: contentType });
    }
    catch (e) {
        // for IE 10
        return new Blob(byteArrays.map((byteArr) => byteArr.buffer), { type: contentType });
    }
}
function isImageExtension(extension) {
    return extension === 'jpeg' || extension === 'png';
}
function downloadWithMSSaveOrOpenBlob(fileName, extension, content, contentType) {
    const blobObject = isImageExtension(extension)
        ? base64toBlob(content)
        : new Blob([content], { type: contentType });
    window.navigator.msSaveOrOpenBlob(blobObject, `${fileName}.${extension}`);
}
function downloadWithAnchorElementDownloadAttribute(fileName, extension, content) {
    if (content) {
        const anchorElement = document.createElement('a');
        anchorElement.href = content;
        anchorElement.target = '_blank';
        anchorElement.download = `${fileName}.${extension}`;
        document.body.appendChild(anchorElement);
        anchorElement.click();
        anchorElement.remove();
    }
}
function oneLineTrim(...args) {
    const normalTag = (template, ...expressions) => template.reduce((accumulator, part, i) => accumulator + expressions[i - 1] + part);
    return normalTag(...args).replace(/\n\s*/g, '');
}
function isNeedDataEncoding() {
    const isDownloadAttributeSupported = !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(document.createElement('a').download);
    const isMSSaveOrOpenBlobSupported = !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(window.Blob && window.navigator.msSaveOrOpenBlob);
    return !isMSSaveOrOpenBlobSupported && isDownloadAttributeSupported;
}
function getBulletLongestArrayLength(arr, field) {
    return arr.reduce((acc, cur, idx) => { var _a, _b; return (!idx || acc < ((_b = (_a = cur) === null || _a === void 0 ? void 0 : _a[field]) === null || _b === void 0 ? void 0 : _b.length) ? cur[field].length : acc); }, 0);
}
function makeBulletExportData({ series }) {
    const seriesData = series.bullet.data;
    const markerCount = getBulletLongestArrayLength(seriesData, 'markers');
    const rangeCount = getBulletLongestArrayLength(seriesData, 'ranges');
    const rangesHeaders = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.range)(0, rangeCount).map((idx) => `Range ${idx + 1}`);
    const markerHeaders = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.range)(0, markerCount).map((idx) => `Marker ${idx + 1}`);
    return seriesData.reduce((acc, { data, markers, name, ranges }) => {
        const rangeDatum = rangesHeaders.map((_, index) => {
            var _a;
            const rangeData = (_a = ranges) === null || _a === void 0 ? void 0 : _a[index];
            return rangeData ? `${rangeData[0]} ~ ${rangeData[1]}` : '';
        });
        const markerDatum = markerHeaders.map((_, index) => { var _a, _b; return _b = (_a = markers) === null || _a === void 0 ? void 0 : _a[index], (_b !== null && _b !== void 0 ? _b : ''); });
        return [...acc, [name, (data !== null && data !== void 0 ? data : ''), ...rangeDatum, ...markerDatum]];
    }, [['', 'Actual', ...rangesHeaders, ...markerHeaders]]);
}
function makeHeatmapExportData({ categories, series }) {
    const xCategories = categories.x;
    return series.heatmap.data.reduce((acc, { data, yCategory }) => [
        ...acc,
        [yCategory, ...data.map((datum) => ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isNull)(datum) ? '' : datum))],
    ], [['', ...xCategories]]);
}
function recursiveTreemapData({ label, data, children = [] }, result) {
    if (data) {
        result.push([label, data]);
    }
    children.forEach((childrenData) => recursiveTreemapData(childrenData, result));
    return result;
}
function makeTreemapExportData(exportData) {
    const { series } = exportData;
    const result = [['Label', 'Data']];
    series.treemap.data.forEach((datum) => {
        recursiveTreemapData(datum, result);
    });
    return result;
}
function makeBubbleExportData(exportData) {
    const { series } = exportData;
    return series.bubble.data.reduce((acc, { name, data }) => [
        ...acc,
        ...data.map((datum) => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isNull)(datum) ? [] : [name, datum.label, String(datum.x), datum.y, datum.r]),
    ], [['Name', 'Label', 'X', 'Y', 'Radius']]);
}
function makeBoxPlotExportData(exportData) {
    var _a;
    const { series } = exportData;
    const categories = (_a = exportData.categories, (_a !== null && _a !== void 0 ? _a : []));
    return series.boxPlot.data.reduce((acc, { name, data, outliers }) => {
        const values = ((data !== null && data !== void 0 ? data : [])).map((rawData, index) => {
            var _a;
            const outlierValue = (_a = ((outliers !== null && outliers !== void 0 ? outliers : [])).find((outlier) => outlier[0] === index)) === null || _a === void 0 ? void 0 : _a[1];
            const value = outlierValue ? [...rawData, outlierValue] : [...rawData];
            return value.join();
        });
        return [...acc, [name, ...values]];
    }, [['', ...categories]]);
}
function makePieExportData(exportData) {
    var _a;
    const { series } = exportData;
    const categories = (_a = exportData.categories, (_a !== null && _a !== void 0 ? _a : []));
    return series.pie.data.reduce((acc, { name, data }) => {
        const values = Array.isArray(data)
            ? ((data !== null && data !== void 0 ? data : [])).reduce((accNestedPieValue, value) => {
                var _a;
                return [...accNestedPieValue, [value.name, (_a = value.data, (_a !== null && _a !== void 0 ? _a : ''))]];
            }, [])
            : [[name, (data !== null && data !== void 0 ? data : '')]];
        return [...acc, ...values];
    }, categories.length ? [['', ...categories]] : []);
}
function makeCoordinateExportDataValues(type, categories, data) {
    return categories.map((category, index) => {
        if (type === 'area' && Array.isArray(data[index])) {
            return data[index].join();
        }
        const foundItem = data.find((value) => category === String((0,_coordinate__WEBPACK_IMPORTED_MODULE_1__.getCoordinateXValue)(value)));
        return foundItem ? (0,_coordinate__WEBPACK_IMPORTED_MODULE_1__.getCoordinateYValue)(foundItem) : '';
    });
}
function makeExportData(exportData) {
    const { series } = exportData;
    const categories = exportData.categories;
    return Object.keys(series).reduce((acc, type) => {
        const result = series[type].data.map(({ name, data }) => {
            const values = !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getFirstValidValue)(data)) && (0,_utils__WEBPACK_IMPORTED_MODULE_0__.includes)(['line', 'area', 'scatter'], type)
                ? makeCoordinateExportDataValues(type, categories, data)
                : data.map((value) => (Array.isArray(value) ? value.join() : value));
            return [name, ...values];
        });
        return [...acc, ...result];
    }, series.gauge ? [] : [['', ...categories]]);
}
function get2DArrayFromRawData(exportData) {
    let result;
    const { series } = exportData;
    if (series.bullet) {
        result = makeBulletExportData(exportData);
    }
    else if (series.heatmap) {
        result = makeHeatmapExportData(exportData);
    }
    else if (series.bubble) {
        result = makeBubbleExportData(exportData);
    }
    else if (series.boxPlot) {
        result = makeBoxPlotExportData(exportData);
    }
    else if (series.pie) {
        result = makePieExportData(exportData);
    }
    else if (series.treemap) {
        result = makeTreemapExportData(exportData);
    }
    else {
        result = makeExportData(exportData);
    }
    return result;
}
function getTableElementStringForXLS(chartData2DArray) {
    let tableElementString = '<table>';
    chartData2DArray.forEach((row, rowIndex) => {
        const cellTagName = rowIndex === 0 ? 'th' : 'td';
        tableElementString += '<tr>';
        row.forEach((cell, cellIndex) => {
            const cellNumberClass = rowIndex !== 0 || cellIndex === 0 ? ' class="number"' : '';
            const cellString = `<${cellTagName}${cellNumberClass}>${cell}</${cellTagName}>`;
            tableElementString += cellString;
        });
        tableElementString += '</tr>';
    });
    tableElementString += '</table>';
    return tableElementString;
}
function makeXLSBodyWithRawData(chartData2DArray) {
    return oneLineTrim `<html xmlns:o="urn:schemas-microsoft-com:office:office"
        xmlns:x="urn:schemas-microsoft-com:office:excel"
        xmlns="http://www.w3.org/TR/REC-html40">
        <head>
            <!--[if gte mso 9]>
                <xml>
                    <x:ExcelWorkbook>
                        <x:ExcelWorksheets>
                            <x:ExcelWorksheet>
                                <x:Name>Ark1</x:Name>
                                <x:WorksheetOptions>
                                    <x:DisplayGridlines/>
                                </x:WorksheetOptions>
                            </x:ExcelWorksheet>
                        </x:ExcelWorksheets>
                        </x:ExcelWorkbook>
                </xml>
            <![endif]-->
            <meta name=ProgId content=Excel.Sheet>
            <meta charset=UTF-8>
        </head>
        <body>
            ${getTableElementStringForXLS(chartData2DArray)}
        </body>
        </html>`;
}
function makeCSVBodyWithRawData(chartData2DArray, option = {}) {
    const { lineDelimiter = '\u000a', itemDelimiter = ',' } = option;
    const lastRowIndex = chartData2DArray.length - 1;
    let csvText = '';
    chartData2DArray.forEach((row, rowIndex) => {
        const lastCellIndex = row.length - 1;
        row.forEach((cell, cellIndex) => {
            const cellContent = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(cell) ? cell : `"${cell}"`;
            csvText += cellContent;
            if (cellIndex < lastCellIndex) {
                csvText += itemDelimiter;
            }
        });
        if (rowIndex < lastRowIndex) {
            csvText += lineDelimiter;
        }
    });
    return csvText;
}
function execDownload(fileName, extension, content, contentType) {
    const downloadMethod = getDownloadMethod();
    if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isString)(content) || !downloadMethod) {
        return;
    }
    downloadMethod(fileName, extension, content, contentType);
}
function downloadSpreadSheet(fileName, extension, data) {
    const chartData2DArray = get2DArrayFromRawData(data);
    const contentType = DATA_URI_HEADERS[extension].replace(/(data:|;base64,|,%EF%BB%BF)/g, '');
    let content = '';
    if (extension === 'csv') {
        content = encodeURIComponent(makeCSVBodyWithRawData(chartData2DArray));
    }
    else {
        content = makeXLSBodyWithRawData(chartData2DArray);
    }
    if (isNeedDataEncoding()) {
        if (extension !== 'csv') {
            // base64 encoding for data URI scheme.
            content = window.btoa(unescape(encodeURIComponent(content)));
        }
        content = DATA_URI_HEADERS[extension] + content;
    }
    execDownload(fileName, extension, content, contentType);
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/formatDate.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/formatDate.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_DATE_FORMAT": () => (/* binding */ DEFAULT_DATE_FORMAT),
/* harmony export */   "getDateFormat": () => (/* binding */ getDateFormat),
/* harmony export */   "formatDate": () => (/* binding */ formatDate)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
// https://github.com/nhn/tui.code-snippet/blob/master/formatDate/formatDate.js

const DEFAULT_DATE_FORMAT = 'YY-MM-DD hh:mm:ss';
function getDateFormat(date) {
    if (!date) {
        return;
    }
    return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(date) ? date.format : DEFAULT_DATE_FORMAT;
}
const tokens = /[\\]*YYYY|[\\]*YY|[\\]*MMMM|[\\]*MMM|[\\]*MM|[\\]*M|[\\]*DD|[\\]*D|[\\]*HH|[\\]*H|[\\]*mm|[\\]*m|[\\]*ss|[\\]*s|[\\]*A/gi;
const MONTH_STR = [
    'Invalid month',
    'January',
    'February',
    'March',
    'April',
    'May',
    'Jun',
    'Jul',
    'August',
    'September',
    'October',
    'November',
    'December',
];
const MONTH_DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
const replaceMap = {
    M: (date) => Number(date.month),
    MM: (date) => {
        const month = date.month;
        return Number(month) < 10 ? `0${month}` : month;
    },
    MMM: (date) => MONTH_STR[Number(date.month)].substr(0, 3),
    MMMM: (date) => MONTH_STR[Number(date.month)],
    D: (date) => Number(date.date),
    d: (date) => replaceMap.D(date),
    DD: (date) => {
        const dayInMonth = date.date;
        return Number(dayInMonth) < 10 ? `0${dayInMonth}` : dayInMonth;
    },
    dd: (date) => replaceMap.DD(date),
    YY: (date) => Number(date.year) % 100,
    yy: (date) => replaceMap.YY(date),
    YYYY: (date) => {
        let prefix = '20';
        const year = date.year;
        if (year > 69 && year < 100) {
            prefix = '19';
        }
        return Number(year) < 100 ? prefix + String(year) : year;
    },
    yyyy: (date) => replaceMap.YYYY(date),
    A: (date) => date.meridiem,
    a: (date) => date.meridiem,
    hh: (date) => {
        const hour = date.hour;
        return Number(hour) < 10 ? '0' + hour : hour;
    },
    HH: (date) => replaceMap.hh(date),
    h: (date) => String(Number(date.hour)),
    H: (date) => replaceMap.h(date),
    m: (date) => String(Number(date.minute)),
    mm: (date) => {
        const minute = date.minute;
        return Number(minute) < 10 ? `0${minute}` : minute;
    },
    s: (date) => String(Number(date.second)),
    ss: (date) => {
        const second = date.second;
        return Number(second) < 10 ? `0${second}` : second;
    },
};
function isLeapYear(month, year) {
    return month === 2 && year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function isValidDate(y, m, d) {
    const year = Number(y);
    const month = Number(m);
    const date = Number(d);
    const isValidYear = (year > -1 && year < 100) || (year > 1969 && year < 2070);
    const isValidMonth = month > 0 && month < 13;
    if (!isValidYear || !isValidMonth) {
        return false;
    }
    const lastDayInMonth = isLeapYear(month, year) ? 29 : MONTH_DAYS[month];
    return date > 0 && date <= lastDayInMonth;
}
/*
 * key             | Shorthand
 * --------------- |-----------------------
 * years           | YY / YYYY / yy / yyyy
 * months(n)       | M / MM
 * months(str)     | MMM / MMMM
 * days            | D / DD / d / dd
 * hours           | H / HH / h / hh
 * minutes         | m / mm
 * seconds         | s / ss
 * meridiem(AM,PM) | A / a
 */
function formatDate(form, date, option) {
    var _a, _b, _c;
    const am = (_b = (_a = option) === null || _a === void 0 ? void 0 : _a.meridiemSet.AM, (_b !== null && _b !== void 0 ? _b : 'AM'));
    const pm = ((_c = option) === null || _c === void 0 ? void 0 : _c.meridiemSet.PM) || 'PM';
    let nDate;
    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isDate)(date)) {
        nDate = {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            date: date.getDate(),
            hour: date.getHours(),
            minute: date.getMinutes(),
            second: date.getSeconds(),
        };
    }
    else {
        const { year, month, hour, minute, second } = date;
        nDate = { year, month, date: date.date, hour, minute, second };
    }
    if (!isValidDate(nDate.year, nDate.month, nDate.date)) {
        return '';
    }
    nDate.meridiem = '';
    if (/([^\\]|^)[aA]\b/.test(form)) {
        if (nDate.hour > 12) {
            // See the clock system: https://en.wikipedia.org/wiki/12-hour_clock
            nDate.hour %= 12;
        }
        if (nDate.hour === 0) {
            nDate.hour = 12;
        }
        nDate.meridiem = nDate.hour > 11 ? pm : am;
    }
    return form.replace(tokens, (key) => {
        if (key.indexOf('\\') > -1) {
            // escape character
            return key.replace(/\\/, '');
        }
        return replaceMap[key](nDate) || '';
    });
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/geometric.js":
/*!********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/geometric.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ANGLE_CANDIDATES": () => (/* binding */ ANGLE_CANDIDATES),
/* harmony export */   "calculateRotatedWidth": () => (/* binding */ calculateRotatedWidth),
/* harmony export */   "calculateRotatedHeight": () => (/* binding */ calculateRotatedHeight)
/* harmony export */ });
const RAD = Math.PI / 180;
const ANGLE_90 = 90;
const ANGLE_CANDIDATES = [0, 25, 45, 65, 85, 90];
/**
 * Calculate adjacent.
 *
 *   H : Hypotenuse
 *   A : Adjacent
 *   O : Opposite
 *   D : Degree
 *
 *        /|
 *       / |
 *    H /  | O
 *     /   |
 *    /\ D |
 *    -----
 *       A
 */
function calculateAdjacent(degree, hypotenuse) {
    return Math.cos(degree * RAD) * hypotenuse;
}
function calculateOpposite(degree, hypotenuse) {
    return Math.sin(degree * RAD) * hypotenuse;
}
function calculateRotatedWidth(degree, width, height) {
    const centerHalf = calculateAdjacent(degree, width / 2);
    const sideHalf = calculateAdjacent(ANGLE_90 - degree, height / 2);
    return (centerHalf + sideHalf) * 2;
}
function calculateRotatedHeight(degree, width, height) {
    const centerHalf = calculateOpposite(degree, width / 2);
    const sideHalf = calculateOpposite(ANGLE_90 - degree, height / 2);
    return (centerHalf + sideHalf) * 2;
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/googleAnalytics.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/googleAnalytics.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sendHostname": () => (/* binding */ sendHostname)
/* harmony export */ });
const MS_7_DAYS = 7 * 24 * 60 * 60 * 1000;
function isExpired(date) {
    const now = new Date().getTime();
    return now - date > MS_7_DAYS;
}
function imagePing(url, trackingInfo) {
    const queryString = Object.keys(trackingInfo)
        .map((id, index) => `${index ? '&' : ''}${id}=${trackingInfo[id]}`)
        .join('');
    const trackingElement = document.createElement('img');
    trackingElement.src = `${url}?${queryString}`;
    trackingElement.style.display = 'none';
    document.body.appendChild(trackingElement);
    document.body.removeChild(trackingElement);
    return trackingElement;
}
function sendHostname() {
    const hostname = location.hostname;
    const applicationKeyForStorage = `TOAST UI chart for ${hostname}: Statistics`;
    const date = window.localStorage.getItem(applicationKeyForStorage);
    if (date && !isExpired(Number(date))) {
        return;
    }
    window.localStorage.setItem(applicationKeyForStorage, String(new Date().getTime()));
    setTimeout(() => {
        if (document.readyState === 'interactive' || document.readyState === 'complete') {
            imagePing('https://www.google-analytics.com/collect', {
                v: 1,
                t: 'event',
                tid: 'UA-129983528-2',
                cid: hostname,
                dp: hostname,
                dh: 'chart',
                el: 'chart',
                ec: 'use',
            });
        }
    }, 1000);
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/htmlSanitizer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/htmlSanitizer.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sanitizeHTML": () => (/* binding */ sanitizeHTML)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom */ "./node_modules/@toast-ui/chart/dist/esm/helpers/dom.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");


const HTML_ATTR_LIST_RX = new RegExp('^(abbr|align|alt|axis|bgcolor|border|cellpadding|cellspacing|class|clear|' +
    'color|cols|compact|coords|dir|face|headers|height|hreflang|hspace|' +
    'ismap|lang|language|nohref|nowrap|rel|rev|rows|rules|' +
    'scope|scrolling|shape|size|span|start|summary|tabindex|target|title|type|' +
    'valign|value|vspace|width|checked|mathvariant|encoding|id|name|' +
    'background|cite|href|longdesc|src|usemap|xlink:href|data-+|checked|style)', 'g');
const SVG_ATTR_LIST_RX = new RegExp('^(accent-height|accumulate|additive|alphabetic|arabic-form|ascent|' +
    'baseProfile|bbox|begin|by|calcMode|cap-height|class|color|color-rendering|content|' +
    'cx|cy|d|dx|dy|descent|display|dur|end|fill|fill-rule|font-family|font-size|font-stretch|' +
    'font-style|font-variant|font-weight|from|fx|fy|g1|g2|glyph-name|gradientUnits|hanging|' +
    'height|horiz-adv-x|horiz-origin-x|ideographic|k|keyPoints|keySplines|keyTimes|lang|' +
    'marker-end|marker-mid|marker-start|markerHeight|markerUnits|markerWidth|mathematical|' +
    'max|min|offset|opacity|orient|origin|overline-position|overline-thickness|panose-1|' +
    'path|pathLength|points|preserveAspectRatio|r|refX|refY|repeatCount|repeatDur|' +
    'requiredExtensions|requiredFeatures|restart|rotate|rx|ry|slope|stemh|stemv|stop-color|' +
    'stop-opacity|strikethrough-position|strikethrough-thickness|stroke|stroke-dasharray|' +
    'stroke-dashoffset|stroke-linecap|stroke-linejoin|stroke-miterlimit|stroke-opacity|' +
    'stroke-width|systemLanguage|target|text-anchor|to|transform|type|u1|u2|underline-position|' +
    'underline-thickness|unicode|unicode-range|units-per-em|values|version|viewBox|visibility|' +
    'width|widths|x|x-height|x1|x2|xlink:actuate|xlink:arcrole|xlink:role|xlink:show|xlink:title|' +
    'xlink:type|xml:base|xml:lang|xml:space|xmlns|xmlns:xlink|y|y1|y2|zoomAndPan)', 'g');
const DEFAULT_TAG_DENY_LIST = [
    'script',
    'iframe',
    'textarea',
    'form',
    'button',
    'select',
    'input',
    'meta',
    'style',
    'link',
    'title',
    'embed',
    'object',
];
const XSS_ATTR_RX = /href|src|background/gi;
const XSS_VALUE_RX = /((java|vb|live)script|x):/gi;
const ON_EVENT_RX = /^on\S+/;
function sanitizeHTML(html) {
    const root = document.createElement('div');
    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isString)(html)) {
        html = html.replace(/<!--[\s\S]*?-->/g, '');
        root.innerHTML = html;
    }
    else {
        root.appendChild(html);
    }
    removeUnnecessaryTags(root);
    leaveOnlyWhitelistAttribute(root);
    return root.innerHTML;
}
function removeUnnecessaryTags(html) {
    const removedTags = (0,_dom__WEBPACK_IMPORTED_MODULE_1__.findNodes)(html, DEFAULT_TAG_DENY_LIST.join(','));
    removedTags.forEach((node) => {
        (0,_dom__WEBPACK_IMPORTED_MODULE_1__.removeNode)(node);
    });
}
function isXSSAttribute(attrName, attrValue) {
    return attrName.match(XSS_ATTR_RX) && attrValue.match(XSS_VALUE_RX);
}
function removeBlacklistAttributes(node, blacklistAttrs) {
    blacklistAttrs.forEach(({ name }) => {
        if (ON_EVENT_RX.test(name)) {
            node[name] = null;
        }
        if (node.getAttribute(name)) {
            node.removeAttribute(name);
        }
    });
}
function leaveOnlyWhitelistAttribute(html) {
    (0,_dom__WEBPACK_IMPORTED_MODULE_1__.findNodes)(html, '*').forEach((node) => {
        const { attributes } = node;
        const blacklist = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.toArray)(attributes).filter((attr) => {
            const { name, value } = attr;
            const htmlAttr = name.match(HTML_ATTR_LIST_RX);
            const svgAttr = name.match(SVG_ATTR_LIST_RX);
            const xssAttr = htmlAttr && isXSSAttribute(name, value);
            return (!htmlAttr && !svgAttr) || xssAttr;
        });
        removeBlacklistAttributes(node, blacklist);
    });
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/legend.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/legend.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getActiveSeriesMap": () => (/* binding */ getActiveSeriesMap),
/* harmony export */   "showCircleLegend": () => (/* binding */ showCircleLegend),
/* harmony export */   "showLegend": () => (/* binding */ showLegend),
/* harmony export */   "showCheckbox": () => (/* binding */ showCheckbox),
/* harmony export */   "getIconType": () => (/* binding */ getIconType),
/* harmony export */   "getLegendAlign": () => (/* binding */ getLegendAlign)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");

function getActiveSeriesMap(legend) {
    return legend.data.reduce((acc, { active, label }) => (Object.assign(Object.assign({}, acc), { [label]: active })), {});
}
function showCircleLegend(options) {
    var _a, _b, _c;
    return _c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.circleLegend) === null || _b === void 0 ? void 0 : _b.visible, (_c !== null && _c !== void 0 ? _c : true);
}
function showLegend(options, series) {
    var _a, _b, _c;
    if (series.gauge ||
        (series.treemap && !((_a = options.series) === null || _a === void 0 ? void 0 : _a.useColorValue))) {
        return false;
    }
    return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)((_b = options.legend) === null || _b === void 0 ? void 0 : _b.visible) ? true : !!((_c = options.legend) === null || _c === void 0 ? void 0 : _c.visible);
}
function showCheckbox(options) {
    var _a, _b;
    return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)((_a = options.legend) === null || _a === void 0 ? void 0 : _a.showCheckbox) ? true : !!((_b = options.legend) === null || _b === void 0 ? void 0 : _b.showCheckbox);
}
// @TODO: Need to manage with chart type constant/Enum
function useRectIcon(type) {
    return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.includes)(['bar', 'column', 'area', 'pie', 'boxPlot', 'bullet', 'radialBar'], type);
}
function useCircleIcon(type) {
    return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.includes)(['bubble', 'scatter'], type);
}
function useLineIcon(type) {
    return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.includes)(['line', 'radar'], type);
}
function getIconType(type) {
    let iconType = 'spectrum';
    if (useCircleIcon(type)) {
        iconType = 'circle';
    }
    else if (useRectIcon(type)) {
        iconType = 'rect';
    }
    else if (useLineIcon(type)) {
        iconType = 'line';
    }
    return iconType;
}
function getLegendAlign(options) {
    var _a, _b;
    return _b = (_a = options.legend) === null || _a === void 0 ? void 0 : _a.align, (_b !== null && _b !== void 0 ? _b : 'right');
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/pieSeries.js":
/*!********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/pieSeries.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hasClockwiseSemiCircle": () => (/* binding */ hasClockwiseSemiCircle),
/* harmony export */   "hasCounterClockwiseSemiCircle": () => (/* binding */ hasCounterClockwiseSemiCircle),
/* harmony export */   "getRadius": () => (/* binding */ getRadius),
/* harmony export */   "getTotalAngle": () => (/* binding */ getTotalAngle),
/* harmony export */   "isSemiCircle": () => (/* binding */ isSemiCircle),
/* harmony export */   "getSemiCircleCenterY": () => (/* binding */ getSemiCircleCenterY),
/* harmony export */   "makePieTooltipData": () => (/* binding */ makePieTooltipData),
/* harmony export */   "hasNestedPieSeries": () => (/* binding */ hasNestedPieSeries),
/* harmony export */   "getNestedPieChartAliasNames": () => (/* binding */ getNestedPieChartAliasNames),
/* harmony export */   "pieTooltipLabelFormatter": () => (/* binding */ pieTooltipLabelFormatter),
/* harmony export */   "hasOuterDataLabel": () => (/* binding */ hasOuterDataLabel),
/* harmony export */   "hasOuterPieSeriesName": () => (/* binding */ hasOuterPieSeriesName)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _sector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sector */ "./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js");


const semiCircleCenterYRatio = {
    COUNTER_CLOCKWISE: 0.1,
    CLOCKWISE: 1,
};
function hasClockwiseSemiCircle(clockwise, startAngle, endAngle) {
    return (clockwise &&
        ((startAngle >= _sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_NEGATIVE_90 && endAngle <= _sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_90) ||
            (startAngle >= _sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_90 && endAngle <= _sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_180)));
}
function hasCounterClockwiseSemiCircle(clockwise, startAngle, endAngle) {
    return (!clockwise &&
        ((startAngle >= _sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_NEGATIVE_180 && endAngle <= _sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_90) ||
            (startAngle <= _sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_90 && endAngle >= _sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_NEGATIVE_90)));
}
function getRadius(defaultRadius, radius) {
    return (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isString)(radius)
        ? Number(((defaultRadius * (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getPercentageValue)(radius)) / 100).toFixed(2))
        : radius;
}
function getTotalAngle(clockwise, startAngle, endAngle) {
    const diffAngle = endAngle - startAngle;
    const absDiff = Math.abs(diffAngle);
    const needSubstractAngle = (diffAngle > _sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_0 && absDiff !== _sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_360 && !clockwise) ||
        (diffAngle < _sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_0 && absDiff !== _sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_360 && clockwise);
    return needSubstractAngle ? _sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_360 - absDiff : absDiff;
}
function isSemiCircle(clockwise, startAngle, endAngle) {
    return (getTotalAngle(clockwise, startAngle, endAngle) <= _sector__WEBPACK_IMPORTED_MODULE_0__.DEGREE_180 &&
        (hasClockwiseSemiCircle(clockwise, startAngle, endAngle) ||
            hasCounterClockwiseSemiCircle(clockwise, startAngle, endAngle)));
}
function getSemiCircleCenterY(rectHeight, clockwise) {
    return clockwise
        ? rectHeight * semiCircleCenterYRatio.CLOCKWISE
        : rectHeight * semiCircleCenterYRatio.COUNTER_CLOCKWISE;
}
function makePieTooltipData(seriesRawData, category = '') {
    return seriesRawData
        .filter(({ data }) => !(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(data))
        .map(({ data, name, color, rootParentName }) => ({
        label: name,
        color: color,
        value: data,
        category,
        rootParentName,
        templateType: 'pie',
    }));
}
function hasNestedPieSeries(series) {
    var _a;
    return !!(series.pie && Array.isArray((_a = series.pie[0]) === null || _a === void 0 ? void 0 : _a.data));
}
function getNestedPieChartAliasNames(series) {
    return series.pie.map(({ name }) => name);
}
function pieTooltipLabelFormatter(percentValue) {
    const percentageString = percentValue.toFixed(2);
    const percent = parseFloat(percentageString);
    const needSlice = percentageString.length > 5;
    return `${needSlice ? parseFloat(percentageString.substr(0, 4)) : String(percent)}%`;
}
function hasOuterDataLabel(options, series) {
    var _a, _b, _c;
    return !!series.pie && ((_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b.dataLabels) === null || _c === void 0 ? void 0 : _c.anchor) === 'outer';
}
function hasOuterPieSeriesName(options, series) {
    var _a, _b, _c, _d;
    return (!!series.pie &&
        ((_d = (_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b.dataLabels) === null || _c === void 0 ? void 0 : _c.pieSeriesName) === null || _d === void 0 ? void 0 : _d.anchor) === 'outer');
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/plot.js":
/*!***************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/plot.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isExistPlotId": () => (/* binding */ isExistPlotId)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");

function isExistPlotId(plots, data) {
    return plots.some(({ id: bandId }) => !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(bandId) && !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(data.id) && bandId === data.id);
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/range.js":
/*!****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/range.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isRangeValue": () => (/* binding */ isRangeValue),
/* harmony export */   "isRangeData": () => (/* binding */ isRangeData),
/* harmony export */   "isZooming": () => (/* binding */ isZooming),
/* harmony export */   "getDataInRange": () => (/* binding */ getDataInRange)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");

function isRangeValue(value) {
    return Array.isArray(value) && value.length === 2;
}
function isRangeData(data) {
    return Array.isArray(data) && isRangeValue((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getFirstValidValue)(data));
}
function isZooming(categories, zoomRange) {
    return !!(zoomRange && (zoomRange[0] !== 0 || zoomRange[1] !== categories.length - 1));
}
function getDataInRange(data, range) {
    if (!range) {
        return data;
    }
    return data.slice(range[0], range[1] + 1);
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/responders.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/responders.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isSameSeriesResponder": () => (/* binding */ isSameSeriesResponder),
/* harmony export */   "getNearestResponder": () => (/* binding */ getNearestResponder),
/* harmony export */   "makeRectResponderModel": () => (/* binding */ makeRectResponderModel),
/* harmony export */   "makeRectResponderModelForCoordinateType": () => (/* binding */ makeRectResponderModelForCoordinateType),
/* harmony export */   "makeTooltipCircleMap": () => (/* binding */ makeTooltipCircleMap),
/* harmony export */   "getDeepestNode": () => (/* binding */ getDeepestNode),
/* harmony export */   "isClickSameNameResponder": () => (/* binding */ isClickSameNameResponder),
/* harmony export */   "isClickSameCircleResponder": () => (/* binding */ isClickSameCircleResponder),
/* harmony export */   "isClickSameDataResponder": () => (/* binding */ isClickSameDataResponder),
/* harmony export */   "isClickSameLabelResponder": () => (/* binding */ isClickSameLabelResponder),
/* harmony export */   "isClickSameGroupedRectResponder": () => (/* binding */ isClickSameGroupedRectResponder),
/* harmony export */   "isClickSameBoxPlotDataResponder": () => (/* binding */ isClickSameBoxPlotDataResponder),
/* harmony export */   "makeGroupedSectorResponderModel": () => (/* binding */ makeGroupedSectorResponderModel)
/* harmony export */ });
/* harmony import */ var _calculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _sector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sector */ "./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js");



// eslint-disable-next-line complexity
function isSameSeriesResponder({ models, comparisonModel, name, eventDetectType, }) {
    switch (name) {
        case 'heatmap':
            return isClickSameNameResponder(models, comparisonModel);
        case 'bullet':
            return eventDetectType === 'grouped'
                ? isClickSameGroupedRectResponder(models, comparisonModel)
                : isClickSameNameResponder(models, comparisonModel);
        case 'radar':
        case 'bubble':
        case 'scatter':
        case 'area':
        case 'line':
            return isClickSameCircleResponder(models, comparisonModel);
        case 'pie':
            return isClickSameDataResponder(models, comparisonModel);
        case 'column':
        case 'bar':
            return eventDetectType === 'grouped'
                ? isClickSameGroupedRectResponder(models, comparisonModel)
                : isClickSameDataResponder(models, comparisonModel);
        case 'boxPlot':
            return eventDetectType === 'grouped'
                ? isClickSameDataResponder(models, comparisonModel)
                : isClickSameBoxPlotDataResponder(models, comparisonModel);
        case 'treemap':
            return isClickSameLabelResponder(models, comparisonModel);
        case 'gauge':
            return isClickSameNameResponder(models, comparisonModel);
        default:
            return false;
    }
}
function getNearestResponder(responders, mousePosition, rect) {
    let minDistance = Infinity;
    let result = [];
    responders.forEach((responder) => {
        const { x, y, radius } = responder;
        const responderPoint = { x: x + rect.x, y: y + rect.y };
        const distance = (0,_calculator__WEBPACK_IMPORTED_MODULE_0__.getDistance)(responderPoint, mousePosition);
        if (minDistance > distance) {
            minDistance = distance;
            result = [responder];
        }
        else if (minDistance === distance) {
            if (result.length && result[0].radius > radius) {
                result = [responder];
            }
            else {
                result.push(responder);
            }
        }
    });
    return result;
}
function makeRectResponderModel(rect, axis, categories, vertical = true) {
    const { pointOnColumn, tickDistance, rectResponderCount } = axis;
    const { width, height } = rect;
    const halfDetectAreaIndex = pointOnColumn ? [] : [0, rectResponderCount - 1];
    const halfSize = tickDistance / 2;
    return (0,_utils__WEBPACK_IMPORTED_MODULE_1__.range)(0, rectResponderCount).map((index) => {
        const half = halfDetectAreaIndex.includes(index);
        const size = half ? halfSize : tickDistance;
        let startPos = 0;
        if (index !== 0) {
            startPos += pointOnColumn ? tickDistance * index : halfSize + tickDistance * (index - 1);
        }
        return {
            type: 'rect',
            y: vertical ? 0 : startPos,
            height: vertical ? height : size,
            x: vertical ? startPos : 0,
            width: vertical ? size : width,
            index,
            label: categories[index],
        };
    });
}
function makeRectResponderModelForCoordinateType(responderInfo, rect) {
    const { width, height } = rect;
    let startPos = 0;
    return responderInfo
        .sort((a, b) => a.x - b.x)
        .reduce((acc, model, index) => {
        const { x, label } = model;
        const next = responderInfo[index + 1];
        const endPos = next ? (next.x + x) / 2 : width;
        const rectResponderModel = {
            type: 'rect',
            x: startPos,
            y: 0,
            width: endPos - startPos,
            height,
            label,
            index,
        };
        startPos = endPos;
        return [...acc, rectResponderModel];
    }, []);
}
function makeTooltipCircleMap(seriesCircleModel, tooltipDataArr) {
    const dataMap = tooltipDataArr.reduce((acc, cur) => {
        const { index, seriesIndex } = cur;
        if (!acc[seriesIndex]) {
            acc[seriesIndex] = [];
        }
        acc[seriesIndex][index] = cur;
        return acc;
    }, []);
    return seriesCircleModel.reduce((acc, model) => {
        const { seriesIndex, index } = model;
        const data = dataMap[seriesIndex][index];
        const { category } = data;
        if (!category) {
            return acc;
        }
        if (!acc[category]) {
            acc[category] = [];
        }
        acc[category].push(Object.assign(Object.assign({}, model), { data }));
        return acc;
    }, {});
}
function getDeepestNode(responders) {
    return responders.reduce((acc, responder) => {
        if (!acc.length || responder.depth > acc[0].depth) {
            return [responder];
        }
        return acc;
    }, []);
}
function isClickSameNameResponder(responders, selectedSeries) {
    var _a;
    return (responders.length && ((_a = selectedSeries) === null || _a === void 0 ? void 0 : _a.length) && responders[0].name === selectedSeries[0].name);
}
function isClickSameCircleResponder(responders, selectedSeries) {
    var _a;
    let same = false;
    if (responders.length && ((_a = selectedSeries) === null || _a === void 0 ? void 0 : _a.length) && responders.length === selectedSeries.length) {
        same = responders.reduce((acc, cur, idx) => {
            return (acc &&
                cur.seriesIndex === selectedSeries[idx].seriesIndex &&
                cur.index === selectedSeries[idx].index);
        }, true);
    }
    return same;
}
function isClickSameDataResponder(responders, selectedSeries) {
    var _a;
    let same = false;
    if (responders.length && ((_a = selectedSeries) === null || _a === void 0 ? void 0 : _a.length) && responders.length === selectedSeries.length) {
        same = responders.reduce((acc, cur, idx) => {
            var _a, _b, _c, _d;
            return (acc &&
                ((_a = cur.data) === null || _a === void 0 ? void 0 : _a.label) === ((_b = selectedSeries[idx].data) === null || _b === void 0 ? void 0 : _b.label) &&
                ((_c = cur.data) === null || _c === void 0 ? void 0 : _c.category) === ((_d = selectedSeries[idx].data) === null || _d === void 0 ? void 0 : _d.category));
        }, true);
    }
    return same;
}
function isClickSameLabelResponder(responders, selectedSeries) {
    var _a;
    return (responders.length && ((_a = selectedSeries) === null || _a === void 0 ? void 0 : _a.length) && responders[0].label === selectedSeries[0].label);
}
function isClickSameGroupedRectResponder(responders, selectedSeries) {
    var _a;
    return (responders.length && ((_a = selectedSeries) === null || _a === void 0 ? void 0 : _a.length) && responders[0].index === selectedSeries[0].index);
}
function isClickSameBoxPlotDataResponder(responders, selectedSeries) {
    var _a, _b, _c, _d, _e;
    let same = false;
    if (responders.length && ((_a = selectedSeries) === null || _a === void 0 ? void 0 : _a.length)) {
        const { type, data } = responders[0];
        same =
            type === selectedSeries[0].type &&
                ((_b = data) === null || _b === void 0 ? void 0 : _b.label) === ((_c = selectedSeries[0].data) === null || _c === void 0 ? void 0 : _c.label) &&
                ((_d = data) === null || _d === void 0 ? void 0 : _d.category) === ((_e = selectedSeries[0].data) === null || _e === void 0 ? void 0 : _e.category);
    }
    return same;
}
function makeGroupedSectorResponderModel(radiusRanges, renderOptions, categories) {
    const { centerX, centerY, angleRange: { start, end }, clockwise, } = renderOptions;
    return (0,_sector__WEBPACK_IMPORTED_MODULE_2__.getRadiusRanges)(radiusRanges, 0).map((radius, index) => ({
        type: 'sector',
        x: centerX,
        y: centerY,
        degree: { start, end },
        radius,
        name: categories[index],
        clockwise,
        index,
    }));
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEGREE_180": () => (/* binding */ DEGREE_180),
/* harmony export */   "DEGREE_NEGATIVE_180": () => (/* binding */ DEGREE_NEGATIVE_180),
/* harmony export */   "DEGREE_360": () => (/* binding */ DEGREE_360),
/* harmony export */   "DEGREE_0": () => (/* binding */ DEGREE_0),
/* harmony export */   "DEGREE_NEGATIVE_90": () => (/* binding */ DEGREE_NEGATIVE_90),
/* harmony export */   "DEGREE_90": () => (/* binding */ DEGREE_90),
/* harmony export */   "makeAnchorPositionParam": () => (/* binding */ makeAnchorPositionParam),
/* harmony export */   "calculateDegreeToRadian": () => (/* binding */ calculateDegreeToRadian),
/* harmony export */   "calculateRadianToDegree": () => (/* binding */ calculateRadianToDegree),
/* harmony export */   "getRadialAnchorPosition": () => (/* binding */ getRadialAnchorPosition),
/* harmony export */   "getRadialPosition": () => (/* binding */ getRadialPosition),
/* harmony export */   "withinRadian": () => (/* binding */ withinRadian),
/* harmony export */   "initSectorOptions": () => (/* binding */ initSectorOptions),
/* harmony export */   "getDefaultRadius": () => (/* binding */ getDefaultRadius),
/* harmony export */   "getRadialLabelAlign": () => (/* binding */ getRadialLabelAlign),
/* harmony export */   "getRadiusRanges": () => (/* binding */ getRadiusRanges),
/* harmony export */   "calculateValidAngle": () => (/* binding */ calculateValidAngle)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");

const DEGREE_180 = 180;
const DEGREE_NEGATIVE_180 = -180;
const DEGREE_360 = 360;
const DEGREE_0 = 0;
const DEGREE_NEGATIVE_90 = -90;
const DEGREE_90 = 90;
const MINIMUM_RADIUS = 10;
function makeAnchorPositionParam(anchor, model) {
    return Object.assign({ anchor }, (0,_utils__WEBPACK_IMPORTED_MODULE_0__.pick)(model, 'x', 'y', 'radius', 'degree', 'drawingStartAngle'));
}
function calculateDegreeToRadian(degree, drawingStartAngle = DEGREE_NEGATIVE_90) {
    let result = 0;
    if (degree % DEGREE_360 === 0) {
        result = (Math.PI / DEGREE_180) * drawingStartAngle;
    }
    else if (degree >= 0) {
        result = (Math.PI / DEGREE_180) * (degree + drawingStartAngle);
    }
    return result;
}
function calculateRadianToDegree(radian, drawingStartAngle = DEGREE_NEGATIVE_90) {
    return ((radian * DEGREE_180) / Math.PI - drawingStartAngle + DEGREE_360) % DEGREE_360;
}
function getRadialAnchorPosition(param) {
    const { anchor, x, y, radius: { inner, outer }, degree: { start, end }, drawingStartAngle = DEGREE_NEGATIVE_90, } = param;
    const halfDegree = start + (end - start) / 2;
    const radian = calculateDegreeToRadian(halfDegree, drawingStartAngle);
    const r = anchor === 'outer' ? outer : (outer + inner) / 2;
    return getRadialPosition(x, y, r, radian);
}
function getRadialPosition(x, y, r, radian) {
    return { x: Math.round(x + r * Math.cos(radian)), y: Math.round(y + r * Math.sin(radian)) };
}
function withinRadian(clockwise, startDegree, endDegree, currentDegree) {
    return clockwise
        ? startDegree <= currentDegree && endDegree >= currentDegree
        : startDegree >= currentDegree && endDegree <= currentDegree;
}
function initSectorOptions(options) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const clockwise = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.clockwise, (_b !== null && _b !== void 0 ? _b : true));
    return {
        clockwise,
        startAngle: (_e = (_d = (_c = options) === null || _c === void 0 ? void 0 : _c.angleRange) === null || _d === void 0 ? void 0 : _d.start, (_e !== null && _e !== void 0 ? _e : (clockwise ? DEGREE_0 : DEGREE_360))),
        endAngle: (_h = (_g = (_f = options) === null || _f === void 0 ? void 0 : _f.angleRange) === null || _g === void 0 ? void 0 : _g.end, (_h !== null && _h !== void 0 ? _h : (clockwise ? DEGREE_360 : DEGREE_0))),
    };
}
function getDefaultRadius({ width, height }, isSemiCircular = false, maxLabelWidth = 0, maxLabelHeight = 0) {
    let result;
    if (isSemiCircular) {
        result = Math.min(width / 2, height) - maxLabelHeight;
    }
    else if (width > height) {
        result = height / 2 - maxLabelHeight;
    }
    else {
        result = width / 2 - maxLabelWidth;
    }
    return Math.max(result, MINIMUM_RADIUS);
}
function getRadian(startAngle, endAngle, drawingStartAngle, needCalculateByHalf) {
    const degree = needCalculateByHalf ? (endAngle + startAngle) / 2 : startAngle;
    return calculateDegreeToRadian(degree, drawingStartAngle);
}
function getRadialLabelAlign(model, anchor, needCalculateByHalf = true) {
    const { totalAngle = DEGREE_360, degree: { start, end }, drawingStartAngle = DEGREE_NEGATIVE_90, } = model;
    let textAlign = 'center';
    if (anchor !== 'outer') {
        return textAlign;
    }
    const radian0 = calculateDegreeToRadian(0, drawingStartAngle);
    const halfRadian = calculateDegreeToRadian(totalAngle / 2, drawingStartAngle);
    const radian = getRadian(start, end, drawingStartAngle, needCalculateByHalf);
    if (drawingStartAngle >= DEGREE_NEGATIVE_90 && drawingStartAngle < DEGREE_90) {
        if (radian0 < radian && halfRadian > radian) {
            textAlign = 'left';
        }
        else if (halfRadian < radian) {
            textAlign = 'right';
        }
    }
    else if (radian0 < radian && halfRadian > radian) {
        textAlign = 'right';
    }
    else if (halfRadian < radian) {
        textAlign = 'left';
    }
    return textAlign;
}
function getRadiusRanges(radiusRanges, padding) {
    return radiusRanges.reduce((acc, cur, index) => {
        if (index) {
            acc.push({
                inner: cur + padding,
                outer: radiusRanges[index - 1] - padding,
            });
        }
        if (index === radiusRanges.length - 1) {
            acc.push({
                inner: padding,
                outer: cur - padding,
            });
        }
        return acc;
    }, []);
}
// Recalculate to an angle between 0 and 360 degrees.
function calculateValidAngle(angle) {
    if (angle < DEGREE_0) {
        return DEGREE_360 + (angle % DEGREE_360);
    }
    if (angle > DEGREE_360) {
        return angle % DEGREE_360;
    }
    return angle;
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/squarifier.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/squarifier.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "squarify": () => (/* binding */ squarify)
/* harmony export */ });
/* harmony import */ var _calculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _arrayUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./arrayUtil */ "./node_modules/@toast-ui/chart/dist/esm/helpers/arrayUtil.js");


function calculateScale(values, width, height) {
    return (width * height) / (0,_calculator__WEBPACK_IMPORTED_MODULE_0__.sum)(values);
}
function isVerticalStack({ height, width }) {
    return height < width;
}
function selectBaseSize(baseBound) {
    return isVerticalStack(baseBound) ? baseBound.height : baseBound.width;
}
function makeBaseData(seriesItems, baseBound) {
    const { width, height } = baseBound;
    const scale = calculateScale((0,_arrayUtil__WEBPACK_IMPORTED_MODULE_1__.pluck)(seriesItems, 'data'), width, height);
    return seriesItems
        .map((seriesItem) => ({
        id: seriesItem.id,
        weight: seriesItem.data * scale,
    }))
        .sort((a, b) => b.weight - a.weight);
}
/**
 * Calculate worst aspect ratio.
 * Referred function worst() in https://www.win.tue.nl/~vanwijk/stm.pdf
 */
function worst(total, min, max, baseSize) {
    const sumSquare = total * total;
    const sizeSquare = baseSize * baseSize;
    return Math.max((sizeSquare * max) / sumSquare, sumSquare / (sizeSquare * min));
}
function changedStackDirection(total, weights, baseSize, newWeight) {
    const minWeight = Math.min(...weights);
    const maxWeight = Math.max(...weights);
    const beforeWorst = worst(total, minWeight, maxWeight, baseSize);
    const newWorst = worst(total + newWeight, Math.min(minWeight, newWeight), Math.max(maxWeight, newWeight), baseSize);
    return newWorst >= beforeWorst;
}
function calculateFixedSize(baseSize, total, rows) {
    if (!total) {
        const weights = (0,_arrayUtil__WEBPACK_IMPORTED_MODULE_1__.pluck)(rows, 'weight');
        total = (0,_calculator__WEBPACK_IMPORTED_MODULE_0__.sum)(weights);
    }
    return total / baseSize;
}
function addBounds(startPosition, rows, fixedSize, callback) {
    rows.reduce((storedPosition, rowDatum) => {
        const dynamicSize = rowDatum.weight / fixedSize;
        callback(dynamicSize, storedPosition, rowDatum.id);
        return storedPosition + dynamicSize;
    }, startPosition);
}
function addBound(boundMap, id, rect) {
    boundMap[id] = rect;
}
function addBoundsForVerticalStack(boundMap, rows, baseBound, baseSize, total) {
    const fixedWidth = calculateFixedSize(baseSize, total, rows);
    addBounds(baseBound.y, rows, fixedWidth, (dynamicHeight, storedTop, id) => {
        addBound(boundMap, id, {
            x: baseBound.x,
            y: storedTop,
            width: fixedWidth,
            height: dynamicHeight,
        });
    });
    baseBound.x += fixedWidth;
    baseBound.width -= fixedWidth;
}
function addBoundsForHorizontalStack(boundMap, rows, baseBound, baseSize, total) {
    const fixedHeight = calculateFixedSize(baseSize, total, rows);
    addBounds(baseBound.x, rows, fixedHeight, (dynamicWidth, storedLeft, id) => {
        addBound(boundMap, id, {
            x: storedLeft,
            y: baseBound.y,
            width: dynamicWidth,
            height: fixedHeight,
        });
    });
    baseBound.y += fixedHeight;
    baseBound.height -= fixedHeight;
}
function getAddingBoundsFunction(baseBound) {
    if (isVerticalStack(baseBound)) {
        return addBoundsForVerticalStack;
    }
    return addBoundsForHorizontalStack;
}
function squarify(layout, seriesItems) {
    const baseBound = layout;
    const baseData = makeBaseData(seriesItems, baseBound);
    let row = [];
    let baseSize, addBoundsFunc;
    const boundMap = {};
    baseData.forEach((datum) => {
        const weights = (0,_arrayUtil__WEBPACK_IMPORTED_MODULE_1__.pluck)(row, 'weight');
        const totalWeight = (0,_calculator__WEBPACK_IMPORTED_MODULE_0__.sum)(weights);
        if (row.length && changedStackDirection(totalWeight, weights, baseSize, datum.weight)) {
            addBoundsFunc(boundMap, row, baseBound, baseSize, totalWeight);
            row = [];
        }
        if (!row.length) {
            baseSize = selectBaseSize(baseBound);
            addBoundsFunc = getAddingBoundsFunction(baseBound);
        }
        row.push(datum);
    });
    if (row.length) {
        addBoundsFunc(boundMap, row, baseBound, baseSize);
    }
    return boundMap;
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js":
/*!****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/style.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "makeStyleObj": () => (/* binding */ makeStyleObj),
/* harmony export */   "getTranslateString": () => (/* binding */ getTranslateString),
/* harmony export */   "getTitleFontString": () => (/* binding */ getTitleFontString),
/* harmony export */   "getFontStyleString": () => (/* binding */ getFontStyleString),
/* harmony export */   "getFont": () => (/* binding */ getFont),
/* harmony export */   "setLineDash": () => (/* binding */ setLineDash),
/* harmony export */   "getBoxTypeSeriesPadding": () => (/* binding */ getBoxTypeSeriesPadding),
/* harmony export */   "fillStyle": () => (/* binding */ fillStyle),
/* harmony export */   "strokeWithOptions": () => (/* binding */ strokeWithOptions)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");


function makeStyleObj(style, styleSet) {
    return style.reduce((acc, curValue) => {
        if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isString)(curValue)) {
            return Object.assign(Object.assign({}, acc), styleSet[curValue]);
        }
        return Object.assign(Object.assign({}, acc), curValue);
    }, {});
}
function getTranslateString(x, y) {
    return `translate(${x}px,${y}px)`;
}
function getTitleFontString(fontTheme) {
    const { fontFamily, fontSize, fontWeight } = fontTheme;
    return `${fontWeight} ${fontSize}px ${fontFamily}`;
}
function getFontStyleString(theme) {
    const { color, fontSize, fontFamily, fontWeight } = theme;
    return `font-weight: ${fontWeight}; font-family: ${fontFamily}; font-size: ${fontSize}px; color: ${color};`;
}
function getFont(theme) {
    return getTitleFontString((0,_utils__WEBPACK_IMPORTED_MODULE_0__.pick)(theme, 'fontFamily', 'fontWeight', 'fontSize'));
}
function setLineDash(ctx, dashSegments) {
    if (ctx.setLineDash) {
        ctx.setLineDash(dashSegments);
    }
}
function getBoxTypeSeriesPadding(tickDistance) {
    return Math.floor(tickDistance * 0.15);
}
function fillStyle(ctx, fillOption) {
    ctx.fillStyle = fillOption;
    ctx.fill();
}
function strokeWithOptions(ctx, style) {
    const { lineWidth, strokeStyle } = style;
    if (strokeStyle) {
        ctx.strokeStyle = strokeStyle;
    }
    if (lineWidth) {
        ctx.lineWidth = lineWidth;
    }
    if (ctx.lineWidth && (0,_color__WEBPACK_IMPORTED_MODULE_1__.getAlpha)(String(ctx.strokeStyle))) {
        ctx.stroke();
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/theme.js":
/*!****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/theme.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_LINE_SERIES_WIDTH": () => (/* binding */ DEFAULT_LINE_SERIES_WIDTH),
/* harmony export */   "DEFAULT_LINE_SERIES_DOT_RADIUS": () => (/* binding */ DEFAULT_LINE_SERIES_DOT_RADIUS),
/* harmony export */   "radarDefault": () => (/* binding */ radarDefault),
/* harmony export */   "boxDefault": () => (/* binding */ boxDefault),
/* harmony export */   "DEFAULT_BULLET_RANGE_OPACITY": () => (/* binding */ DEFAULT_BULLET_RANGE_OPACITY),
/* harmony export */   "defaultSeriesTheme": () => (/* binding */ defaultSeriesTheme),
/* harmony export */   "makeAxisTitleTheme": () => (/* binding */ makeAxisTitleTheme),
/* harmony export */   "makeDefaultTheme": () => (/* binding */ makeDefaultTheme),
/* harmony export */   "getDefaultTheme": () => (/* binding */ getDefaultTheme)
/* harmony export */ });
/* harmony import */ var _pieSeries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pieSeries */ "./node_modules/@toast-ui/chart/dist/esm/helpers/pieSeries.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");


const DEFAULT_LINE_SERIES_WIDTH = 2;
const DEFAULT_LINE_SERIES_DOT_RADIUS = 3;
const DEFAULT_AREA_OPACITY = 0.3;
const DEFAULT_AREA_SELECTED_SERIES_OPACITY = DEFAULT_AREA_OPACITY;
const DEFAULT_AREA_UNSELECTED_SERIES_OPACITY = 0.06;
const radarDefault = {
    LINE_WIDTH: 2,
    DOT_RADIUS: 3,
    HOVER_DOT_RADIUS: 4,
    SELECTED_SERIES_OPACITY: 0.3,
    UNSELECTED_SERIES_OPACITY: 0.05,
};
const boxDefault = {
    HOVER_THICKNESS: 4,
    BOX_HOVER: {
        shadowColor: 'rgba(0, 0, 0, 0.3)',
        shadowOffsetX: 2,
        shadowOffsetY: 2,
        shadowBlur: 6,
    },
};
const boxplotDefault = {
    OUTLIER_RADIUS: 4,
    OUTLIER_BORDER_WIDTH: 2,
    LINE_TYPE: {
        whisker: { lineWidth: 1 },
        maximum: { lineWidth: 1 },
        minimum: { lineWidth: 1 },
        median: { lineWidth: 1, color: '#ffffff' },
    },
};
const DEFAULT_BULLET_RANGE_OPACITY = [0.5, 0.3, 0.1];
const DEFAULT_PIE_LINE_WIDTH = 3;
function makeDefaultDataLabelsTheme(globalFontFamily = 'Arial') {
    return {
        fontFamily: globalFontFamily,
        fontSize: 11,
        fontWeight: 400,
        color: '#333333',
        useSeriesColor: false,
    };
}
const DEFAULT_BUBBLE_ARROW = {
    width: 8,
    height: 6,
};
const defaultSeriesTheme = {
    colors: [
        '#00a9ff',
        '#ffb840',
        '#ff5a46',
        '#00bd9f',
        '#785fff',
        '#f28b8c',
        '#989486',
        '#516f7d',
        '#28e6eb',
        '#28695f',
        '#96c85a',
        '#45ba3f',
        '#295ba0',
        '#2a4175',
        '#289399',
        '#66c8d3',
        '#617178',
        '#8a9a9a',
        '#bebebe',
        '#374b5a',
        '#64eba0',
        '#ffe155',
        '#ff9141',
        '#af4beb',
        '#ff73fa',
        '#ff55b2',
        '#2869f5',
        '#3296ff',
        '#8cc3ff',
        '#2828b9',
        '#fa8787',
        '#e13782',
        '#7d5aaa',
        '#643c91',
        '#d25f5f',
        '#fabe6e',
        '#c3a9eb',
        '#b9c8f5',
        '#73a0cd',
        '#0f5a8c',
    ],
    startColor: '#ffe98a',
    endColor: '#d74177',
    lineWidth: DEFAULT_LINE_SERIES_WIDTH,
    dashSegments: [],
    borderWidth: 0,
    borderColor: '#ffffff',
    select: {
        dot: {
            radius: DEFAULT_LINE_SERIES_DOT_RADIUS,
            borderWidth: DEFAULT_LINE_SERIES_DOT_RADIUS + 2,
        },
        areaOpacity: DEFAULT_AREA_SELECTED_SERIES_OPACITY,
        restSeries: {
            areaOpacity: DEFAULT_AREA_UNSELECTED_SERIES_OPACITY,
        },
    },
    hover: {
        dot: {
            radius: DEFAULT_LINE_SERIES_DOT_RADIUS,
            borderWidth: DEFAULT_LINE_SERIES_DOT_RADIUS + 2,
        },
    },
    dot: {
        radius: DEFAULT_LINE_SERIES_DOT_RADIUS,
    },
    areaOpacity: DEFAULT_AREA_OPACITY,
};
function makeAxisTitleTheme(globalFontFamily = 'Arial') {
    return {
        fontSize: 11,
        fontFamily: globalFontFamily,
        fontWeight: 700,
        color: '#bbbbbb',
    };
}
function makeCommonTextTheme(globalFontFamily = 'Arial') {
    return { fontSize: 11, fontFamily: globalFontFamily, fontWeight: 'normal', color: '#333333' };
}
function makeDefaultTheme(series, globalFontFamily = 'Arial') {
    var _a, _b;
    const axisTitleTheme = makeAxisTitleTheme(globalFontFamily);
    const commonTextTheme = makeCommonTextTheme(globalFontFamily);
    const hasRadarSeries = !!((_a = series) === null || _a === void 0 ? void 0 : _a.radar);
    const hasGaugeSeries = !!((_b = series) === null || _b === void 0 ? void 0 : _b.gauge);
    return {
        chart: {
            fontFamily: globalFontFamily,
            backgroundColor: '#ffffff',
        },
        noData: {
            fontSize: 18,
            fontFamily: globalFontFamily,
            fontWeight: 'normal',
            color: '#333333',
        },
        title: {
            fontSize: 18,
            fontFamily: globalFontFamily,
            fontWeight: 100,
            color: '#333333',
        },
        yAxis: {
            title: Object.assign({}, axisTitleTheme),
            label: Object.assign({}, commonTextTheme),
            width: 1,
            color: '#333333',
        },
        xAxis: {
            title: Object.assign({}, axisTitleTheme),
            label: Object.assign({}, commonTextTheme),
            width: 1,
            color: '#333333',
        },
        verticalAxis: {
            label: Object.assign(Object.assign({}, commonTextTheme), { textBubble: {
                    visible: hasRadarSeries,
                    backgroundColor: hasRadarSeries ? '#f3f3f3' : 'rgba(0, 0, 0, 0)',
                    borderRadius: 7,
                    paddingX: 7,
                    paddingY: 2,
                    borderColor: 'rgba(0, 0, 0, 0)',
                    borderWidth: 1,
                } }),
        },
        circularAxis: {
            title: Object.assign({}, axisTitleTheme),
            label: Object.assign({}, commonTextTheme),
            lineWidth: 1,
            strokeStyle: hasGaugeSeries ? 'rgba(0, 0, 0, 0.5)' : 'rgba(0, 0, 0, 0.05)',
            dotColor: 'rgba(0, 0, 0, 0.5)',
            tick: {
                lineWidth: 1,
                strokeStyle: 'rgba(0, 0, 0, 0.5)',
            },
        },
        legend: {
            label: {
                color: '#333333',
                fontSize: 11,
                fontWeight: 'normal',
                fontFamily: globalFontFamily,
            },
        },
        tooltip: {
            background: 'rgba(85, 85, 85, 0.95)',
            borderColor: 'rgba(255, 255, 255, 0)',
            borderWidth: 0,
            borderRadius: 3,
            borderStyle: 'solid',
            body: {
                fontSize: 12,
                fontFamily: `${globalFontFamily}, sans-serif`,
                fontWeight: 'normal',
                color: '#ffffff',
            },
            header: {
                fontSize: 13,
                fontFamily: `${globalFontFamily}, sans-serif`,
                fontWeight: 'bold',
                color: '#ffffff',
            },
        },
        plot: {
            lineColor: 'rgba(0, 0, 0, 0.05)',
            backgroundColor: 'rgba(255, 255, 255, 0)',
        },
        exportMenu: {
            button: Object.assign(Object.assign({}, makeBorderTheme(5, '#f4f4f4')), { backgroundColor: '#f4f4f4', xIcon: {
                    color: '#555555',
                    lineWidth: 2,
                }, dotIcon: {
                    color: '#555555',
                    width: 2,
                    height: 2,
                    gap: 2,
                } }),
            panel: Object.assign(Object.assign({}, makeBorderTheme(0, '#bab9ba')), { header: Object.assign(Object.assign({}, commonTextTheme), { backgroundColor: '#f4f4f4' }), body: Object.assign(Object.assign({}, commonTextTheme), { backgroundColor: '#ffffff' }) }),
        },
    };
}
function makeBorderTheme(borderRadius, borderColor, borderWidth = 1) {
    return { borderWidth, borderRadius, borderColor };
}
function makeDefaultTextBubbleTheme(visible = false, borderRadius = 7, paddingX = 5, paddingY = 1, backgroundColor = '#ffffff') {
    return {
        visible,
        paddingX,
        paddingY,
        borderRadius,
        backgroundColor,
        shadowColor: 'rgba(0, 0, 0, 0.3)',
        shadowOffsetY: 2,
        shadowBlur: 4,
    };
}
function getLineTypeSeriesTheme(globalFontFamily) {
    const defaultDataLabelTheme = makeDefaultDataLabelsTheme(globalFontFamily);
    return {
        lineWidth: defaultSeriesTheme.lineWidth,
        dashSegments: defaultSeriesTheme.dashSegments,
        select: { dot: defaultSeriesTheme.select.dot },
        hover: { dot: defaultSeriesTheme.hover.dot },
        dot: defaultSeriesTheme.dot,
        dataLabels: Object.assign(Object.assign({}, defaultDataLabelTheme), { textBubble: Object.assign(Object.assign({}, makeDefaultTextBubbleTheme()), { arrow: Object.assign({ visible: false, direction: 'bottom' }, DEFAULT_BUBBLE_ARROW) }) }),
    };
}
function getTreemapHeatmapSeriesTheme(globalFontFamily) {
    const defaultDataLabelTheme = makeDefaultDataLabelsTheme(globalFontFamily);
    return {
        startColor: defaultSeriesTheme.startColor,
        endColor: defaultSeriesTheme.endColor,
        borderWidth: 0,
        borderColor: '#ffffff',
        hover: {
            borderWidth: boxDefault.HOVER_THICKNESS,
            borderColor: '#ffffff',
        },
        select: {
            borderWidth: boxDefault.HOVER_THICKNESS,
            borderColor: '#ffffff',
        },
        dataLabels: Object.assign(Object.assign({}, defaultDataLabelTheme), { color: '#ffffff', textBubble: Object.assign({}, makeDefaultTextBubbleTheme(false, 1, 5, 1, 'rgba(255, 255, 255, 0.5)')) }),
    };
}
function getBarColumnSeriesTheme(globalFontFamily) {
    const defaultDataLabelTheme = makeDefaultDataLabelsTheme(globalFontFamily);
    return {
        areaOpacity: 1,
        hover: Object.assign(Object.assign({}, boxDefault.BOX_HOVER), { borderWidth: boxDefault.HOVER_THICKNESS, borderColor: '#ffffff', groupedRect: {
                color: '#000000',
                opacity: 0.05,
            } }),
        select: Object.assign(Object.assign({}, boxDefault.BOX_HOVER), { borderWidth: boxDefault.HOVER_THICKNESS, borderColor: '#ffffff', groupedRect: {
                color: '#000000',
                opacity: 0.2,
            }, restSeries: {
                areaOpacity: 0.2,
            }, areaOpacity: 1 }),
        connector: {
            color: 'rgba(51, 85, 139, 0.3)',
            lineWidth: 1,
            dashSegments: [],
        },
        dataLabels: Object.assign(Object.assign({}, defaultDataLabelTheme), { textBubble: Object.assign(Object.assign({}, makeDefaultTextBubbleTheme(false, 1, 4, 3)), { arrow: Object.assign({ visible: false }, DEFAULT_BUBBLE_ARROW) }), stackTotal: Object.assign(Object.assign({}, defaultDataLabelTheme), { textBubble: Object.assign(Object.assign({}, makeDefaultTextBubbleTheme(true, 1, 4, 3)), { arrow: Object.assign({ visible: true }, DEFAULT_BUBBLE_ARROW) }) }) }),
    };
}
const transparentColor = 'rgba(255, 255, 255, 0)';
const defaultThemeMakers = {
    line: (globalFontFamily) => (Object.assign({}, getLineTypeSeriesTheme(globalFontFamily))),
    area: (globalFontFamily) => {
        const lineTypeSeriesTheme = getLineTypeSeriesTheme(globalFontFamily);
        return Object.assign(Object.assign({}, lineTypeSeriesTheme), { select: Object.assign(Object.assign({}, lineTypeSeriesTheme.select), { areaOpacity: DEFAULT_AREA_SELECTED_SERIES_OPACITY, restSeries: defaultSeriesTheme.select.restSeries }), areaOpacity: DEFAULT_AREA_OPACITY });
    },
    treemap: (globalFontFamily) => getTreemapHeatmapSeriesTheme(globalFontFamily),
    heatmap: (globalFontFamily) => getTreemapHeatmapSeriesTheme(globalFontFamily),
    scatter: () => ({
        size: 12,
        borderWidth: 1.5,
        fillColor: transparentColor,
        select: {
            fillColor: 'rgba(255, 255, 255, 1)',
            borderWidth: 2.5,
            size: 12,
        },
        hover: {
            fillColor: 'rgba(255, 255, 255, 1)',
            borderWidth: 2.5,
            size: 12,
        },
    }),
    bubble: () => ({
        borderWidth: 0,
        borderColor: transparentColor,
        select: {},
        hover: {
            shadowColor: 'rgba(0, 0, 0, 0.3)',
            shadowBlur: 2,
            shadowOffsetY: 2,
            lineWidth: 2,
        },
    }),
    radar: () => ({
        areaOpacity: radarDefault.SELECTED_SERIES_OPACITY,
        hover: {
            dot: {
                radius: radarDefault.HOVER_DOT_RADIUS,
                borderWidth: radarDefault.HOVER_DOT_RADIUS + 1,
            },
        },
        select: {
            dot: {
                radius: radarDefault.HOVER_DOT_RADIUS,
                borderWidth: radarDefault.HOVER_DOT_RADIUS + 1,
            },
            restSeries: {
                areaOpacity: radarDefault.UNSELECTED_SERIES_OPACITY,
            },
            areaOpacity: radarDefault.SELECTED_SERIES_OPACITY,
        },
        dot: {
            radius: radarDefault.DOT_RADIUS,
        },
    }),
    bar: (globalFontFamily) => (Object.assign({}, getBarColumnSeriesTheme(globalFontFamily))),
    column: (globalFontFamily) => (Object.assign({}, getBarColumnSeriesTheme(globalFontFamily))),
    bullet: (globalFontFamily) => {
        const defaultDataLabelTheme = makeDefaultDataLabelsTheme(globalFontFamily);
        return {
            areaOpacity: 1,
            barWidthRatios: {
                rangeRatio: 1,
                bulletRatio: 0.5,
                markerRatio: 0.8,
            },
            markerLineWidth: 1,
            borderWidth: 0,
            borderColor: 'rgba(255, 255, 255, 0)',
            hover: Object.assign(Object.assign({}, boxDefault.BOX_HOVER), { borderWidth: boxDefault.HOVER_THICKNESS, borderColor: '#ffffff', groupedRect: {
                    color: '#000000',
                    opacity: 0.05,
                } }),
            select: Object.assign(Object.assign({}, boxDefault.BOX_HOVER), { borderWidth: boxDefault.HOVER_THICKNESS, borderColor: '#ffffff', groupedRect: {
                    color: '#000000',
                    opacity: 0.2,
                }, restSeries: {
                    areaOpacity: 0.2,
                }, areaOpacity: 1 }),
            dataLabels: Object.assign(Object.assign({}, defaultDataLabelTheme), { textBubble: Object.assign(Object.assign({}, makeDefaultTextBubbleTheme()), { arrow: Object.assign({ visible: false }, DEFAULT_BUBBLE_ARROW) }), marker: Object.assign(Object.assign({}, defaultDataLabelTheme), { fontSize: 9, useSeriesColor: true, textBubble: Object.assign(Object.assign({}, makeDefaultTextBubbleTheme(true)), { backgroundColor: 'rgba(255, 255, 255, 0.8)', shadowColor: 'rgba(0, 0, 0, 0.0)', shadowOffsetX: 0, shadowOffsetY: 0, shadowBlur: 0, arrow: Object.assign({ visible: false }, DEFAULT_BUBBLE_ARROW) }) }) }),
        };
    },
    boxPlot: () => ({
        areaOpacity: 1,
        barWidthRatios: {
            barRatio: 1,
            minMaxBarRatio: 0.5,
        },
        markerLineWidth: 1,
        dot: {
            color: '#ffffff',
            radius: boxplotDefault.OUTLIER_RADIUS,
            borderWidth: boxplotDefault.OUTLIER_BORDER_WIDTH,
            useSeriesColor: false,
        },
        rect: { borderWidth: 0 },
        line: Object.assign({}, boxplotDefault.LINE_TYPE),
        hover: Object.assign(Object.assign({}, boxDefault.BOX_HOVER), { rect: { borderWidth: boxDefault.HOVER_THICKNESS, borderColor: '#ffffff' }, dot: {
                radius: boxplotDefault.OUTLIER_RADIUS,
                borderWidth: 0,
                useSeriesColor: true,
            }, line: Object.assign({}, boxplotDefault.LINE_TYPE) }),
        select: Object.assign(Object.assign({}, boxDefault.BOX_HOVER), { rect: { borderWidth: boxDefault.HOVER_THICKNESS, borderColor: '#ffffff' }, dot: {
                radius: boxplotDefault.OUTLIER_RADIUS,
                borderWidth: 0,
                useSeriesColor: true,
            }, line: Object.assign({}, boxplotDefault.LINE_TYPE), restSeries: {
                areaOpacity: 0.2,
            }, areaOpacity: 1 }),
    }),
    pie: (globalFontFamily, { hasOuterAnchor = false, hasOuterAnchorPieSeriesName = false }, isNestedPieChart = false) => {
        const defaultDataLabelTheme = makeDefaultDataLabelsTheme(globalFontFamily);
        return {
            areaOpacity: 1,
            strokeStyle: isNestedPieChart ? '#ffffff' : 'rgba(255, 255, 255, 0)',
            lineWidth: isNestedPieChart ? 1 : 0,
            hover: {
                lineWidth: DEFAULT_PIE_LINE_WIDTH,
                strokeStyle: '#ffffff',
                shadowColor: '#cccccc',
                shadowBlur: 5,
                shadowOffsetX: 0,
                shadowOffsetY: 0,
            },
            select: {
                lineWidth: DEFAULT_PIE_LINE_WIDTH,
                strokeStyle: '#ffffff',
                shadowColor: '#cccccc',
                shadowBlur: 5,
                shadowOffsetX: 0,
                shadowOffsetY: 0,
                restSeries: {
                    areaOpacity: 0.3,
                },
                areaOpacity: 1,
            },
            dataLabels: {
                fontFamily: globalFontFamily,
                fontSize: 16,
                fontWeight: 600,
                color: hasOuterAnchor ? '#333333' : '#ffffff',
                useSeriesColor: hasOuterAnchor,
                textBubble: Object.assign({}, makeDefaultTextBubbleTheme(false, 0)),
                callout: {
                    lineWidth: 1,
                    useSeriesColor: true,
                    lineColor: '#e9e9e9',
                },
                pieSeriesName: Object.assign(Object.assign({}, defaultDataLabelTheme), { useSeriesColor: hasOuterAnchorPieSeriesName, color: hasOuterAnchorPieSeriesName ? '#333333' : '#ffffff', textBubble: Object.assign({}, makeDefaultTextBubbleTheme(false, 0)) }),
            },
        };
    },
    radialBar: (globalFontFamily) => ({
        areaOpacity: 1,
        strokeStyle: 'rgba(255, 255, 255, 0)',
        lineWidth: 0,
        hover: {
            lineWidth: DEFAULT_PIE_LINE_WIDTH,
            strokeStyle: '#fff',
            shadowColor: '#cccccc',
            shadowBlur: 5,
            shadowOffsetX: 0,
            shadowOffsetY: 0,
            groupedSector: {
                color: '#000000',
                opacity: 0.05,
            },
        },
        select: {
            lineWidth: DEFAULT_PIE_LINE_WIDTH,
            strokeStyle: '#fff',
            shadowColor: '#cccccc',
            shadowBlur: 5,
            shadowOffsetX: 0,
            shadowOffsetY: 0,
            restSeries: {
                areaOpacity: 0.3,
            },
            areaOpacity: 1,
            groupedSector: {
                color: '#000000',
                opacity: 0.2,
            },
        },
        dataLabels: {
            fontFamily: globalFontFamily,
            fontSize: 11,
            fontWeight: 400,
            color: '#333333',
            useSeriesColor: false,
            textBubble: Object.assign({}, makeDefaultTextBubbleTheme(false, 0)),
        },
    }),
    gauge: (globalFontFamily) => ({
        areaOpacity: 1,
        hover: {
            clockHand: { baseLine: 5 },
            pin: { radius: 5, borderWidth: 5 },
            solid: {
                lineWidth: DEFAULT_PIE_LINE_WIDTH,
                strokeStyle: '#ffffff',
                shadowColor: '#cccccc',
                shadowBlur: 5,
                shadowOffsetX: 0,
                shadowOffsetY: 0,
            },
        },
        select: {
            clockHand: { baseLine: 5 },
            pin: { radius: 6, borderWidth: 4 },
            solid: {
                lineWidth: DEFAULT_PIE_LINE_WIDTH,
                strokeStyle: '#ffffff',
                shadowColor: '#cccccc',
                shadowBlur: 5,
                shadowOffsetX: 0,
                shadowOffsetY: 0,
                restSeries: {
                    areaOpacity: 0.3,
                },
                areaOpacity: 1,
            },
            areaOpacity: 1,
            restSeries: { areaOpacity: 0.3 },
        },
        clockHand: { baseLine: 4 },
        pin: { radius: 5, borderWidth: 5 },
        solid: {
            lineWidth: 0,
            backgroundSolid: { color: 'rgba(0, 0, 0, 0.1)' },
        },
        dataLabels: {
            fontFamily: globalFontFamily,
            fontSize: 11,
            fontWeight: 400,
            color: '#333333',
            useSeriesColor: false,
            textBubble: Object.assign(Object.assign({}, makeDefaultTextBubbleTheme(true, 4, 4, 3)), { shadowColor: 'rgba(0, 0, 0, 0)', shadowOffsetY: 0, shadowBlur: 0, borderColor: '#ccc', borderWidth: 1 }),
        },
    }),
};
function getSeriesTheme(globalFontFamily, seriesName, paramForPieSeries, isNestedPieChart = false) {
    if (seriesName === 'pie') {
        return defaultThemeMakers[seriesName](globalFontFamily, paramForPieSeries, isNestedPieChart);
    }
    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.includes)(['bubble', 'radar', 'boxPlot'], seriesName)) {
        return defaultThemeMakers[seriesName]();
    }
    return defaultThemeMakers[seriesName](globalFontFamily);
}
function getDefaultTheme(series, pieSeriesOuterAnchors, globalFontFamily = 'Arial', isNestedPieChart = false) {
    const result = Object.keys(series).reduce((acc, seriesName) => (Object.assign(Object.assign({}, acc), { series: Object.assign(Object.assign({}, acc.series), { [seriesName]: getSeriesTheme(globalFontFamily, seriesName, pieSeriesOuterAnchors) }) })), makeDefaultTheme(series, globalFontFamily));
    if (isNestedPieChart) {
        const aliasNames = (0,_pieSeries__WEBPACK_IMPORTED_MODULE_1__.getNestedPieChartAliasNames)(series);
        result.series.pie = aliasNames.reduce((acc, cur) => (Object.assign(Object.assign({}, acc), { [cur]: getSeriesTheme(globalFontFamily, 'pie', pieSeriesOuterAnchors[cur], isNestedPieChart) })), {});
    }
    return result;
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/tooltip.js":
/*!******************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/tooltip.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getValueString": () => (/* binding */ getValueString)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _range__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./range */ "./node_modules/@toast-ui/chart/dist/esm/helpers/range.js");


function isBubblePointType(value) {
    return value.hasOwnProperty('r');
}
function getValueString(value) {
    let result = '';
    if ((0,_range__WEBPACK_IMPORTED_MODULE_0__.isRangeValue)(value)) {
        result = `${value[0]} ~ ${value[1]}`;
    }
    else if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isObject)(value) && !Array.isArray(value)) {
        result = `(${value.x}, ${value.y})` + (isBubblePointType(value) ? `, r: ${value.r}` : '');
    }
    else {
        result = String(value);
    }
    return result;
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/tooltipTemplate.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/tooltipTemplate.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getDefaultTemplate": () => (/* binding */ getDefaultTemplate),
/* harmony export */   "getHeaderTemplate": () => (/* binding */ getHeaderTemplate),
/* harmony export */   "tooltipTemplates": () => (/* binding */ tooltipTemplates),
/* harmony export */   "getBodyTemplate": () => (/* binding */ getBodyTemplate)
/* harmony export */ });
/* harmony import */ var _pieSeries__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pieSeries */ "./node_modules/@toast-ui/chart/dist/esm/helpers/pieSeries.js");
/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _range__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./range */ "./node_modules/@toast-ui/chart/dist/esm/helpers/range.js");




function getSeriesNameTemplate(label, color) {
    return `<span class="toastui-chart-series-name">
    <i class="toastui-chart-icon" style="background: ${color}"></i>
    <span class="toastui-chart-name">${label}</span>
  </span>`;
}
function getTitleValueTemplate(title, value) {
    return `<div class="toastui-chart-tooltip-series">
    <span class="toastui-chart-series-name">${title}</span>
    <span class="toastui-chart-series-value">${value}</span>
  </div>`;
}
function getColorValueTemplate(color, value) {
    return `<div class="toastui-chart-tooltip-series">
    <i class="toastui-chart-icon" style="background: ${color}"></i>
    <span class="toastui-chart-series-value">${value}</span>
  </div>`;
}
function makeBulletDataTemplate(data, titleType) {
    return data
        .filter(({ title }) => title === titleType)
        .sort((a, b) => {
        if ((0,_range__WEBPACK_IMPORTED_MODULE_0__.isRangeValue)(a.value) && (0,_range__WEBPACK_IMPORTED_MODULE_0__.isRangeValue)(b.value)) {
            return a.value[0] - b.value[0];
        }
        if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(a.value) && (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(b.value)) {
            return a.value - b.value;
        }
        return 0;
    })
        .map(({ formattedValue, color }) => getColorValueTemplate(color, formattedValue))
        .join('');
}
function getDefaultTemplate(model, { header, body }, theme) {
    const { borderColor, borderWidth, background, borderRadius, borderStyle } = theme;
    const style = `border: ${borderWidth}px ${borderStyle} ${borderColor};border-radius: ${borderRadius}px;background: ${background};`;
    return `<div class="toastui-chart-tooltip" style="${style}">${header}${body}</div>`;
}
function getHeaderTemplate({ category }, theme) {
    return category
        ? `<div class="toastui-chart-tooltip-category" style="${(0,_style__WEBPACK_IMPORTED_MODULE_2__.getFontStyleString)(theme.header)}">
        ${category}
      </div>`
        : '';
}
function getDefaultBodyTemplate({ data }, theme) {
    return `
    <div class="toastui-chart-tooltip-series-wrapper" style="${(0,_style__WEBPACK_IMPORTED_MODULE_2__.getFontStyleString)(theme.body)}">
      ${data
        .map(({ label, color, formattedValue }) => `<div class="toastui-chart-tooltip-series">
                ${getSeriesNameTemplate(label, color)}
                <span class="toastui-chart-series-value">${formattedValue}</span>
              </div>`)
        .join('')}
    </div>`;
}
function getBoxPlotTemplate({ data }, theme) {
    const groupedData = data.reduce((acc, item, index) => {
        if (!index) {
            return item;
        }
        if (acc.category === item.category && acc.label === item.label) {
            acc.value = [...acc.value, ...item.value];
        }
        return acc;
    }, {});
    return `
    <div class="toastui-chart-tooltip-series-wrapper" style="${(0,_style__WEBPACK_IMPORTED_MODULE_2__.getFontStyleString)(theme.body)}">
      ${[groupedData]
        .map(({ label, color, value: values }) => `<div class="toastui-chart-tooltip-series">
              ${getSeriesNameTemplate(label, color)}
            </div>
            <div>
          ${values
        .map(({ title, formattedValue }) => getTitleValueTemplate(title, formattedValue))
        .join('')}
            </div>`)
        .join('')}
    </div>`;
}
function getBulletTemplate({ data }, theme) {
    return data.length > 1
        ? getBulletGroupedTemplate(data, theme)
        : getBulletBasicTemplate(data, theme);
}
function getBulletBasicTemplate(data, theme) {
    return `
    <div class="toastui-chart-tooltip-series-wrapper" style="${(0,_style__WEBPACK_IMPORTED_MODULE_2__.getFontStyleString)(theme.body)}">
      ${data
        .map(({ label, color, value: values }) => `<div class="toastui-chart-tooltip-series">${getSeriesNameTemplate(label, color)}</div>
            ${values
        .map(({ title, formattedValue }) => getTitleValueTemplate(title, formattedValue))
        .join('')}`)
        .join('')}
    </div>`;
}
function getBulletGroupedTemplate(data, theme) {
    const bulletData = data.map(({ value }) => value[0]);
    const [actual, ranges, markers] = ['Actual', 'Range', 'Marker'].map((titleType) => makeBulletDataTemplate(bulletData, titleType));
    return `<div class="toastui-chart-tooltip-category" style="${(0,_style__WEBPACK_IMPORTED_MODULE_2__.getFontStyleString)(theme.header)}">
      ${data[0].label}
    </div>
    <div class="toastui-chart-tooltip-series-wrapper" style="${(0,_style__WEBPACK_IMPORTED_MODULE_2__.getFontStyleString)(theme.body)}">
      ${actual ? '<div class="toastui-chart-tooltip-title">Actual</div>' : ''} ${actual}
      ${ranges ? '<div class="toastui-chart-tooltip-title">Ranges</div>' : ''} ${ranges}
      ${markers ? '<div class="toastui-chart-tooltip-title">Markers</div>' : ''} ${markers}
    </div>`;
}
function getPieTemplate({ data }, theme) {
    return `
    <div class="toastui-chart-tooltip-series-wrapper" style="${(0,_style__WEBPACK_IMPORTED_MODULE_2__.getFontStyleString)(theme.body)}">
      ${data
        .map(({ label, color, formattedValue, percentValue }) => `<div class="toastui-chart-tooltip-series">
          ${getSeriesNameTemplate(label, color)}
          <span class="toastui-chart-series-value">${(0,_pieSeries__WEBPACK_IMPORTED_MODULE_3__.pieTooltipLabelFormatter)(percentValue)}&nbsp;&nbsp;(${formattedValue})</span>
        </div>`)
        .join('')}
    </div>`;
}
function getHeatmapTemplate({ data }, theme) {
    return `${data
        .map(({ label, color, formattedValue }) => `<div class="toastui-chart-tooltip-category" style="${(0,_style__WEBPACK_IMPORTED_MODULE_2__.getFontStyleString)(theme.header)}">
          ${label}
        </div>
        <div class="toastui-chart-tooltip-series-wrapper" style="${(0,_style__WEBPACK_IMPORTED_MODULE_2__.getFontStyleString)(theme.body)}">
          <div class="toastui-chart-tooltip-series">
            ${getSeriesNameTemplate(formattedValue, color)}
          </div>
        </div>`)
        .join('')}`;
}
const tooltipTemplates = {
    default: getDefaultTemplate,
    defaultHeader: getHeaderTemplate,
    defaultBody: getDefaultBodyTemplate,
    boxPlot: getBoxPlotTemplate,
    bullet: getBulletTemplate,
    pie: getPieTemplate,
    heatmap: getHeatmapTemplate,
};
function getBodyTemplate(type) {
    return tooltipTemplates[type || 'defaultBody'];
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isExist": () => (/* binding */ isExist),
/* harmony export */   "isDate": () => (/* binding */ isDate),
/* harmony export */   "isUndefined": () => (/* binding */ isUndefined),
/* harmony export */   "isNull": () => (/* binding */ isNull),
/* harmony export */   "isBoolean": () => (/* binding */ isBoolean),
/* harmony export */   "isNumber": () => (/* binding */ isNumber),
/* harmony export */   "isString": () => (/* binding */ isString),
/* harmony export */   "isInteger": () => (/* binding */ isInteger),
/* harmony export */   "isObject": () => (/* binding */ isObject),
/* harmony export */   "isFunction": () => (/* binding */ isFunction),
/* harmony export */   "forEach": () => (/* binding */ forEach),
/* harmony export */   "forEachArray": () => (/* binding */ forEachArray),
/* harmony export */   "range": () => (/* binding */ range),
/* harmony export */   "toArray": () => (/* binding */ toArray),
/* harmony export */   "includes": () => (/* binding */ includes),
/* harmony export */   "pick": () => (/* binding */ pick),
/* harmony export */   "omit": () => (/* binding */ omit),
/* harmony export */   "pickProperty": () => (/* binding */ pickProperty),
/* harmony export */   "pickPropertyWithMakeup": () => (/* binding */ pickPropertyWithMakeup),
/* harmony export */   "debounce": () => (/* binding */ debounce),
/* harmony export */   "merge": () => (/* binding */ merge),
/* harmony export */   "throttle": () => (/* binding */ throttle),
/* harmony export */   "deepMergedCopy": () => (/* binding */ deepMergedCopy),
/* harmony export */   "deepCopyArray": () => (/* binding */ deepCopyArray),
/* harmony export */   "deepCopy": () => (/* binding */ deepCopy),
/* harmony export */   "sortCategories": () => (/* binding */ sortCategories),
/* harmony export */   "sortNumber": () => (/* binding */ sortNumber),
/* harmony export */   "first": () => (/* binding */ first),
/* harmony export */   "last": () => (/* binding */ last),
/* harmony export */   "hasNegative": () => (/* binding */ hasNegative),
/* harmony export */   "sum": () => (/* binding */ sum),
/* harmony export */   "hasPositiveOnly": () => (/* binding */ hasPositiveOnly),
/* harmony export */   "hasNegativeOnly": () => (/* binding */ hasNegativeOnly),
/* harmony export */   "getFirstValidValue": () => (/* binding */ getFirstValidValue),
/* harmony export */   "getPercentageValue": () => (/* binding */ getPercentageValue),
/* harmony export */   "calculateSizeWithPercentString": () => (/* binding */ calculateSizeWithPercentString),
/* harmony export */   "getInitialSize": () => (/* binding */ getInitialSize),
/* harmony export */   "isAutoValue": () => (/* binding */ isAutoValue)
/* harmony export */ });
function isExist(value) {
    return !isUndefined(value) && !isNull(value);
}
function isDate(value) {
    return value instanceof Date;
}
function isUndefined(value) {
    return typeof value === 'undefined';
}
function isNull(value) {
    return value === null;
}
function isBoolean(value) {
    return typeof value === 'boolean';
}
function isNumber(value) {
    return typeof value === 'number';
}
function isString(value) {
    return typeof value === 'string';
}
function isInteger(value) {
    return isNumber(value) && isFinite(value) && Math.floor(value) === value;
}
function isObject(obj) {
    return typeof obj === 'object' && obj !== null;
}
function isFunction(value) {
    return typeof value === 'function';
}
function forEach(obj, cb) {
    for (const key in obj) {
        if (obj.hasOwnProperty(key)) {
            cb(obj[key], key);
        }
    }
}
function forEachArray(arr, iteratee, context = null) {
    for (let index = 0, len = arr.length; index < len; index += 1) {
        if (iteratee.call(context, arr[index], index, arr) === false) {
            break;
        }
    }
}
function range(start, stop, step) {
    if (isUndefined(stop)) {
        stop = start || 0;
        start = 0;
    }
    step = step || 1;
    const arr = [];
    if (stop) {
        const flag = step < 0 ? -1 : 1;
        stop *= flag;
        for (; start * flag < stop; start += step) {
            arr.push(start);
        }
    }
    return arr;
}
function toArray(arrayLike) {
    let arr = [];
    try {
        arr = Array.prototype.slice.call(arrayLike);
    }
    catch (e) {
        forEachArray(arrayLike, function (value) {
            arr.push(value);
        });
    }
    return arr;
}
function includes(arr, searchItem, searchIndex) {
    if (typeof searchIndex === 'number' && arr[searchIndex] !== searchItem) {
        return false;
    }
    for (const item of arr) {
        if (item === searchItem) {
            return true;
        }
    }
    return false;
}
function pick(obj, ...propNames) {
    const resultMap = {};
    Object.keys(obj).forEach((key) => {
        if (includes(propNames, key)) {
            resultMap[key] = obj[key];
        }
    });
    return resultMap;
}
function omit(obj, ...propNames) {
    const resultMap = {};
    Object.keys(obj).forEach((key) => {
        if (!includes(propNames, key)) {
            resultMap[key] = obj[key];
        }
    });
    return resultMap;
}
function pickProperty(target, keys) {
    const { length } = keys;
    if (length) {
        for (let i = 0; i < length; i += 1) {
            if (isUndefined(target) || isNull(target)) {
                return null;
            }
            target = target[keys[i]];
        }
    }
    return target;
}
function pickPropertyWithMakeup(target, args) {
    const { length } = args;
    if (length) {
        for (let i = 0; i < length; i += 1) {
            if (isUndefined(target[args[i]])) {
                target[args[i]] = {};
            }
            target = target[args[i]];
        }
    }
    return target;
}
function debounce(fn, delay = 0) {
    let timer;
    function debounced(...args) {
        window.clearTimeout(timer);
        timer = window.setTimeout(() => {
            fn(...args);
        }, delay);
    }
    return debounced;
}
function merge(target, ...args) {
    target = target || {};
    args.forEach((obj) => {
        if (!obj) {
            return;
        }
        forEach(obj, (item, key) => {
            if (Object.prototype.toString.call(item) === '[object Object]') {
                target[key] = merge(target[key], item);
            }
            else {
                target[key] = item;
            }
        });
    });
    return target;
}
function throttle(fn, interval = 0) {
    let base = null;
    let isLeading = true;
    const tick = function (...args) {
        fn(...args);
        base = null;
    };
    let stamp = 0;
    const debounced = debounce(tick, interval);
    function throttled(...args) {
        if (isLeading) {
            tick(...args);
            isLeading = false;
            return;
        }
        stamp = Number(new Date());
        base = base || stamp;
        debounced(args);
        if (stamp - base >= interval) {
            tick(args);
        }
    }
    function reset() {
        // eslint-disable-line require-jsdoc
        isLeading = true;
        base = null;
    }
    throttled.reset = reset;
    return throttled;
}
function deepMergedCopy(targetObj, obj) {
    const resultObj = Object.assign({}, targetObj);
    Object.keys(obj).forEach((prop) => {
        if (isObject(resultObj[prop])) {
            if (Array.isArray(obj[prop])) {
                resultObj[prop] = deepCopyArray(obj[prop]);
            }
            else if (resultObj.hasOwnProperty(prop)) {
                resultObj[prop] = deepMergedCopy(resultObj[prop], obj[prop]);
            }
            else {
                resultObj[prop] = deepCopy(obj[prop]);
            }
        }
        else {
            resultObj[prop] = obj[prop];
        }
    });
    return resultObj;
}
function deepCopyArray(items) {
    return items.map((item) => {
        if (isObject(item)) {
            return Array.isArray(item) ? deepCopyArray(item) : deepCopy(item);
        }
        return item;
    });
}
function deepCopy(obj) {
    const resultObj = {};
    const keys = Object.keys(obj);
    if (!keys.length) {
        return obj;
    }
    keys.forEach((prop) => {
        if (isObject(obj[prop])) {
            resultObj[prop] = Array.isArray(obj[prop]) ? deepCopyArray(obj[prop]) : deepCopy(obj[prop]);
        }
        else {
            resultObj[prop] = obj[prop];
        }
    });
    return resultObj;
}
function sortCategories(x, y) {
    return isInteger(x) ? Number(x) - Number(y) : new Date(x).getTime() - new Date(y).getTime();
}
function sortNumber(x, y) {
    return x - y;
}
function first(items) {
    // eslint-disable-next-line no-undefined
    return items.length ? items[0] : undefined;
}
function last(items) {
    // eslint-disable-next-line no-undefined
    return items.length ? items[items.length - 1] : undefined;
}
function hasNegative(values = []) {
    return values.some((value) => Number(value) < 0);
}
function sum(items) {
    return items.reduce((a, b) => a + b, 0);
}
function hasPositiveOnly(values) {
    return values.every((value) => Number(value) >= 0);
}
function hasNegativeOnly(values) {
    return values.every((value) => Number(value) <= 0);
}
function getFirstValidValue(values) {
    var _a;
    return (_a = values) === null || _a === void 0 ? void 0 : _a.find((value) => value !== null);
}
function getPercentageValue(text) {
    return Number(text.substr(0, text.length - 1));
}
function calculateSizeWithPercentString(size, value) {
    return isNumber(value) ? value : Number(((size * getPercentageValue(value)) / 100).toFixed(2));
}
function getInitialSize(size) {
    return isNumber(size) ? size : 0;
}
function isAutoValue(value) {
    return value === 'auto';
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/helpers/validation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/helpers/validation.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isAvailableShowTooltipInfo": () => (/* binding */ isAvailableShowTooltipInfo),
/* harmony export */   "isAvailableSelectSeries": () => (/* binding */ isAvailableSelectSeries),
/* harmony export */   "isNoData": () => (/* binding */ isNoData)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");

function isAvailableShowTooltipInfo(info, eventDetectType, targetChartType) {
    const { index, seriesIndex, chartType } = info;
    return ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(index) &&
        (eventDetectType === 'grouped' || (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(seriesIndex)) &&
        ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(chartType) || chartType === targetChartType));
}
function isAvailableSelectSeries(info, targetChartType) {
    const { index, seriesIndex, chartType } = info;
    return ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(index) &&
        (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(seriesIndex) &&
        ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(chartType) || chartType === targetChartType));
}
function isNoData(series) {
    return Object.keys(series).reduce((acc, chartType) => !series[chartType].data.length && acc, true);
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Chart),
/* harmony export */   "LineChart": () => (/* reexport safe */ _charts_lineChart__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   "AreaChart": () => (/* reexport safe */ _charts_areaChart__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "BarChart": () => (/* reexport safe */ _charts_barChart__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "ColumnChart": () => (/* reexport safe */ _charts_columnChart__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "PieChart": () => (/* reexport safe */ _charts_pieChart__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   "HeatmapChart": () => (/* reexport safe */ _charts_heatmapChart__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   "BubbleChart": () => (/* reexport safe */ _charts_bubbleChart__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   "ScatterChart": () => (/* reexport safe */ _charts_scatterChart__WEBPACK_IMPORTED_MODULE_8__["default"]),
/* harmony export */   "BulletChart": () => (/* reexport safe */ _charts_bulletChart__WEBPACK_IMPORTED_MODULE_9__["default"]),
/* harmony export */   "RadarChart": () => (/* reexport safe */ _charts_radarChart__WEBPACK_IMPORTED_MODULE_10__["default"]),
/* harmony export */   "TreemapChart": () => (/* reexport safe */ _charts_treemapChart__WEBPACK_IMPORTED_MODULE_11__["default"]),
/* harmony export */   "NestedPieChart": () => (/* reexport safe */ _charts_nestedPieChart__WEBPACK_IMPORTED_MODULE_12__["default"]),
/* harmony export */   "LineAreaChart": () => (/* reexport safe */ _charts_lineAreaChart__WEBPACK_IMPORTED_MODULE_13__["default"]),
/* harmony export */   "LineScatterChart": () => (/* reexport safe */ _charts_lineScatterChart__WEBPACK_IMPORTED_MODULE_14__["default"]),
/* harmony export */   "ColumnLineChart": () => (/* reexport safe */ _charts_columnLineChart__WEBPACK_IMPORTED_MODULE_15__["default"]),
/* harmony export */   "BoxPlotChart": () => (/* reexport safe */ _charts_boxPlotChart__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "RadialBarChart": () => (/* reexport safe */ _charts_radialBarChart__WEBPACK_IMPORTED_MODULE_16__["default"]),
/* harmony export */   "GaugeChart": () => (/* reexport safe */ _charts_gaugeChart__WEBPACK_IMPORTED_MODULE_17__["default"])
/* harmony export */ });
/* harmony import */ var _charts_lineChart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./charts/lineChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/lineChart.js");
/* harmony import */ var _charts_pieChart__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./charts/pieChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/pieChart.js");
/* harmony import */ var _charts_heatmapChart__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./charts/heatmapChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/heatmapChart.js");
/* harmony import */ var _charts_areaChart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./charts/areaChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/areaChart.js");
/* harmony import */ var _charts_lineScatterChart__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./charts/lineScatterChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/lineScatterChart.js");
/* harmony import */ var _charts_lineAreaChart__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./charts/lineAreaChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/lineAreaChart.js");
/* harmony import */ var _charts_barChart__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./charts/barChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/barChart.js");
/* harmony import */ var _charts_columnChart__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./charts/columnChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/columnChart.js");
/* harmony import */ var _charts_columnLineChart__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./charts/columnLineChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/columnLineChart.js");
/* harmony import */ var _charts_bubbleChart__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./charts/bubbleChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/bubbleChart.js");
/* harmony import */ var _charts_scatterChart__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./charts/scatterChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/scatterChart.js");
/* harmony import */ var _charts_bulletChart__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./charts/bulletChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/bulletChart.js");
/* harmony import */ var _charts_nestedPieChart__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./charts/nestedPieChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/nestedPieChart.js");
/* harmony import */ var _charts_radarChart__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./charts/radarChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/radarChart.js");
/* harmony import */ var _charts_treemapChart__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./charts/treemapChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/treemapChart.js");
/* harmony import */ var _charts_boxPlotChart__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./charts/boxPlotChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/boxPlotChart.js");
/* harmony import */ var _charts_radialBarChart__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./charts/radialBarChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/radialBarChart.js");
/* harmony import */ var _charts_gaugeChart__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./charts/gaugeChart */ "./node_modules/@toast-ui/chart/dist/esm/charts/gaugeChart.js");


















class Chart {
}
Chart.lineChart = (props) => {
    return new _charts_lineChart__WEBPACK_IMPORTED_MODULE_0__["default"](props);
};
Chart.areaChart = (props) => {
    return new _charts_areaChart__WEBPACK_IMPORTED_MODULE_1__["default"](props);
};
Chart.barChart = (props) => {
    return new _charts_barChart__WEBPACK_IMPORTED_MODULE_2__["default"](props);
};
Chart.boxPlotChart = (props) => {
    return new _charts_boxPlotChart__WEBPACK_IMPORTED_MODULE_3__["default"](props);
};
Chart.columnChart = (props) => {
    return new _charts_columnChart__WEBPACK_IMPORTED_MODULE_4__["default"](props);
};
Chart.pieChart = (props) => {
    return new _charts_pieChart__WEBPACK_IMPORTED_MODULE_5__["default"](props);
};
Chart.heatmapChart = (props) => {
    return new _charts_heatmapChart__WEBPACK_IMPORTED_MODULE_6__["default"](props);
};
Chart.bubbleChart = (props) => {
    return new _charts_bubbleChart__WEBPACK_IMPORTED_MODULE_7__["default"](props);
};
Chart.scatterChart = (props) => {
    return new _charts_scatterChart__WEBPACK_IMPORTED_MODULE_8__["default"](props);
};
Chart.bulletChart = (props) => {
    return new _charts_bulletChart__WEBPACK_IMPORTED_MODULE_9__["default"](props);
};
Chart.radarChart = (props) => {
    return new _charts_radarChart__WEBPACK_IMPORTED_MODULE_10__["default"](props);
};
Chart.treemapChart = (props) => {
    return new _charts_treemapChart__WEBPACK_IMPORTED_MODULE_11__["default"](props);
};
Chart.nestedPieChart = (props) => {
    return new _charts_nestedPieChart__WEBPACK_IMPORTED_MODULE_12__["default"](props);
};
Chart.lineAreaChart = (props) => {
    return new _charts_lineAreaChart__WEBPACK_IMPORTED_MODULE_13__["default"](props);
};
Chart.lineScatterChart = (props) => {
    return new _charts_lineScatterChart__WEBPACK_IMPORTED_MODULE_14__["default"](props);
};
Chart.columnLineChart = (props) => {
    return new _charts_columnLineChart__WEBPACK_IMPORTED_MODULE_15__["default"](props);
};
Chart.radialBarChart = (props) => {
    return new _charts_radialBarChart__WEBPACK_IMPORTED_MODULE_16__["default"](props);
};
Chart.gaugeChart = (props) => {
    return new _charts_gaugeChart__WEBPACK_IMPORTED_MODULE_17__["default"](props);
};



/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/message.js":
/*!**********************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/message.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "message": () => (/* binding */ message)
/* harmony export */ });
const message = {
    SELECT_SERIES_API_SELECTABLE_ERROR: 'It works only when the selectable option is true.',
    SELECT_SERIES_API_INDEX_ERROR: 'The index value is invalid.',
    ALREADY_OBSERVABLE_ERROR: 'Source object is observable already',
    CIRCLE_LEGEND_RENDER_ERROR: 'circleLegend is only possible when bubble series is present',
    noDataError: (chartName) => `There's no ${chartName} data!`,
    noBrushError: (brushName) => `Brush don't exist in painter: ${brushName}`,
    DASH_SEGMENTS_UNAVAILABLE_ERROR: 'DashSegments option is available from IE11 and above.',
    SERIES_INDEX_ERROR: 'The seriesIndex value is invalid',
    AUTO_LAYOUT_CONTAINER_SIZE_ERROR: 'To use auto layout, the width or height of the container must be specified as a value such as "%" or "vh", "vw".',
};


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/painter.js":
/*!**********************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/painter.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Painter)
/* harmony export */ });
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");

class Painter {
    constructor(chart) {
        this.width = 0;
        this.height = 0;
        this.brushes = {};
        this.chart = chart;
    }
    showUnsupportedCanvasFeatureError() {
        if (!this.ctx.setLineDash) {
            console.warn(_message__WEBPACK_IMPORTED_MODULE_0__.message.DASH_SEGMENTS_UNAVAILABLE_ERROR);
        }
    }
    setup() {
        const { height, width } = this.chart.store.state.chart;
        if (!this.canvas) {
            const canvas = document.createElement('canvas');
            this.canvas = canvas;
            this.chart.el.appendChild(canvas);
            canvas.addEventListener('click', this.chart);
            canvas.addEventListener('mousemove', this.chart);
            canvas.addEventListener('mousedown', this.chart);
            canvas.addEventListener('mouseup', this.chart);
            canvas.addEventListener('mouseout', this.chart);
            const ctx = canvas.getContext('2d');
            if (ctx) {
                this.ctx = ctx;
            }
        }
        this.setSize(width, height);
        this.showUnsupportedCanvasFeatureError();
    }
    setSize(width, height) {
        this.canvas.style.width = `${width}px`;
        this.canvas.style.height = `${height}px`;
        let ratio = 1;
        if ('deviceXDPI' in window.screen) {
            // IE mobile or IE
            ratio =
                window.screen.deviceXDPI /
                    window.screen.logicalXDPI;
        }
        else if (window.hasOwnProperty('devicePixelRatio')) {
            ratio = window.devicePixelRatio;
        }
        this.width = width * ratio || 0;
        this.height = height * ratio || 0;
        this.scaleCanvasRatio(ratio);
    }
    scaleCanvasRatio(ratio) {
        this.canvas.width = this.width;
        this.canvas.height = this.height;
        this.ctx.scale(ratio, ratio);
    }
    add(name, brush) {
        this.brushes[name] = brush;
    }
    addGroups(groups) {
        groups.forEach((group) => {
            Object.keys(group).forEach((key) => {
                this.add(key, group[key]);
            });
        });
    }
    paint(name, brushModel) {
        if (this.brushes[name]) {
            this.brushes[name](this.ctx, brushModel);
        }
        else {
            throw new Error(_message__WEBPACK_IMPORTED_MODULE_0__.message.noBrushError(name));
        }
    }
    paintForEach(brushModels) {
        brushModels.forEach((m) => this.paint(m.type, m));
    }
    beforeFrame() {
        this.ctx.clearRect(0, 0, this.width, this.height);
        this.ctx.fillStyle = 'transparent';
        this.ctx.fillRect(0, 0, this.width, this.height);
    }
    beforeDraw(transX, transY) {
        this.ctx.save();
        this.ctx.translate(transX, transY);
    }
    afterDraw() {
        this.ctx.restore();
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/responderDetectors.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/responderDetectors.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "responderDetectors": () => (/* binding */ responderDetectors)
/* harmony export */ });
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_sector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/sector */ "./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js");


function withinRotationRect({ slope, yIntercept, mouseX, mouseY, modelXPositions, compX, compY, detectionSize = 0, }) {
    const [x1, x2] = modelXPositions;
    const posY = slope * (mouseX - compX) + yIntercept;
    const withinRadius = (x1 > x2 && mouseX >= compX + x2 && mouseX <= compX + x1) ||
        (x1 < x2 && mouseX <= compX + x2 && mouseX >= compX + x1);
    const withinDetectionSize = posY - detectionSize + compY <= mouseY && mouseY <= posY + detectionSize + compY;
    return withinRadius && withinDetectionSize;
}
const responderDetectors = {
    circle: (mousePosition, model, componentRect) => {
        const { x, y } = mousePosition;
        const { x: modelX, y: modelY, radius, detectionSize } = model;
        const { x: compX, y: compY } = componentRect;
        const radiusAdjustment = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(detectionSize) ? 10 : detectionSize;
        return (Math.pow((x - (modelX + compX)), 2) + Math.pow((y - (modelY + compY)), 2) < Math.pow((radius + radiusAdjustment), 2));
    },
    rect: (mousePosition, model, componentRect = { x: 0, y: 0, width: 0, height: 0 }) => {
        const { x, y } = mousePosition;
        const { x: modelX, y: modelY, width, height } = model;
        const { x: compX, y: compY } = componentRect;
        return (x >= modelX + compX &&
            x <= modelX + compX + width &&
            y >= modelY + compY &&
            y <= modelY + compY + height);
    },
    sector: (mousePosition, model, componentRect = { x: 0, y: 0, width: 0, height: 0 }) => {
        const { x, y } = mousePosition;
        const { x: modelX, y: modelY, radius: { outer, inner }, degree: { start, end }, drawingStartAngle, clockwise, } = model;
        const { x: compX, y: compY } = componentRect;
        const xPos = x - (modelX + compX);
        const yPos = y - (modelY + compY);
        const insideOuterRadius = Math.pow(xPos, 2) + Math.pow(yPos, 2) < Math.pow(outer, 2);
        const outsideInnerRadius = Math.pow(xPos, 2) + Math.pow(yPos, 2) > Math.pow(inner, 2);
        const withinRadius = insideOuterRadius && outsideInnerRadius;
        const detectionDegree = (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_1__.calculateRadianToDegree)(Math.atan2(yPos, xPos), drawingStartAngle);
        return withinRadius && (0,_helpers_sector__WEBPACK_IMPORTED_MODULE_1__.withinRadian)(clockwise, start, end, detectionDegree);
    },
    line: (mousePosition, model, componentRect = { x: 0, y: 0, width: 0, height: 0 }) => {
        const { x, y } = mousePosition;
        const { x: compX, y: compY } = componentRect;
        const { x: modelX, y: modelY, x2, y2, detectionSize = 3 } = model;
        const numerator = y2 - modelY;
        const denominator = x2 - modelX;
        let withinLine = false;
        if (numerator === 0) {
            const minX = Math.min(modelX, x2);
            const maxX = Math.max(modelX, x2);
            withinLine =
                x - compX >= minX &&
                    x - compX <= maxX &&
                    y >= modelY + compY - detectionSize &&
                    y <= modelY + compY + detectionSize;
        }
        else if (denominator === 0) {
            const minY = Math.min(modelY, y2);
            const maxY = Math.max(modelY, y2);
            withinLine =
                y - compY >= minY &&
                    y - compY <= maxY &&
                    x >= modelX + compX - detectionSize &&
                    x <= modelX + compX + detectionSize;
        }
        else {
            const slope = numerator / denominator;
            const xPos = x - (modelX + compX);
            const yPos = y - (modelY + compY);
            withinLine = slope * xPos === yPos;
        }
        return withinLine;
    },
    boxPlot: (mousePosition, model, componentRect = { x: 0, y: 0, width: 0, height: 0 }) => {
        return ['rect', 'median', 'minimum', 'maximum', 'upperWhisker', 'lowerWhisker'].some((prop) => {
            if (!model[prop]) {
                return false;
            }
            return prop === 'rect'
                ? responderDetectors.rect(mousePosition, model[prop], componentRect)
                : responderDetectors.line(mousePosition, model[prop], componentRect);
        });
    },
    clockHand: (mousePosition, model, componentRect = { x: 0, y: 0, width: 0, height: 0 }) => {
        const { x, y } = mousePosition;
        const { x: compX, y: compY } = componentRect;
        const { x: centerX, y: centerY, x2, y2, detectionSize = 5 } = model;
        const numerator = y2 - centerY;
        const denominator = x2 - centerX;
        let withinClockHand = false;
        if (numerator === 0) {
            const minX = Math.min(centerX, x2);
            const maxX = Math.max(centerX, x2);
            withinClockHand =
                x - compX >= minX &&
                    x - compX <= maxX &&
                    y >= centerY + compY - detectionSize &&
                    y <= centerY + compY + detectionSize;
        }
        else if (denominator === 0) {
            const minY = Math.min(centerY, y2);
            const maxY = Math.max(centerY, y2);
            withinClockHand =
                y - compY >= minY &&
                    y - compY <= maxY &&
                    x >= centerX + compX - detectionSize &&
                    x <= centerX + compX + detectionSize;
        }
        else {
            const slope = numerator / denominator;
            const yIntercept = centerY - slope * centerX;
            withinClockHand = withinRotationRect({
                slope,
                yIntercept,
                mouseX: x,
                mouseY: y,
                modelXPositions: [centerX, x2],
                compX,
                compY,
                detectionSize,
            });
        }
        return withinClockHand;
    },
};


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/scale/coordinateScaleCalculator.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/scale/coordinateScaleCalculator.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getNormalizedStepCount": () => (/* binding */ getNormalizedStepCount),
/* harmony export */   "makeScaleOption": () => (/* binding */ makeScaleOption),
/* harmony export */   "calculateCoordinateScale": () => (/* binding */ calculateCoordinateScale),
/* harmony export */   "getStackScaleData": () => (/* binding */ getStackScaleData),
/* harmony export */   "calculateXAxisScaleForCoordinateLineType": () => (/* binding */ calculateXAxisScaleForCoordinateLineType)
/* harmony export */ });
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _component_axis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component/axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");



const SNAP_VALUES = [1, 2, 5, 10];
const DEFAULT_PIXELS_PER_STEP = 88;
function adjustLimitForOverflow({ min, max }, stepSize, overflowed) {
    return {
        min: overflowed.min ? min - stepSize : min,
        max: overflowed.max ? max + stepSize : max,
    };
}
function isSeriesOverflowed(scaleData, { min, max }, scaleOption) {
    var _a, _b;
    const scaleDataLimit = scaleData.limit;
    const hasMinOption = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)((_a = scaleOption) === null || _a === void 0 ? void 0 : _a.min);
    const hasMaxOption = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)((_b = scaleOption) === null || _b === void 0 ? void 0 : _b.max);
    const isOverflowedMin = !hasMinOption && scaleDataLimit.min === min && scaleDataLimit.min !== 0;
    const isOverflowedMax = !hasMaxOption && scaleDataLimit.max === max && scaleDataLimit.max !== 0;
    if (!isOverflowedMin && !isOverflowedMax) {
        return null;
    }
    return {
        min: isOverflowedMin,
        max: isOverflowedMax,
    };
}
function getDigits(num) {
    const logNumberDividedLN10 = num === 0 ? 1 : Math.log(Math.abs(num)) / Math.LN10;
    return Math.pow(10, Math.floor(logNumberDividedLN10));
}
function getSnappedNumber(num) {
    let snapNumber = 0;
    for (let i = 0, t = SNAP_VALUES.length; i < t; i += 1) {
        snapNumber = SNAP_VALUES[i];
        const guideValue = (snapNumber + (SNAP_VALUES[i + 1] || snapNumber)) / 2;
        if (num <= guideValue) {
            break;
        }
    }
    return snapNumber;
}
function getNormalizedStep(stepSize) {
    const placeNumber = getDigits(stepSize);
    const simplifiedStepValue = stepSize / placeNumber;
    return getSnappedNumber(simplifiedStepValue) * placeNumber;
}
/**
 * Get normalized limit values
 * max = 155 and step = 10 ---> max = 160
 */
function getNormalizedLimit(limit, stepSize) {
    let { min, max } = limit;
    const minNumber = Math.min(getDigits(max), getDigits(stepSize));
    const placeNumber = minNumber > 1 ? 1 : 1 / minNumber;
    const fixedStep = stepSize * placeNumber;
    // ceil max value step digits
    max = (Math.ceil((max * placeNumber) / fixedStep) * fixedStep) / placeNumber;
    if (min > stepSize) {
        // floor min value to multiples of step
        min = (Math.floor((min * placeNumber) / fixedStep) * fixedStep) / placeNumber;
    }
    else if (min < 0) {
        min = -(Math.ceil((Math.abs(min) * placeNumber) / fixedStep) * fixedStep) / placeNumber;
    }
    else {
        min = 0;
    }
    return { min, max };
}
function getNormalizedStepCount(limitSize, stepSize) {
    const multiplier = 1 / Math.min(getDigits(limitSize), getDigits(stepSize));
    return Math.ceil((limitSize * multiplier) / (stepSize * multiplier));
}
function hasStepSize(stepSize) {
    return (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(stepSize);
}
function getNormalizedScale(scaleData, scale) {
    const stepSize = hasStepSize(scale.stepSize)
        ? scaleData.stepSize
        : getNormalizedStep(scaleData.stepSize);
    const edge = getNormalizedLimit(scaleData.limit, stepSize);
    const limitSize = Math.abs(edge.max - edge.min);
    const stepCount = getNormalizedStepCount(limitSize, stepSize);
    return {
        limit: {
            min: edge.min,
            max: edge.max,
        },
        stepSize,
        stepCount,
    };
}
function getRoughScale(scale, offsetSize, minStepSize = 1) {
    const { min, max } = scale;
    const limitSize = Math.abs(max - min);
    const valuePerPixel = limitSize / offsetSize;
    let stepCount = Math.ceil(offsetSize / DEFAULT_PIXELS_PER_STEP);
    const pixelsPerStep = offsetSize / stepCount;
    let stepSize = valuePerPixel * pixelsPerStep;
    if (hasStepSize(scale.stepSize)) {
        stepSize = scale.stepSize;
        stepCount = limitSize / stepSize;
    }
    else if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(minStepSize) && stepSize < minStepSize) {
        stepSize = minStepSize;
        stepCount = limitSize / stepSize;
    }
    return { limit: { min, max }, stepSize, stepCount };
}
function makeScaleOption(dataRange, scaleOptions) {
    var _a, _b, _c, _d, _e, _f;
    return {
        max: (_b = (_a = scaleOptions) === null || _a === void 0 ? void 0 : _a.max, (_b !== null && _b !== void 0 ? _b : dataRange.max)),
        min: (_d = (_c = scaleOptions) === null || _c === void 0 ? void 0 : _c.min, (_d !== null && _d !== void 0 ? _d : dataRange.min)),
        stepSize: (_f = (_e = scaleOptions) === null || _e === void 0 ? void 0 : _e.stepSize, (_f !== null && _f !== void 0 ? _f : 'auto')),
    };
}
function calculateCoordinateScale(options) {
    const { dataRange, scaleOption, offsetSize, minStepSize, useSpectrumLegend } = options;
    const scale = makeScaleOption(dataRange, scaleOption);
    const roughScale = getRoughScale(scale, offsetSize, minStepSize);
    const normalizedScale = getNormalizedScale(roughScale, scale);
    const overflowed = useSpectrumLegend
        ? null
        : isSeriesOverflowed(normalizedScale, scale, scaleOption);
    if (overflowed) {
        const { stepSize, limit } = normalizedScale;
        normalizedScale.limit = adjustLimitForOverflow(limit, stepSize, overflowed);
    }
    return normalizedScale;
}
function getStackScaleData(type) {
    if (type === 'minusPercentStack') {
        return { limit: { min: -100, max: 0 }, stepSize: 25, stepCount: 5 };
    }
    if (type === 'dualPercentStack') {
        return { limit: { min: -100, max: 100 }, stepSize: 25, stepCount: 9 };
    }
    if (type === 'divergingPercentStack') {
        return { limit: { min: -100, max: 100 }, stepSize: 25, stepCount: 9 };
    }
    return { limit: { min: 0, max: 100 }, stepSize: 25, stepCount: 5 };
}
function calculateXAxisScaleForCoordinateLineType(scale, options, categories) {
    const dateType = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.isDateType)(options, _component_axis__WEBPACK_IMPORTED_MODULE_2__.AxisType.X);
    const values = categories.map((value) => (dateType ? Number(new Date(value)) : Number(value)));
    const { limit, stepSize } = scale;
    const min = Math.min(...values);
    const max = Math.max(...values);
    const newLimit = Object.assign({}, limit);
    const distance = max - min;
    let positionRatio = 0;
    let sizeRatio = 1;
    if (distance) {
        if (limit.min < min) {
            newLimit.min += stepSize;
            positionRatio = (newLimit.min - min) / distance;
            sizeRatio -= positionRatio;
        }
        if (limit.max > max) {
            newLimit.max -= stepSize;
            sizeRatio -= (max - newLimit.max) / distance;
        }
    }
    const limitSize = Math.abs(newLimit.max - newLimit.min);
    const newStepCount = getNormalizedStepCount(limitSize, stepSize);
    return {
        limit: newLimit,
        stepCount: newStepCount,
        stepSize,
        positionRatio,
        sizeRatio,
    };
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/scale/datetimeScaleCalculator.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/scale/datetimeScaleCalculator.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "calculateDatetimeScale": () => (/* binding */ calculateDatetimeScale)
/* harmony export */ });
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _coordinateScaleCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./coordinateScaleCalculator */ "./node_modules/@toast-ui/chart/dist/esm/scale/coordinateScaleCalculator.js");



const msMap = {
    year: 31536000000,
    month: 2678400000,
    week: 604800000,
    date: 86400000,
    hour: 3600000,
    minute: 60000,
    second: 1000,
};
function calculateDatetimeScale(options) {
    const { dataRange, rawCategoriesSize, scaleOption } = options;
    const datetimeInfo = makeDatetimeInfo(dataRange, rawCategoriesSize, scaleOption);
    const { minDate, divisionNumber, limit } = datetimeInfo;
    const scale = (0,_coordinateScaleCalculator__WEBPACK_IMPORTED_MODULE_0__.calculateCoordinateScale)(Object.assign(Object.assign({}, (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.omit)(options, 'scaleOption')), { dataRange: limit, minStepSize: 1 }));
    return restoreScaleToDatetimeType(scale, minDate, divisionNumber);
}
const msTypes = ['year', 'month', 'week', 'date', 'hour', 'minute', 'second'];
function restoreScaleToDatetimeType(scale, minDate, divisionNumber) {
    const { limit, stepSize } = scale;
    const { min, max } = limit;
    return Object.assign(Object.assign({}, scale), { stepSize: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_2__.multiply)(stepSize, divisionNumber), limit: {
            min: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_2__.multiply)((0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_2__.add)(min, minDate), divisionNumber),
            max: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_2__.multiply)((0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_2__.add)(max, minDate), divisionNumber),
        } });
}
function makeDatetimeInfo(limit, count, scaleOption) {
    var _a, _b;
    const dateType = findDateType(limit, count);
    const divisionNumber = (_b = (_a = scaleOption) === null || _a === void 0 ? void 0 : _a.stepSize, (_b !== null && _b !== void 0 ? _b : msMap[dateType]));
    const scale = (0,_coordinateScaleCalculator__WEBPACK_IMPORTED_MODULE_0__.makeScaleOption)(limit, scaleOption);
    const minDate = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_2__.divide)(Number(new Date(scale.min)), divisionNumber);
    const maxDate = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_2__.divide)(Number(new Date(scale.max)), divisionNumber);
    return { divisionNumber, minDate, limit: { min: 0, max: maxDate - minDate } };
}
function findDateType({ max, min }, count) {
    const diff = max - min;
    const lastTypeIndex = msTypes.length - 1;
    let foundType;
    if (diff) {
        msTypes.every((type, index) => {
            const millisecond = msMap[type];
            const dividedCount = Math.floor(diff / millisecond);
            let foundIndex;
            if (dividedCount) {
                foundIndex =
                    index < lastTypeIndex && dividedCount < 2 && dividedCount < count ? index + 1 : index;
                foundType = msTypes[foundIndex];
            }
            return !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isExist)(foundIndex);
        });
    }
    else {
        foundType = 'second';
    }
    return foundType;
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/axes.js":
/*!*************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/axes.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isCenterYAxis": () => (/* binding */ isCenterYAxis),
/* harmony export */   "getLabelAxisData": () => (/* binding */ getLabelAxisData),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_coordinate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/coordinate */ "./node_modules/@toast-ui/chart/dist/esm/helpers/coordinate.js");
/* harmony import */ var _component_axis__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../component/axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");






function isCenterYAxis(options) {
    var _a, _b;
    const diverging = !!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.pickProperty)(options, ['series', 'diverging']);
    const alignCenter = ((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.yAxis) === null || _b === void 0 ? void 0 : _b.align) === 'center';
    return diverging && alignCenter;
}
function isDivergingBoxSeries(series, options) {
    var _a;
    return (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.hasBoxTypeSeries)(series) && !!((_a = options.series) === null || _a === void 0 ? void 0 : _a.diverging);
}
function getZeroPosition(limit, axisSize, labelAxisOnYAxis, isDivergingSeries) {
    const { min, max } = limit;
    const hasZeroValue = min <= 0 && max >= 0;
    if (!hasZeroValue || isDivergingSeries) {
        return null;
    }
    const position = ((0 - min) / (max - min)) * axisSize;
    return labelAxisOnYAxis ? position : axisSize - position;
}
function getLabelAxisData(stateProp) {
    const { axisSize, categories, series, options, theme, scale, initialAxisData, isCoordinateTypeChart, axisName, } = stateProp;
    const hasLineSeries = !!series.line;
    const pointOnColumn = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.isPointOnColumn)(series, options);
    const dateType = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.isDateType)(options, axisName);
    const labelsBeforeFormatting = isCoordinateTypeChart
        ? (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_2__.makeLabelsFromLimit)(scale.limit, scale.stepSize, dateType)
        : categories;
    const labels = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getLabelsAppliedFormatter)(labelsBeforeFormatting, options, dateType, axisName);
    let labelRange;
    if (scale && hasLineSeries) {
        const baseLabels = pointOnColumn ? labelsBeforeFormatting : categories;
        const values = baseLabels.map((value) => (dateType ? Number(new Date(value)) : Number(value)));
        labelRange = { min: Math.min(...values), max: Math.max(...values) };
    }
    const rectResponderCount = categories.length;
    const tickIntervalCount = rectResponderCount - (pointOnColumn ? 0 : 1);
    const tickDistance = tickIntervalCount ? axisSize / tickIntervalCount : axisSize;
    const labelDistance = axisSize / (labels.length - (pointOnColumn ? 0 : 1));
    let tickCount = labels.length;
    if (pointOnColumn && !isCoordinateTypeChart) {
        tickCount += 1;
    }
    const viewLabels = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getViewAxisLabels)(Object.assign({ labels,
        pointOnColumn,
        tickDistance,
        tickCount,
        scale }, initialAxisData), axisSize);
    const axisLabelMargin = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getLabelXMargin)(axisName, options);
    return Object.assign(Object.assign({ labels,
        viewLabels,
        pointOnColumn,
        labelDistance,
        tickDistance,
        tickCount,
        labelRange,
        rectResponderCount, isLabelAxis: true }, initialAxisData), (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getMaxLabelSize)(labels, axisLabelMargin, (0,_helpers_style__WEBPACK_IMPORTED_MODULE_3__.getTitleFontString)(theme.label)));
}
function getValueAxisData(stateProp) {
    var _a;
    const { scale, axisSize, series, options, centerYAxis, initialAxisData, theme, labelOnYAxis, axisName, } = stateProp;
    const { limit, stepSize } = scale;
    const size = centerYAxis ? (_a = centerYAxis) === null || _a === void 0 ? void 0 : _a.xAxisHalfSize : axisSize;
    const divergingBoxSeries = isDivergingBoxSeries(series, options);
    const formatter = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getAxisFormatter)(options, axisName);
    const zeroPosition = getZeroPosition(limit, axisSize, (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.isLabelAxisOnYAxis)({ series, options }), divergingBoxSeries);
    let valueLabels = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_2__.makeLabelsFromLimit)(limit, stepSize);
    if (!centerYAxis && divergingBoxSeries) {
        valueLabels = getDivergingValues(valueLabels);
    }
    const labels = valueLabels.map((label, index) => formatter(label, { index, labels: valueLabels, axisName }));
    const tickDistance = size / Math.max(valueLabels.length, 1);
    const tickCount = valueLabels.length;
    const pointOnColumn = false;
    const viewLabels = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getViewAxisLabels)(Object.assign({ labels: labelOnYAxis ? labels : [...labels].reverse(), pointOnColumn,
        tickDistance,
        tickCount }, initialAxisData), size);
    const axisLabelMargin = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getLabelXMargin)(axisName, options);
    const axisData = Object.assign(Object.assign({ labels,
        viewLabels,
        pointOnColumn, isLabelAxis: false, tickCount,
        tickDistance }, initialAxisData), (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getMaxLabelSize)(labels, axisLabelMargin, (0,_helpers_style__WEBPACK_IMPORTED_MODULE_3__.getTitleFontString)(theme.label)));
    if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(zeroPosition)) {
        axisData.zeroPosition = zeroPosition;
    }
    return axisData;
}
function getDivergingValues(valueLabels) {
    return (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.hasNegativeOnly)(valueLabels)
        ? valueLabels.reverse().slice(1).concat(valueLabels)
        : valueLabels.slice(1).reverse().concat(valueLabels);
}
function makeDefaultAxisData(isLabelAxis, params) {
    var _a, _b;
    const axisData = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getInitAxisIntervalData)(isLabelAxis, params);
    const title = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.makeTitleOption)((_b = (_a = params) === null || _a === void 0 ? void 0 : _a.axis) === null || _b === void 0 ? void 0 : _b.title);
    if (title) {
        axisData.title = title;
    }
    return axisData;
}
function getInitialAxisData(options, labelOnYAxis, categories, layout, isCoordinateTypeChart) {
    var _a, _b, _c;
    const { yAxis, secondaryYAxis } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getYAxisOption)(options);
    const shift = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b.shift;
    return {
        xAxis: makeDefaultAxisData(!labelOnYAxis, {
            categories,
            axis: (_c = options) === null || _c === void 0 ? void 0 : _c.xAxis,
            layout,
            shift,
            isCoordinateTypeChart,
        }),
        yAxis: makeDefaultAxisData(labelOnYAxis, { axis: yAxis }),
        secondaryYAxis: secondaryYAxis
            ? makeDefaultAxisData(labelOnYAxis, { axis: secondaryYAxis })
            : null,
    };
}
function getSecondaryYAxisData({ state, labelOnYAxis, valueAxisSize, labelAxisSize, initialAxisData, isCoordinateTypeChart, }) {
    var _a, _b;
    const { scale, options, series, theme } = state;
    const categories = state.categories;
    return labelOnYAxis
        ? getLabelAxisData({
            scale: scale.secondaryYAxis,
            axisSize: labelAxisSize,
            categories: (_b = (_a = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getYAxisOption)(options).secondaryYAxis) === null || _a === void 0 ? void 0 : _a.categories, (_b !== null && _b !== void 0 ? _b : categories)),
            options,
            series,
            theme: (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getAxisTheme)(theme, _component_axis__WEBPACK_IMPORTED_MODULE_4__.AxisType.SECONDARY_Y),
            initialAxisData,
            isCoordinateTypeChart,
            axisName: _component_axis__WEBPACK_IMPORTED_MODULE_4__.AxisType.SECONDARY_Y,
        })
        : getValueAxisData({
            scale: scale.secondaryYAxis,
            axisSize: valueAxisSize,
            options,
            series,
            theme: (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getAxisTheme)(theme, _component_axis__WEBPACK_IMPORTED_MODULE_4__.AxisType.SECONDARY_Y),
            centerYAxis: null,
            initialAxisData,
            axisName: _component_axis__WEBPACK_IMPORTED_MODULE_4__.AxisType.SECONDARY_Y,
        });
}
function makeXAxisData({ axisData, axisSize, axisLayout, centerYAxis, rotatable, labelMargin = 0, }) {
    const { viewLabels, pointOnColumn, maxLabelWidth, maxLabelHeight } = axisData;
    const offsetY = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_2__.getAxisLabelAnchorPoint)(maxLabelHeight) + labelMargin;
    const size = centerYAxis ? centerYAxis.xAxisHalfSize : axisSize;
    const distance = size / (viewLabels.length - (pointOnColumn ? 0 : 1));
    const rotationData = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.makeRotationData)(maxLabelWidth, maxLabelHeight, distance, rotatable, axisLayout);
    const { needRotateLabel, rotationHeight } = rotationData;
    const maxHeight = (needRotateLabel ? rotationHeight : maxLabelHeight) + offsetY;
    return Object.assign(Object.assign(Object.assign({}, axisData), rotationData), { maxHeight,
        offsetY });
}
function getAxisInfo(labelOnYAxis, plot, series) {
    const { valueAxisName, labelAxisName } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getAxisName)(labelOnYAxis, series);
    const { valueSizeKey, labelSizeKey } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getSizeKey)(labelOnYAxis);
    const valueAxisSize = plot[valueSizeKey];
    const labelAxisSize = plot[labelSizeKey];
    return { valueAxisName, valueAxisSize, labelAxisName, labelAxisSize };
}
function getCategoriesWithTypes(categories, rawCategories) {
    var _a, _b;
    return {
        categories: (_a = categories, (_a !== null && _a !== void 0 ? _a : [])),
        rawCategories: (_b = rawCategories, (_b !== null && _b !== void 0 ? _b : [])),
    };
}
const axes = {
    name: 'axes',
    state: ({ series, options }) => {
        const { secondaryYAxis } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getYAxisOption)(options);
        const axesState = {
            xAxis: {},
            yAxis: {},
        };
        if (!!series.bar && isCenterYAxis(options)) {
            axesState.centerYAxis = {};
        }
        if (secondaryYAxis) {
            axesState.secondaryYAxis = {};
        }
        return {
            axes: axesState,
        };
    },
    action: {
        setAxesData({ state, initStoreState }) {
            var _a, _b;
            const { scale, options, series, layout, theme } = state;
            const { xAxis, yAxis, plot } = layout;
            const isCoordinateTypeChart = (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_5__.isCoordinateSeries)(initStoreState.series);
            const labelOnYAxis = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.isLabelAxisOnYAxis)({ series, options });
            const { categories } = getCategoriesWithTypes(state.categories, state.rawCategories);
            const { valueAxisName, valueAxisSize, labelAxisName, labelAxisSize } = getAxisInfo(labelOnYAxis, plot, series);
            const hasCenterYAxis = state.axes.centerYAxis;
            const initialAxisData = getInitialAxisData(options, labelOnYAxis, categories, layout, isCoordinateTypeChart);
            const valueAxisData = getValueAxisData({
                scale: scale[valueAxisName],
                axisSize: valueAxisSize,
                options,
                series,
                theme: (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getAxisTheme)(theme, valueAxisName),
                centerYAxis: hasCenterYAxis
                    ? {
                        xAxisHalfSize: (xAxis.width - yAxis.width) / 2,
                    }
                    : null,
                initialAxisData: initialAxisData[valueAxisName],
                labelOnYAxis,
                axisName: valueAxisName,
            });
            const labelAxisData = getLabelAxisData({
                scale: scale[labelAxisName],
                axisSize: labelAxisSize,
                categories,
                options,
                series,
                theme: (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getAxisTheme)(theme, labelAxisName),
                initialAxisData: initialAxisData[labelAxisName],
                isCoordinateTypeChart,
                labelOnYAxis,
                axisName: labelAxisName,
            });
            let secondaryYAxis, centerYAxis;
            if (state.axes.secondaryYAxis) {
                secondaryYAxis = getSecondaryYAxisData({
                    state,
                    labelOnYAxis,
                    valueAxisSize,
                    labelAxisSize,
                    labelAxisName,
                    valueAxisName,
                    initialAxisData: initialAxisData.secondaryYAxis,
                    isCoordinateTypeChart,
                });
            }
            if (hasCenterYAxis) {
                const xAxisHalfSize = (xAxis.width - yAxis.width) / 2;
                centerYAxis = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.deepMergedCopy)(valueAxisData, {
                    x: xAxis.x + xAxisHalfSize,
                    xAxisHalfSize,
                    secondStartX: (xAxis.width + yAxis.width) / 2,
                    yAxisLabelAnchorPoint: yAxis.width / 2,
                    yAxisHeight: yAxis.height,
                });
            }
            const axesState = {
                xAxis: makeXAxisData({
                    axisData: labelOnYAxis ? valueAxisData : labelAxisData,
                    axisSize: labelOnYAxis ? valueAxisSize : labelAxisSize,
                    axisLayout: layout.xAxis,
                    centerYAxis,
                    rotatable: (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getRotatableOption)(options),
                    labelMargin: (_b = (_a = options.xAxis) === null || _a === void 0 ? void 0 : _a.label) === null || _b === void 0 ? void 0 : _b.margin,
                }),
                yAxis: labelOnYAxis ? labelAxisData : valueAxisData,
                secondaryYAxis,
                centerYAxis,
            };
            if ((0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.hasAxesLayoutChanged)(state.axes, axesState)) {
                this.notify(state, 'layout');
            }
            state.axes = axesState;
        },
    },
    computed: {},
    observe: {
        updateAxes() {
            this.dispatch('setAxesData');
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (axes);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/category.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/category.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "makeRawCategories": () => (/* binding */ makeRawCategories),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_coordinate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/coordinate */ "./node_modules/@toast-ui/chart/dist/esm/helpers/coordinate.js");
/* harmony import */ var _helpers_range__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/range */ "./node_modules/@toast-ui/chart/dist/esm/helpers/range.js");



function makeRawCategories(series, categories) {
    if (categories) {
        return categories;
    }
    const firstValues = new Set();
    Object.keys(series).forEach((key) => {
        var _a;
        if (key === 'pie' || key === 'gauge') {
            return;
        }
        (_a = series[key].data, (_a !== null && _a !== void 0 ? _a : series[key])).forEach(({ data, name, visible }) => {
            if (Array.isArray(data)) {
                data.forEach((datum) => {
                    if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNull)(datum)) {
                        const rawXValue = (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_1__.getCoordinateXValue)(datum);
                        firstValues.add((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(rawXValue) ? rawXValue : rawXValue.toString());
                    }
                });
            }
            else if ((key === 'bullet' && (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(visible)) || visible) {
                firstValues.add(name);
            }
        });
    });
    return Array.from(firstValues)
        .sort(_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.sortCategories)
        .map((category) => String(category));
}
const category = {
    name: 'category',
    state: ({ categories, series }) => ({
        categories: makeRawCategories(series, categories),
    }),
    action: {
        setCategory({ state, computed }) {
            const { viewRange } = computed;
            let categories = state.rawCategories;
            if (viewRange) {
                if (Array.isArray(categories)) {
                    categories = (0,_helpers_range__WEBPACK_IMPORTED_MODULE_2__.getDataInRange)(categories, viewRange);
                }
                else {
                    categories = Object.assign(Object.assign({}, categories), { x: (0,_helpers_range__WEBPACK_IMPORTED_MODULE_2__.getDataInRange)(categories.x, viewRange) });
                }
            }
            state.categories = categories;
            this.notify(state, 'categories');
        },
        initCategory({ initStoreState, state }) {
            const { zoomRange } = state;
            let categories = makeRawCategories(initStoreState.series);
            if (zoomRange && Array.isArray(categories)) {
                categories = (0,_helpers_range__WEBPACK_IMPORTED_MODULE_2__.getDataInRange)(categories, zoomRange);
            }
            state.categories = categories;
            this.notify(state, 'categories');
        },
        removeCategoryByName({ state }, name) {
            const index = state.categories.findIndex((seriesName) => seriesName === name);
            state.categories.splice(index, 1);
            this.notify(state, 'axes');
        },
    },
    observe: {
        updateCategory() {
            this.dispatch('setCategory');
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (category);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/colorValueScale.js":
/*!************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/colorValueScale.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./store */ "./node_modules/@toast-ui/chart/dist/esm/store/store.js");
/* harmony import */ var _scale_coordinateScaleCalculator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../scale/coordinateScaleCalculator */ "./node_modules/@toast-ui/chart/dist/esm/scale/coordinateScaleCalculator.js");
/* harmony import */ var _dataRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataRange */ "./node_modules/@toast-ui/chart/dist/esm/store/dataRange.js");
/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./layout */ "./node_modules/@toast-ui/chart/dist/esm/store/layout.js");
/* harmony import */ var _treemapSeriesData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./treemapSeriesData */ "./node_modules/@toast-ui/chart/dist/esm/store/treemapSeriesData.js");





const colorValueScale = {
    name: 'colorValueScale',
    state: () => ({
        treemapZoomId: {
            prev: _treemapSeriesData__WEBPACK_IMPORTED_MODULE_0__.TREEMAP_ROOT_ID,
            cur: _treemapSeriesData__WEBPACK_IMPORTED_MODULE_0__.TREEMAP_ROOT_ID,
        },
        colorValueScale: {},
    }),
    action: {
        setColorValueScale({ state }) {
            const { layout, treemapSeries, legend, heatmapSeries } = state;
            if (!legend.useSpectrumLegend) {
                return;
            }
            const series = (treemapSeries !== null && treemapSeries !== void 0 ? treemapSeries : heatmapSeries.flatMap((value) => value));
            const values = series.reduce((acc, { colorValue }) => (colorValue ? [...acc, colorValue] : acc), []);
            const dataRange = (0,_dataRange__WEBPACK_IMPORTED_MODULE_1__.getLimitSafely)([...new Set(values)]);
            const offsetSize = (0,_layout__WEBPACK_IMPORTED_MODULE_2__.isVerticalAlign)(legend.align) ? layout.plot.width / 2 : layout.plot.height;
            (0,_store__WEBPACK_IMPORTED_MODULE_3__.extend)(state.colorValueScale, (0,_scale_coordinateScaleCalculator__WEBPACK_IMPORTED_MODULE_4__.calculateCoordinateScale)({
                dataRange,
                offsetSize,
                useSpectrumLegend: true,
                scaleOption: {},
            }));
        },
        setTreemapZoomId({ state }, id) {
            state.treemapZoomId.prev = state.treemapZoomId.cur;
            state.treemapZoomId.cur = id;
        },
        zoomBack({ state }) {
            var _a, _b;
            const { treemapSeries, treemapZoomId } = state;
            const { prev } = treemapZoomId;
            const prevSeries = treemapSeries.find(({ id }) => id === prev);
            state.treemapZoomId.prev = (_b = (_a = prevSeries) === null || _a === void 0 ? void 0 : _a.parentId, (_b !== null && _b !== void 0 ? _b : _treemapSeriesData__WEBPACK_IMPORTED_MODULE_0__.TREEMAP_ROOT_ID));
            state.treemapZoomId.cur = prev;
        },
    },
    observe: {
        updateColorValueScale() {
            this.dispatch('setColorValueScale');
        },
    },
    computed: {
        isTreemapSeriesZooming: ({ treemapZoomId }) => {
            return treemapZoomId && treemapZoomId.cur !== treemapZoomId.prev;
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (colorValueScale);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/dataRange.js":
/*!******************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/dataRange.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getLimitSafely": () => (/* binding */ getLimitSafely),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./store */ "./node_modules/@toast-ui/chart/dist/esm/store/store.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _helpers_coordinate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/coordinate */ "./node_modules/@toast-ui/chart/dist/esm/helpers/coordinate.js");
/* harmony import */ var _helpers_range__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/range */ "./node_modules/@toast-ui/chart/dist/esm/helpers/range.js");
/* harmony import */ var _component_axis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../component/axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");






function getLimitSafely(baseValues, isXAxis = false) {
    const limit = {
        min: Math.min(...baseValues),
        max: Math.max(...baseValues),
    };
    if (baseValues.length === 1) {
        const [firstValue] = baseValues;
        if (isXAxis) {
            limit.min = firstValue;
            limit.max = firstValue;
        }
        else if (firstValue > 0) {
            limit.min = 0;
        }
        else if (firstValue === 0) {
            limit.max = 10;
        }
        else {
            limit.max = 0;
        }
    }
    else if (limit.min === 0 && limit.max === 0) {
        limit.max = 10;
    }
    else if (limit.min === limit.max) {
        limit.min -= limit.min / 10;
        limit.max += limit.max / 10;
    }
    return limit;
}
function initDataRange(accDataRangeValue, curDataRangeValue, axisName) {
    var _a, _b, _c, _d;
    const defaultDataRange = {
        min: Number.MAX_SAFE_INTEGER,
        max: Number.MIN_SAFE_INTEGER,
    };
    return {
        min: Math.min(curDataRangeValue[axisName].min, (_b = (_a = accDataRangeValue[axisName]) === null || _a === void 0 ? void 0 : _a.min, (_b !== null && _b !== void 0 ? _b : defaultDataRange.min))),
        max: Math.max(curDataRangeValue[axisName].max, (_d = (_c = accDataRangeValue[axisName]) === null || _c === void 0 ? void 0 : _c.max, (_d !== null && _d !== void 0 ? _d : defaultDataRange.max))),
    };
}
function getTotalDataRange(seriesDataRange) {
    return Object.values(seriesDataRange).reduce((acc, cur) => {
        if (cur.xAxis) {
            acc.xAxis = initDataRange(acc, cur, 'xAxis');
        }
        if (cur.yAxis) {
            acc.yAxis = initDataRange(acc, cur, 'yAxis');
        }
        if (cur.secondaryYAxis) {
            acc.secondaryYAxis = initDataRange(acc, cur, 'secondaryYAxis');
        }
        if (cur.circularAxis) {
            acc.circularAxis = initDataRange(acc, cur, 'circularAxis');
        }
        if (cur.verticalAxis) {
            acc.verticalAxis = initDataRange(acc, cur, 'verticalAxis');
        }
        return acc;
    }, {});
}
function setSeriesDataRange({ options, seriesName, values, valueAxisName, seriesDataRange, }) {
    var _a;
    let axisNames;
    if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.includes)([_component_axis__WEBPACK_IMPORTED_MODULE_1__.AxisType.X, _component_axis__WEBPACK_IMPORTED_MODULE_1__.AxisType.CIRCULAR, _component_axis__WEBPACK_IMPORTED_MODULE_1__.AxisType.VERTICAL], valueAxisName)) {
        axisNames = [valueAxisName];
    }
    else {
        const optionsUsingYAxis = options;
        const { secondaryYAxis } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_2__.getYAxisOption)(optionsUsingYAxis);
        axisNames =
            (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_2__.hasSecondaryYAxis)(optionsUsingYAxis) && ((_a = secondaryYAxis) === null || _a === void 0 ? void 0 : _a.chartType)
                ? [secondaryYAxis.chartType === seriesName ? 'secondaryYAxis' : 'yAxis']
                : (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_2__.getValueAxisNames)(optionsUsingYAxis, valueAxisName);
    }
    axisNames.forEach((axisName) => {
        seriesDataRange[seriesName][axisName] = getLimitSafely([...new Set(values)]);
    });
    return seriesDataRange;
}
function getBoxPlotValues(series, seriesName) {
    return series[seriesName].data.flatMap(({ data, outliers = [] }) => [
        ...((data !== null && data !== void 0 ? data : [])).flatMap((datum) => datum),
        ...((outliers !== null && outliers !== void 0 ? outliers : [])).flatMap((datum) => datum),
    ]);
}
function getBulletValues(series, seriesName) {
    return series[seriesName].data.flatMap(({ data, markers, ranges }) => [
        data,
        ...((markers !== null && markers !== void 0 ? markers : [])).flatMap((datum) => datum),
        ...((ranges !== null && ranges !== void 0 ? ranges : [])).flatMap((range) => range),
    ]);
}
function getCoordinateDataValues(values, categories, hasDateValue) {
    const yAxisValues = values
        .filter((value) => !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNull)(value))
        .map((value) => (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_3__.getCoordinateYValue)(value));
    const xAxisValues = categories.map((value) => hasDateValue ? Number(new Date(value)) : Number(value));
    return { xAxisValues, yAxisValues };
}
const dataRange = {
    name: 'dataRange',
    state: () => ({
        dataRange: {},
    }),
    action: {
        setDataRange({ state, initStoreState }) {
            const { series, disabledSeries, stackSeries, categories, options } = state;
            const seriesDataRange = {};
            const labelAxisOnYAxis = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_2__.isLabelAxisOnYAxis)({ series, options, categories });
            const { labelAxisName, valueAxisName } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_2__.getAxisName)(labelAxisOnYAxis, series);
            Object.keys(series).forEach((seriesName) => {
                var _a, _b;
                seriesDataRange[seriesName] = {};
                let values = series[seriesName].data.flatMap(({ data, name }) => disabledSeries.includes(name) ? [] : data);
                const firstExistValue = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.getFirstValidValue)(values);
                if ((0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_3__.isCoordinateSeries)(initStoreState.series)) {
                    const hasDateValue = !!((_a = options.xAxis) === null || _a === void 0 ? void 0 : _a.date);
                    const { yAxisValues, xAxisValues } = getCoordinateDataValues(values, categories, hasDateValue);
                    values = yAxisValues;
                    seriesDataRange[seriesName][labelAxisName] = getLimitSafely([...xAxisValues], true);
                }
                else if (!series[seriesName].data.length) {
                    values = [];
                }
                else if ((0,_helpers_range__WEBPACK_IMPORTED_MODULE_4__.isRangeValue)(firstExistValue)) {
                    values = values.reduce((arr, value) => {
                        if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNull)(value)) {
                            return arr;
                        }
                        return Array.isArray(value) ? [...arr, ...value] : [...value];
                    }, []);
                }
                else if (stackSeries && ((_b = stackSeries[seriesName]) === null || _b === void 0 ? void 0 : _b.stack)) {
                    values = stackSeries[seriesName].dataRangeValues;
                }
                else if (seriesName === 'boxPlot') {
                    values = getBoxPlotValues(series, seriesName);
                }
                else if (seriesName === 'bullet') {
                    values = getBulletValues(series, seriesName);
                }
                if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.includes)(['bar', 'column', 'radar', 'bullet'], seriesName)) {
                    values.push(0);
                }
                setSeriesDataRange({
                    options,
                    seriesName,
                    values,
                    valueAxisName,
                    seriesDataRange,
                });
            });
            const newDataRange = getTotalDataRange(seriesDataRange);
            (0,_store__WEBPACK_IMPORTED_MODULE_5__.extend)(state.dataRange, newDataRange);
        },
    },
    observe: {
        updateDataRange() {
            this.dispatch('setDataRange');
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dataRange);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/gaugeAxes.js":
/*!******************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/gaugeAxes.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DATA_LABEL_MARGIN": () => (/* binding */ DATA_LABEL_MARGIN),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _helpers_sector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/sector */ "./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _radialAxes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./radialAxes */ "./node_modules/@toast-ui/chart/dist/esm/store/radialAxes.js");
/* harmony import */ var _helpers_plot__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/plot */ "./node_modules/@toast-ui/chart/dist/esm/helpers/plot.js");







const DEFAULT_LABEL_PADDING = 15;
const RANGE_BAR_MARGIN = 10;
const CLOCK_HAND_MARGIN = 10;
const DATA_LABEL_MARGIN = 30;
function makeSolidData(outerRadius, barWidth, solidOptions) {
    const initialSolidOptions = (solidOptions !== null && solidOptions !== void 0 ? solidOptions : false);
    const solidBarWidth = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.calculateSizeWithPercentString)(outerRadius, barWidth);
    const defaultSolidOptions = {
        visible: true,
        radiusRange: {
            inner: outerRadius - solidBarWidth,
            outer: outerRadius,
        },
        barWidth: solidBarWidth,
        clockHand: false,
    };
    if (!initialSolidOptions) {
        return Object.assign(Object.assign({}, defaultSolidOptions), { visible: false });
    }
    return (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(initialSolidOptions)
        ? Object.assign(Object.assign({}, defaultSolidOptions), initialSolidOptions) : defaultSolidOptions;
}
function getCircularAxisData({ labels, intervalData, circularAxisLabelMargin, circularAxisLabelFont, defaultAxisData, bandWidth, options, solidBarWidth, }) {
    var _a, _b, _c, _d;
    const { maxLabelWidth, maxLabelHeight } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getMaxLabelSize)(labels, circularAxisLabelMargin, circularAxisLabelFont);
    const { totalAngle, axisSize, centerX, centerY, startAngle, endAngle, drawingStartAngle, clockwise, } = defaultAxisData;
    const { tickInterval, labelInterval } = intervalData;
    const outerRadius = axisSize - bandWidth - RANGE_BAR_MARGIN;
    const solidBarWidthValue = (solidBarWidth !== null && solidBarWidth !== void 0 ? solidBarWidth : outerRadius * 0.1);
    const solidData = makeSolidData(outerRadius - circularAxisLabelMargin - maxLabelHeight - (circularAxisLabelMargin - 5), solidBarWidthValue, (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b.solid);
    const centralAngle = totalAngle / (labels.length + (totalAngle < _helpers_sector__WEBPACK_IMPORTED_MODULE_2__.DEGREE_360 ? -1 : _helpers_sector__WEBPACK_IMPORTED_MODULE_2__.DEGREE_0));
    const maxClockHandSize = outerRadius -
        circularAxisLabelMargin -
        maxLabelHeight -
        CLOCK_HAND_MARGIN +
        (solidData.visible ? -solidData.barWidth - CLOCK_HAND_MARGIN : 0);
    return {
        axisSize,
        centerX,
        centerY,
        label: {
            labels,
            interval: labelInterval,
            margin: circularAxisLabelMargin,
            maxWidth: maxLabelWidth,
            maxHeight: maxLabelHeight,
        },
        radius: {
            inner: 0,
            outer: outerRadius,
        },
        angle: {
            start: startAngle,
            end: endAngle,
            total: totalAngle,
            central: centralAngle,
            drawingStart: drawingStartAngle,
        },
        band: {
            width: bandWidth,
            margin: RANGE_BAR_MARGIN,
        },
        tickInterval,
        clockwise,
        maxClockHandSize,
        title: (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.makeTitleOption)((_d = (_c = options) === null || _c === void 0 ? void 0 : _c.circularAxis) === null || _d === void 0 ? void 0 : _d.title),
        solidData,
    };
}
function makeLabels(options, rawLabels, axisName) {
    var _a, _b, _c;
    const formatter = (_c = (_b = (_a = options[axisName]) === null || _a === void 0 ? void 0 : _a.label) === null || _b === void 0 ? void 0 : _b.formatter, (_c !== null && _c !== void 0 ? _c : ((value) => value)));
    return rawLabels.map((label, index) => formatter(label, { index, labels: rawLabels, axisName }));
}
function getAxisLabels(isLabelOnVerticalAxis, options, categories, scale) {
    const valueAxisName = isLabelOnVerticalAxis
        ? _radialAxes__WEBPACK_IMPORTED_MODULE_3__.RadialAxisType.CIRCULAR
        : _radialAxes__WEBPACK_IMPORTED_MODULE_3__.RadialAxisType.VERTICAL;
    const { limit, stepSize } = scale[valueAxisName];
    const valueLabels = makeLabels(options, (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_4__.makeLabelsFromLimit)(limit, stepSize), valueAxisName);
    const categoryLabels = makeLabels(options, categories, isLabelOnVerticalAxis ? _radialAxes__WEBPACK_IMPORTED_MODULE_3__.RadialAxisType.VERTICAL : _radialAxes__WEBPACK_IMPORTED_MODULE_3__.RadialAxisType.CIRCULAR);
    return isLabelOnVerticalAxis ? valueLabels : categoryLabels;
}
function getAxisLabelMargin(options) {
    var _a, _b, _c, _d;
    return _d = (_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.circularAxis) === null || _b === void 0 ? void 0 : _b.label) === null || _c === void 0 ? void 0 : _c.margin, (_d !== null && _d !== void 0 ? _d : DEFAULT_LABEL_PADDING);
}
function hasAxesLayoutChanged(previousAxes, currentAxes) {
    var _a, _b, _c, _d;
    const prevMaxWidth = (_b = (_a = previousAxes) === null || _a === void 0 ? void 0 : _a.label) === null || _b === void 0 ? void 0 : _b.maxWidth;
    const prevMaxHeight = (_d = (_c = previousAxes) === null || _c === void 0 ? void 0 : _c.label) === null || _d === void 0 ? void 0 : _d.maxHeight;
    const curMaxWidth = currentAxes.label.maxWidth;
    const curMaxHeight = currentAxes.label.maxHeight;
    return prevMaxHeight !== curMaxHeight || prevMaxWidth !== curMaxWidth;
}
const axes = {
    name: 'gaugeAxes',
    state: () => ({
        radialAxes: {
            circularAxis: {},
        },
    }),
    action: {
        setCircularAxisData({ state }) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
            const { series, layout, scale } = state;
            const categories = state.categories;
            const { plot } = layout;
            const isLabelOnVerticalAxis = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.isLabelAxisOnYAxis)({ series, categories });
            const options = state.options;
            const theme = state.theme;
            const circularAxisLabelFont = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_5__.getTitleFontString)(theme.circularAxis.label);
            const circularAxisLabelMargin = getAxisLabelMargin(options);
            const circularAxisLabels = getAxisLabels(isLabelOnVerticalAxis, options, categories, scale);
            const { maxLabelWidth, maxLabelHeight } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getMaxLabelSize)(circularAxisLabels, circularAxisLabelMargin, circularAxisLabelFont);
            const defaultAxisData = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getDefaultRadialAxisData)(options, plot, maxLabelWidth, maxLabelHeight, isLabelOnVerticalAxis);
            const dataLabelHeight = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_4__.getFontHeight)((0,_helpers_style__WEBPACK_IMPORTED_MODULE_5__.getTitleFontString)(theme.series.gauge.dataLabels));
            const dataLabelOffsetY = (_d = (_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b.dataLabels) === null || _c === void 0 ? void 0 : _c.offsetY, (_d !== null && _d !== void 0 ? _d : DATA_LABEL_MARGIN));
            if (defaultAxisData.isSemiCircular) {
                defaultAxisData.centerY =
                    defaultAxisData.centerY - (dataLabelOffsetY > 0 ? dataLabelOffsetY + dataLabelHeight : 0);
                const diffHeight = defaultAxisData.centerY - defaultAxisData.axisSize;
                defaultAxisData.axisSize += diffHeight < 0 ? diffHeight : 0;
            }
            const defualtBandWidth = ((_g = (_f = (_e = options) === null || _e === void 0 ? void 0 : _e.plot) === null || _f === void 0 ? void 0 : _f.bands) === null || _g === void 0 ? void 0 : _g.length) ? defaultAxisData.axisSize / 2 - RANGE_BAR_MARGIN
                : 0;
            const bandWidth = (_k = (_j = (_h = theme.plot) === null || _h === void 0 ? void 0 : _h.bands) === null || _j === void 0 ? void 0 : _j.barWidth, (_k !== null && _k !== void 0 ? _k : defualtBandWidth));
            const circularAxisData = getCircularAxisData({
                labels: circularAxisLabels,
                intervalData: (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getInitAxisIntervalData)(true, {
                    axis: options.circularAxis,
                    categories,
                    layout,
                }),
                defaultAxisData,
                circularAxisLabelMargin,
                circularAxisLabelFont,
                bandWidth,
                options,
                solidBarWidth: (_m = (_l = theme.series.gauge) === null || _l === void 0 ? void 0 : _l.solid) === null || _m === void 0 ? void 0 : _m.barWidth,
            });
            if (hasAxesLayoutChanged((_o = state.radialAxes) === null || _o === void 0 ? void 0 : _o.circularAxis, circularAxisData)) {
                this.notify(state, 'layout');
            }
            state.radialAxes = {
                circularAxis: circularAxisData,
            };
        },
        addGaugePlotBand({ state }, { data }) {
            var _a, _b, _c;
            const bands = (_c = (_b = (_a = state.options) === null || _a === void 0 ? void 0 : _a.plot) === null || _b === void 0 ? void 0 : _b.bands, (_c !== null && _c !== void 0 ? _c : []));
            if (!(0,_helpers_plot__WEBPACK_IMPORTED_MODULE_6__.isExistPlotId)(bands, data)) {
                this.dispatch('updateOptions', { options: { plot: { bands: [...bands, data] } } });
            }
        },
        removeGaugePlotBand({ state }, { id }) {
            var _a, _b, _c;
            const bands = (_c = (_b = (_a = state.options) === null || _a === void 0 ? void 0 : _a.plot) === null || _b === void 0 ? void 0 : _b.bands, (_c !== null && _c !== void 0 ? _c : [])).filter(({ id: bandId }) => bandId !== id);
            this.dispatch('updateOptions', { options: { plot: { bands } } });
        },
    },
    observe: {
        updateRadialAxes() {
            this.dispatch('setCircularAxisData');
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (axes);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/heatmapAxes.js":
/*!********************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/heatmapAxes.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _component_axis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../component/axis */ "./node_modules/@toast-ui/chart/dist/esm/component/axis.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");




function getHeatmapAxisData(stateProp, axisType) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const { categories, axisSize, axisLayout, options, theme } = stateProp;
    const isLabelAxis = axisType === _component_axis__WEBPACK_IMPORTED_MODULE_0__.AxisType.X;
    const axisName = isLabelAxis ? 'x' : 'y';
    const dateType = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.isDateType)(options, axisType);
    const labels = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getLabelsAppliedFormatter)(categories[axisName], options, dateType, axisType);
    const tickIntervalCount = labels.length;
    const tickDistance = tickIntervalCount ? axisSize / tickIntervalCount : axisSize;
    const labelDistance = axisSize / tickIntervalCount;
    const pointOnColumn = true;
    const tickCount = tickIntervalCount + 1;
    const tickInterval = (_c = (_b = (_a = options[axisType]) === null || _a === void 0 ? void 0 : _a.tick) === null || _b === void 0 ? void 0 : _b.interval, (_c !== null && _c !== void 0 ? _c : 1));
    const labelInterval = (_f = (_e = (_d = options[axisType]) === null || _d === void 0 ? void 0 : _d.label) === null || _e === void 0 ? void 0 : _e.interval, (_f !== null && _f !== void 0 ? _f : 1));
    const viewLabels = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getViewAxisLabels)({
        labels,
        pointOnColumn,
        tickDistance,
        tickCount,
        tickInterval,
        labelInterval,
    }, axisSize);
    const labelXMargin = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getLabelXMargin)(axisType, options);
    const { maxLabelWidth, maxLabelHeight } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getMaxLabelSize)(labels, labelXMargin, (0,_helpers_style__WEBPACK_IMPORTED_MODULE_2__.getTitleFontString)(theme.label));
    const axisData = {
        labels,
        viewLabels,
        pointOnColumn,
        isLabelAxis,
        tickCount,
        tickDistance,
        labelDistance,
        tickInterval,
        labelInterval,
        title: (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.makeTitleOption)((_g = options[axisType]) === null || _g === void 0 ? void 0 : _g.title),
        maxLabelWidth,
        maxLabelHeight,
    };
    if (axisType === _component_axis__WEBPACK_IMPORTED_MODULE_0__.AxisType.X) {
        const labelMargin = (_k = (_j = (_h = options.xAxis) === null || _h === void 0 ? void 0 : _h.label) === null || _j === void 0 ? void 0 : _j.margin, (_k !== null && _k !== void 0 ? _k : 0));
        const offsetY = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_3__.getAxisLabelAnchorPoint)(maxLabelHeight) + labelMargin;
        const distance = axisSize / viewLabels.length;
        const rotationData = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.makeRotationData)(maxLabelWidth, maxLabelHeight, distance, (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getRotatableOption)(options), axisLayout);
        const { needRotateLabel, rotationHeight } = rotationData;
        const maxHeight = (needRotateLabel ? rotationHeight : maxLabelHeight) + offsetY;
        return Object.assign(Object.assign(Object.assign({}, axisData), rotationData), { maxHeight,
            offsetY });
    }
    return axisData;
}
const axes = {
    name: 'axes',
    state: () => {
        return {
            axes: {
                xAxis: {},
                yAxis: {},
            },
        };
    },
    action: {
        setAxesData({ state }) {
            const { layout, theme } = state;
            const { width, height } = layout.plot;
            const categories = state.categories;
            const options = state.options;
            const xAxisData = getHeatmapAxisData({
                axisSize: width,
                categories,
                options,
                theme: (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getAxisTheme)(theme, _component_axis__WEBPACK_IMPORTED_MODULE_0__.AxisType.X),
                axisLayout: layout[_component_axis__WEBPACK_IMPORTED_MODULE_0__.AxisType.X],
            }, _component_axis__WEBPACK_IMPORTED_MODULE_0__.AxisType.X);
            const yAxisData = getHeatmapAxisData({
                axisSize: height,
                categories,
                options,
                theme: (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.getAxisTheme)(theme, _component_axis__WEBPACK_IMPORTED_MODULE_0__.AxisType.Y),
            }, _component_axis__WEBPACK_IMPORTED_MODULE_0__.AxisType.Y);
            const axesState = { xAxis: xAxisData, yAxis: yAxisData };
            if ((0,_helpers_axes__WEBPACK_IMPORTED_MODULE_1__.hasAxesLayoutChanged)(state.axes, axesState)) {
                this.notify(state, 'layout');
            }
            state.axes = axesState;
        },
    },
    computed: {},
    observe: {
        updateAxes() {
            this.dispatch('setAxesData');
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (axes);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/heatmapSeriesData.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/heatmapSeriesData.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_range__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/range */ "./node_modules/@toast-ui/chart/dist/esm/helpers/range.js");

function makeHeatmapSeries(series, categories, viewRange) {
    if (!series.heatmap) {
        return [];
    }
    return series.heatmap.data.map((rowSeries, y) => {
        const { yCategory, data } = rowSeries;
        return (0,_helpers_range__WEBPACK_IMPORTED_MODULE_0__.getDataInRange)(data, viewRange).map((colorValue, x) => ({
            colorValue,
            category: {
                x: categories.x[x],
                y: yCategory,
            },
            indexes: [x, y],
        }));
    });
}
const heatmapSeriesData = {
    name: 'heatmapSeriesData',
    state: () => ({
        heatmapSeries: [],
    }),
    action: {
        setHeatmapSeriesData({ state, computed }) {
            state.heatmapSeries = makeHeatmapSeries(state.series, state.categories, computed.viewRange);
        },
    },
    observe: {
        updateTreemapSeriesData() {
            this.dispatch('setHeatmapSeriesData');
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (heatmapSeriesData);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/layout.js":
/*!***************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/layout.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "padding": () => (/* binding */ padding),
/* harmony export */   "X_AXIS_HEIGHT": () => (/* binding */ X_AXIS_HEIGHT),
/* harmony export */   "isVerticalAlign": () => (/* binding */ isVerticalAlign),
/* harmony export */   "isUsingResetButton": () => (/* binding */ isUsingResetButton),
/* harmony export */   "isExportMenuVisible": () => (/* binding */ isExportMenuVisible),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./store */ "./node_modules/@toast-ui/chart/dist/esm/store/store.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _axes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./axes */ "./node_modules/@toast-ui/chart/dist/esm/store/axes.js");
/* harmony import */ var _component_exportMenu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../component/exportMenu */ "./node_modules/@toast-ui/chart/dist/esm/component/exportMenu.js");
/* harmony import */ var _brushes_axis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brushes/axis */ "./node_modules/@toast-ui/chart/dist/esm/brushes/axis.js");
/* harmony import */ var _brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../brushes/spectrumLegend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/spectrumLegend.js");
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");







const padding = { X: 10, Y: 15 };
const X_AXIS_HEIGHT = 20;
const Y_AXIS_MIN_WIDTH = 40;
function isVerticalAlign(align) {
    return align === 'top' || align === 'bottom';
}
function getValidRectSize(size, width, height) {
    var _a, _b, _c, _d;
    return {
        height: (_b = (_a = size) === null || _a === void 0 ? void 0 : _a.height, (_b !== null && _b !== void 0 ? _b : height)),
        width: (_d = (_c = size) === null || _c === void 0 ? void 0 : _c.width, (_d !== null && _d !== void 0 ? _d : width)),
    };
}
function getDefaultXAxisHeight(size) {
    var _a;
    return ((_a = size.xAxis) === null || _a === void 0 ? void 0 : _a.height) && !size.yAxis ? size.xAxis.height : X_AXIS_HEIGHT;
}
function getDefaultYAxisXPoint(yAxisRectParam) {
    const { yAxisTitle, isRightSide, visibleSecondaryYAxis } = yAxisRectParam;
    const yAxisWidth = getDefaultYAxisWidth(yAxisRectParam);
    return isRightSide && visibleSecondaryYAxis
        ? Math.max(yAxisTitle.x + yAxisTitle.width - yAxisWidth, 0)
        : yAxisTitle.x;
}
function getYAxisXPoint(yAxisRectParam) {
    const { chartSize, legend, circleLegend, hasCenterYAxis, maxLabelWidth } = yAxisRectParam;
    const { width } = chartSize;
    const { align } = legend;
    let yAxisWidth = getDefaultYAxisWidth(yAxisRectParam);
    let x = getDefaultYAxisXPoint(yAxisRectParam);
    if (hasCenterYAxis) {
        yAxisWidth = maxLabelWidth + (_brushes_axis__WEBPACK_IMPORTED_MODULE_0__.TICK_SIZE + padding.X) * 2;
        x = (width - legend.width - yAxisWidth + padding.X * 2) / 2;
    }
    if (legend.visible && align === 'left') {
        x = getDefaultYAxisXPoint(yAxisRectParam);
    }
    if (circleLegend.visible && align === 'left') {
        x = Math.max(circleLegend.width + padding.X, x);
    }
    return x;
}
function getYAxisYPoint({ yAxisTitle }) {
    return yAxisTitle.y + yAxisTitle.height;
}
function getDefaultYAxisWidth({ maxLabelWidth, size, isRightSide }) {
    var _a, _b, _c;
    return _c = (_b = (_a = size) === null || _a === void 0 ? void 0 : _a[isRightSide ? 'secondaryYAxis' : 'yAxis']) === null || _b === void 0 ? void 0 : _b.width, (_c !== null && _c !== void 0 ? _c : maxLabelWidth);
}
function getYAxisWidth(yAxisRectParam) {
    const { hasCenterYAxis, hasXYAxis, maxLabelWidth, visibleSecondaryYAxis = false, isRightSide = false, } = yAxisRectParam;
    let yAxisWidth = getDefaultYAxisWidth(yAxisRectParam);
    if (hasCenterYAxis && !isRightSide) {
        yAxisWidth = maxLabelWidth + (_brushes_axis__WEBPACK_IMPORTED_MODULE_0__.TICK_SIZE + padding.X) * 2;
    }
    else if (!hasXYAxis || (isRightSide && !visibleSecondaryYAxis)) {
        yAxisWidth = 0;
    }
    return yAxisWidth;
}
function getYAxisHeight({ chartSize, legend, yAxisTitle, hasXYAxis, size, xAxisTitleHeight, }) {
    var _a, _b, _c, _d;
    const { height } = chartSize;
    const { align, height: legendHeight } = legend;
    const xAxisHeight = getDefaultXAxisHeight(size);
    const y = yAxisTitle.y + yAxisTitle.height;
    let yAxisHeight = height - y - xAxisHeight - xAxisTitleHeight;
    if (!hasXYAxis) {
        yAxisHeight = height - y;
    }
    if (legend.visible) {
        const topArea = Math.max(y, legendHeight);
        if (align === 'top') {
            yAxisHeight = height - topArea - (hasXYAxis ? X_AXIS_HEIGHT + xAxisTitleHeight : 0);
        }
        else if (align === 'bottom') {
            yAxisHeight = height - y - X_AXIS_HEIGHT - xAxisTitleHeight - legendHeight;
        }
    }
    if (!((_b = (_a = size) === null || _a === void 0 ? void 0 : _a.yAxis) === null || _b === void 0 ? void 0 : _b.height) && ((_d = (_c = size) === null || _c === void 0 ? void 0 : _c.plot) === null || _d === void 0 ? void 0 : _d.height)) {
        yAxisHeight = size.plot.height;
    }
    return yAxisHeight;
}
function getYAxisRect(yAxisRectParam) {
    var _a, _b;
    const { size, isRightSide = false } = yAxisRectParam;
    const x = getYAxisXPoint(yAxisRectParam);
    const y = getYAxisYPoint(yAxisRectParam);
    const yAxisWidth = getYAxisWidth(yAxisRectParam);
    const yAxisHeight = getYAxisHeight(yAxisRectParam);
    return Object.assign({ x,
        y }, getValidRectSize(isRightSide ? (_a = size) === null || _a === void 0 ? void 0 : _a.secondaryYAxis : (_b = size) === null || _b === void 0 ? void 0 : _b.yAxis, yAxisWidth, yAxisHeight));
}
function getXAxisWidth({ chartSize, yAxis, hasCenterYAxis, legend, circleLegend, secondaryYAxis, xAxisData, }) {
    var _a;
    const { width } = chartSize;
    const { align, width: legendWidth } = legend;
    const legendVerticalAlign = isVerticalAlign(align);
    let xAxisWidth;
    if (legendVerticalAlign) {
        xAxisWidth = width - (yAxis.x + yAxis.width + padding.X);
        if (circleLegend.visible) {
            xAxisWidth -= circleLegend.width;
        }
    }
    else {
        xAxisWidth =
            width - (yAxis.width + Math.max(legendWidth, circleLegend.visible ? circleLegend.width : 0));
    }
    if (hasCenterYAxis) {
        xAxisWidth = width - (legendVerticalAlign ? 0 : legendWidth) - padding.X * 2;
    }
    if (secondaryYAxis.width) {
        xAxisWidth -= secondaryYAxis.width;
    }
    if ((_a = xAxisData) === null || _a === void 0 ? void 0 : _a.maxLabelWidth) {
        // subtract half of the maximum label length to secure margin size
        xAxisWidth -= xAxisData.maxLabelWidth * 0.5;
    }
    return xAxisWidth;
}
function getXAxisHeight(xAxisData, hasXYAxis = false) {
    var _a, _b;
    if (!hasXYAxis) {
        return 0;
    }
    return _b = (_a = xAxisData) === null || _a === void 0 ? void 0 : _a.maxHeight, (_b !== null && _b !== void 0 ? _b : X_AXIS_HEIGHT);
}
function getXAxisRect(xAxisRectParam) {
    var _a;
    const { hasXYAxis, hasCenterYAxis, yAxis, size, xAxisData } = xAxisRectParam;
    const x = hasCenterYAxis ? padding.X * 2 : yAxis.x + yAxis.width;
    const y = yAxis.y + yAxis.height;
    const xAxisWidth = getXAxisWidth(xAxisRectParam);
    const xAxisHeight = getXAxisHeight(xAxisData, hasXYAxis);
    return Object.assign({ x,
        y }, getValidRectSize((_a = size) === null || _a === void 0 ? void 0 : _a.xAxis, xAxisWidth, xAxisHeight));
}
function getLegendRect(legendRectParams) {
    const { legend, xAxis, yAxis, chartSize, title, hasXYAxis, secondaryYAxis, xAxisTitleHeight, } = legendRectParams;
    if (!legend.visible) {
        return {
            x: 0,
            y: 0,
            width: 0,
            height: 0,
        };
    }
    const { align, width: legendWidth, height: legendHeight } = legend;
    const { width } = chartSize;
    const verticalAlign = isVerticalAlign(align);
    let x = xAxis.x + xAxis.width + secondaryYAxis.width + padding.X;
    let y = Math.max(yAxis.y, _component_exportMenu__WEBPACK_IMPORTED_MODULE_1__.BUTTON_RECT_SIZE);
    if (verticalAlign) {
        x = (width - legendWidth) / 2;
        if (align === 'top') {
            y = title.y + title.height;
        }
        else {
            y = yAxis.y + yAxis.height + (hasXYAxis ? xAxis.height + xAxisTitleHeight : padding.Y);
        }
    }
    else if (align === 'left') {
        x = padding.X;
    }
    return { width: legendWidth, height: legendHeight, x, y };
}
function getCircleLegendRect(xAxis, yAxis, align, width) {
    return {
        width,
        height: yAxis.height,
        x: align === 'left' ? padding.X : xAxis.x + xAxis.width + padding.X,
        y: yAxis.y,
    };
}
function getPlotRect(xAxis, yAxis, size) {
    return Object.assign({ x: xAxis.x, y: yAxis.y }, getValidRectSize(size, xAxis.width, yAxis.height));
}
function getTitleRect(chartSize, exportMenu, visible, titleHeight) {
    const point = { x: padding.X, y: padding.Y };
    const marginBottom = 5;
    const width = visible ? chartSize.width - exportMenu.width : 0;
    const height = visible
        ? Math.max(titleHeight + marginBottom, exportMenu.height)
        : exportMenu.height;
    return Object.assign({ width, height }, point);
}
function getTopLegendAreaHeight(useSpectrumLegend, legendHeight) {
    return useSpectrumLegend
        ? _brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_2__.SPECTRUM_LEGEND_LABEL_HEIGHT +
            _brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_2__.spectrumLegendBar.PADDING * 2 +
            _brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_2__.spectrumLegendTooltip.POINT_HEIGHT +
            _brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_2__.spectrumLegendTooltip.HEIGHT +
            padding.Y
        : legendHeight + padding.Y;
}
function getYAxisTitleRect({ chartSize, visible, title, legend: { align: legendAlign, width: legendWidth, height: legendHeight, visible: legendVisible, useSpectrumLegend, }, hasCenterYAxis, visibleSecondaryYAxis, isRightSide = false, yAxisTitleHeight, }) {
    const marginBottom = 5;
    const height = visible ? yAxisTitleHeight + marginBottom : 0;
    const verticalLegendAlign = isVerticalAlign(legendAlign);
    const width = (chartSize.width - (verticalLegendAlign ? padding.X * 2 : legendWidth)) /
        (visibleSecondaryYAxis ? 2 : 1);
    const point = {
        x: isRightSide ? title.x + width : title.x,
        y: title.y + title.height,
    };
    if (legendVisible) {
        if (legendAlign === 'left') {
            point.x += legendWidth;
        }
        else if (legendAlign === 'top') {
            point.y += getTopLegendAreaHeight(useSpectrumLegend, legendHeight);
        }
    }
    if (hasCenterYAxis) {
        point.x = (width + padding.X * 2) / 2;
    }
    return Object.assign({ height, width }, point);
}
function getXAxisTitleRect(visible, xAxis, xAxisTitleHeight) {
    const point = { x: xAxis.x, y: xAxis.y + xAxis.height };
    const height = visible ? xAxisTitleHeight : 0;
    const width = visible ? xAxis.width : 0;
    return Object.assign({ height, width }, point);
}
function getExportMenuRect(chartSize, visible) {
    const marginY = 5;
    const x = visible ? padding.X + chartSize.width - _component_exportMenu__WEBPACK_IMPORTED_MODULE_1__.BUTTON_RECT_SIZE : padding.X + chartSize.width;
    const y = padding.Y;
    const height = visible ? _component_exportMenu__WEBPACK_IMPORTED_MODULE_1__.BUTTON_RECT_SIZE + marginY : 0;
    const width = visible ? _component_exportMenu__WEBPACK_IMPORTED_MODULE_1__.BUTTON_RECT_SIZE : 0;
    return { x, y, height, width };
}
function getResetButtonRect(exportMenu, useResetButton) {
    const marginY = 5;
    const x = useResetButton ? exportMenu.x - _component_exportMenu__WEBPACK_IMPORTED_MODULE_1__.BUTTON_RECT_SIZE - padding.X : 0;
    const y = useResetButton ? exportMenu.y : 0;
    const height = useResetButton ? _component_exportMenu__WEBPACK_IMPORTED_MODULE_1__.BUTTON_RECT_SIZE + marginY : 0;
    const width = useResetButton ? _component_exportMenu__WEBPACK_IMPORTED_MODULE_1__.BUTTON_RECT_SIZE : 0;
    return { x, y, height, width };
}
function isUsingResetButton(options) {
    var _a;
    return !!((_a = options.series) === null || _a === void 0 ? void 0 : _a.zoomable);
}
function isExportMenuVisible(options) {
    var _a;
    const visible = (_a = options.exportMenu) === null || _a === void 0 ? void 0 : _a.visible;
    return (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(visible) ? true : visible;
}
function getYAxisMaxLabelWidth(maxLabelLength) {
    return maxLabelLength ? maxLabelLength + padding.X : Y_AXIS_MIN_WIDTH;
}
function pickOptionSize(option) {
    if (!option || ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(option.width) && (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(option.height))) {
        return null;
    }
    return (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.pick)(option, 'width', 'height');
}
function validOffsetValue(axis, plot, sizeKey) {
    const axisSize = axis[sizeKey];
    const plotSize = plot[sizeKey];
    if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.isNumber)(axisSize) && (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_3__.isNumber)(plotSize)) {
        return Math.max(axisSize, plotSize);
    }
}
function getOptionSize(options) {
    const xAxis = pickOptionSize(options.xAxis);
    const yAxisOptions = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_4__.getYAxisOption)(options);
    const yAxis = pickOptionSize(yAxisOptions.yAxis);
    const secondaryYAxis = pickOptionSize(yAxisOptions.secondaryYAxis);
    const plot = pickOptionSize(options.plot);
    if (plot) {
        /*
        If both the width of the x-axis and the width of the plot are entered,
        set the maximum value.
      */
        if (xAxis) {
            xAxis.width = plot.width = validOffsetValue(xAxis, plot, 'width');
        }
        /*
        If both the height of the y-axis and the height of the plot are entered,
        set the maximum value.
      */
        if (yAxis) {
            yAxis.height = plot.height = validOffsetValue(yAxis, plot, 'height');
        }
        if (secondaryYAxis) {
            secondaryYAxis.height = plot.height = validOffsetValue(secondaryYAxis, plot, 'height');
        }
    }
    return {
        xAxis,
        yAxis,
        plot,
        secondaryYAxis,
    };
}
function getAxisTitleHeight(axisTheme, offsetY = 0) {
    const fontSize = Array.isArray(axisTheme)
        ? Math.max(axisTheme[0].title.fontSize, axisTheme[1].title.fontSize)
        : axisTheme.title.fontSize;
    return fontSize + offsetY;
}
function adjustAxisSize({ width, height }, layout, legendState) {
    if (width < 0 || height < 0) {
        return;
    }
    const { title, yAxisTitle, yAxis, xAxis, xAxisTitle, legend, secondaryYAxis } = layout;
    const { align } = legendState;
    const hasVerticalLegend = isVerticalAlign(align);
    const legendHeight = hasVerticalLegend ? legend.height : 0;
    const diffHeight = xAxis.height +
        xAxisTitle.height +
        yAxis.height +
        yAxisTitle.height +
        title.height +
        legendHeight -
        height;
    if (diffHeight > 0) {
        yAxis.height -= diffHeight;
        xAxis.y -= diffHeight;
        xAxisTitle.y -= diffHeight;
        if (hasVerticalLegend) {
            legend.y -= diffHeight;
        }
    }
    secondaryYAxis.x = xAxis.x + xAxis.width;
    secondaryYAxis.height = yAxis.height;
}
function getCircularAxisTitleRect(plot, axisTheme, circularAxis) {
    var _a, _b;
    if (!circularAxis) {
        return Object.assign({}, plot);
    }
    const { x, y } = plot;
    const { centerX, centerY, axisSize, title, radius: { outer }, } = circularAxis;
    const offsetY = (_b = (_a = title) === null || _a === void 0 ? void 0 : _a.offsetY, (_b !== null && _b !== void 0 ? _b : 0));
    return {
        x: centerX + x - axisSize / 2,
        y: centerY + y - outer / 2,
        width: axisSize,
        height: axisTheme.title.fontSize + offsetY,
    };
}
function hasXYAxes(series) {
    return !(series.pie || series.radar || series.treemap || series.radialBar || series.gauge);
}
function getYAxisOptions(options, hasXYAxis) {
    return hasXYAxis
        ? (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_4__.getYAxisOption)(options)
        : {
            yAxis: null,
            secondaryYAxis: null,
        };
}
const layout = {
    name: 'layout',
    state: () => ({
        layout: {},
    }),
    action: {
        setLayout({ state }) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
            const { legend: legendState, theme, circleLegend: circleLegendState, series, options, chart, axes, radialAxes, } = state;
            const { width, height } = chart;
            const chartSize = {
                height: height - padding.Y * 2,
                width: width - padding.X * 2,
            };
            const hasCenterYAxis = series.bar ? (0,_axes__WEBPACK_IMPORTED_MODULE_5__.isCenterYAxis)(options) : false;
            const hasXYAxis = hasXYAxes(series);
            const optionSize = getOptionSize(options);
            const { yAxis: yAxisOption, secondaryYAxis: secondaryYAxisOption } = getYAxisOptions(options, hasXYAxis);
            const visibleSecondaryYAxis = !!secondaryYAxisOption;
            const titleHeight = theme.title.fontSize;
            const yAxisTitleHeight = (_d = getAxisTitleHeight(theme.yAxis, (_c = (_b = (_a = axes) === null || _a === void 0 ? void 0 : _a.yAxis) === null || _b === void 0 ? void 0 : _b.title) === null || _c === void 0 ? void 0 : _c.offsetY), (_d !== null && _d !== void 0 ? _d : 0));
            const xAxisTitleHeight = (_h = getAxisTitleHeight(theme.xAxis, (_g = (_f = (_e = axes) === null || _e === void 0 ? void 0 : _e.xAxis) === null || _f === void 0 ? void 0 : _f.title) === null || _g === void 0 ? void 0 : _g.offsetY), (_h !== null && _h !== void 0 ? _h : 0));
            // Don't change the order!
            // exportMenu -> resetButton -> title -> yAxis.title -> yAxis -> secondaryYAxisTitle -> secondaryYAxis -> xAxis -> xAxis.title -> legend -> circleLegend -> plot -> circularAxis.title
            const exportMenu = getExportMenuRect(chartSize, isExportMenuVisible(options));
            const resetButton = getResetButtonRect(exportMenu, isUsingResetButton(options));
            const btnAreaRect = exportMenu.height ? exportMenu : resetButton;
            const title = getTitleRect(chartSize, btnAreaRect, !!((_j = options.chart) === null || _j === void 0 ? void 0 : _j.title), titleHeight);
            const yAxisTitleVisible = !!((_k = yAxisOption) === null || _k === void 0 ? void 0 : _k.title) || !!((_l = secondaryYAxisOption) === null || _l === void 0 ? void 0 : _l.title);
            const yAxisTitle = getYAxisTitleRect({
                chartSize,
                visible: yAxisTitleVisible,
                title,
                legend: legendState,
                hasCenterYAxis,
                visibleSecondaryYAxis,
                yAxisTitleHeight,
            });
            const yAxis = getYAxisRect({
                chartSize,
                legend: legendState,
                circleLegend: circleLegendState,
                yAxisTitle,
                hasCenterYAxis,
                hasXYAxis,
                maxLabelWidth: getYAxisMaxLabelWidth((_m = axes) === null || _m === void 0 ? void 0 : _m.yAxis.maxLabelWidth),
                size: optionSize,
                xAxisTitleHeight,
            });
            const secondaryYAxisTitle = getYAxisTitleRect({
                chartSize,
                visible: yAxisTitleVisible,
                title,
                legend: legendState,
                hasCenterYAxis,
                isRightSide: true,
                visibleSecondaryYAxis,
                yAxisTitleHeight,
            });
            const secondaryYAxis = getYAxisRect({
                chartSize,
                legend: legendState,
                circleLegend: circleLegendState,
                yAxisTitle: secondaryYAxisTitle,
                hasCenterYAxis,
                hasXYAxis,
                maxLabelWidth: getYAxisMaxLabelWidth((_p = (_o = axes) === null || _o === void 0 ? void 0 : _o.secondaryYAxis) === null || _p === void 0 ? void 0 : _p.maxLabelWidth),
                size: optionSize,
                isRightSide: true,
                visibleSecondaryYAxis,
                xAxisTitleHeight,
            });
            const xAxis = getXAxisRect({
                chartSize,
                yAxis,
                secondaryYAxis,
                legend: legendState,
                circleLegend: circleLegendState,
                hasCenterYAxis,
                hasXYAxis,
                size: optionSize,
                xAxisData: (_q = axes) === null || _q === void 0 ? void 0 : _q.xAxis,
            });
            const xAxisTitle = getXAxisTitleRect(!!((_r = options.xAxis) === null || _r === void 0 ? void 0 : _r.title), xAxis, xAxisTitleHeight);
            const legend = getLegendRect({
                chartSize,
                xAxis,
                yAxis,
                secondaryYAxis,
                title,
                legend: legendState,
                hasXYAxis,
                xAxisTitleHeight,
            });
            adjustAxisSize(chartSize, { title, yAxisTitle, yAxis, xAxis, xAxisTitle, legend, secondaryYAxis }, legendState);
            const circleLegend = getCircleLegendRect(xAxis, yAxis, legendState.align, circleLegendState.width);
            const plot = getPlotRect(xAxis, yAxis, optionSize.plot);
            const circularAxisTitle = getCircularAxisTitleRect(plot, theme.circularAxis, (_s = radialAxes) === null || _s === void 0 ? void 0 : _s.circularAxis);
            (0,_store__WEBPACK_IMPORTED_MODULE_6__.extend)(state.layout, {
                chart: { x: 0, y: 0, width, height },
                title,
                plot,
                legend,
                circleLegend,
                xAxis,
                xAxisTitle,
                yAxis,
                yAxisTitle,
                exportMenu,
                resetButton,
                secondaryYAxisTitle,
                secondaryYAxis,
                circularAxisTitle,
            });
        },
    },
    observe: {
        updateLayoutObserve() {
            this.dispatch('setLayout');
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (layout);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/legend.js":
/*!***************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/legend.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _brushes_legend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../brushes/legend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/legend.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./layout */ "./node_modules/@toast-ui/chart/dist/esm/store/layout.js");
/* harmony import */ var _brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../brushes/spectrumLegend */ "./node_modules/@toast-ui/chart/dist/esm/brushes/spectrumLegend.js");
/* harmony import */ var _helpers_pieSeries__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/pieSeries */ "./node_modules/@toast-ui/chart/dist/esm/helpers/pieSeries.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./store */ "./node_modules/@toast-ui/chart/dist/esm/store/store.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _helpers_theme__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/theme */ "./node_modules/@toast-ui/chart/dist/esm/helpers/theme.js");
/* harmony import */ var _helpers_validation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../helpers/validation */ "./node_modules/@toast-ui/chart/dist/esm/helpers/validation.js");
/* harmony import */ var _helpers_legend__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/legend */ "./node_modules/@toast-ui/chart/dist/esm/helpers/legend.js");











const INITIAL_LEGEND_WIDTH = 100;
const INITIAL_CIRCLE_LEGEND_WIDTH = 150;
const COMPONENT_HEIGHT_EXCEPT_Y_AXIS = 100;
const ELLIPSIS_DOT_TEXT = '...';
const WIDEST_TEXT = 'W'; // The widest text width in Arial font.
const NUMBER_OF_BOTH_SIDES = 2;
function recalculateLegendWhenHeightOverflows(params, legendHeight) {
    const { legendWidths, itemHeight } = params;
    const totalHeight = legendWidths.length * itemHeight;
    const columnCount = Math.ceil(totalHeight / legendHeight);
    const rowCount = legendWidths.length / columnCount;
    let legendWidth = 0;
    (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.range)(0, columnCount).forEach((count) => {
        legendWidth += Math.max(...legendWidths.slice(count * rowCount, (count + 1) * rowCount));
    });
    legendWidth += _brushes_legend__WEBPACK_IMPORTED_MODULE_1__.LEGEND_ITEM_MARGIN_X * (columnCount - 1);
    return { legendWidth, legendHeight: rowCount * itemHeight + _layout__WEBPACK_IMPORTED_MODULE_2__.padding.Y, columnCount, rowCount };
}
function recalculateLegendWhenWidthOverflows(params, prevLegendWidth) {
    const { legendWidths, itemHeight } = params;
    let columnCount = 0;
    let legendWidth = 0;
    const { rowCount } = legendWidths.reduce((acc, width) => {
        const widthWithMargin = _brushes_legend__WEBPACK_IMPORTED_MODULE_1__.LEGEND_ITEM_MARGIN_X + width;
        if (acc.totalWidth + width > prevLegendWidth) {
            acc.totalWidth = widthWithMargin;
            acc.rowCount += 1;
            acc.columnCount = 1;
            columnCount = Math.max(columnCount, acc.columnCount);
        }
        else {
            acc.totalWidth += widthWithMargin;
            acc.columnCount += 1;
        }
        legendWidth = Math.max(legendWidth, acc.totalWidth);
        return acc;
    }, { totalWidth: 0, rowCount: 1, columnCount: 0 });
    return { legendHeight: itemHeight * rowCount, rowCount, columnCount, legendWidth };
}
function calculateLegendSize(params) {
    if (!params.visible) {
        return { legendWidth: 0, legendHeight: 0, rowCount: 0, columnCount: 0 };
    }
    const { chart, verticalAlign, legendWidths } = params;
    const { legendWidth, isOverflow: widthOverflow } = calculateLegendWidth(params);
    const { legendHeight, isOverflow: heightOverflow } = calculateLegendHeight(params);
    const columnCount = verticalAlign ? legendWidths.length : 1;
    const rowCount = verticalAlign ? Math.ceil(legendWidth / chart.width) : legendWidths.length;
    if (widthOverflow) {
        return recalculateLegendWhenWidthOverflows(params, legendWidth / rowCount);
    }
    if (heightOverflow) {
        return recalculateLegendWhenHeightOverflows(params, legendHeight);
    }
    return { legendWidth, legendHeight, columnCount, rowCount };
}
function calculateLegendHeight(params) {
    const { verticalAlign, itemHeight, legendWidths } = params;
    const { height: chartHeight } = getDefaultLegendSize(params);
    let legendHeight;
    let isOverflow = false;
    if (verticalAlign) {
        legendHeight = chartHeight;
    }
    else {
        const totalHeight = legendWidths.length * itemHeight;
        isOverflow = chartHeight < totalHeight;
        legendHeight = isOverflow ? chartHeight : totalHeight;
    }
    return { legendHeight, isOverflow };
}
function getSpectrumLegendWidth(legendWidths, chartWidth, verticalAlign) {
    if (verticalAlign) {
        const labelAreaWidth = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.sum)(legendWidths);
        return Math.max(chartWidth / 4, labelAreaWidth);
    }
    const spectrumAreaWidth = (_brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_3__.spectrumLegendTooltip.PADDING + _brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_3__.spectrumLegendBar.PADDING + _layout__WEBPACK_IMPORTED_MODULE_2__.padding.X) * NUMBER_OF_BOTH_SIDES +
        _brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_3__.spectrumLegendTooltip.POINT_HEIGHT +
        _brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_3__.spectrumLegendBar.HEIGHT;
    return Math.max(...legendWidths) + spectrumAreaWidth;
}
function getSpectrumLegendHeight(itemHeight, chartHeight, verticalAlign) {
    return verticalAlign
        ? _brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_3__.SPECTRUM_LEGEND_LABEL_HEIGHT +
            _brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_3__.spectrumLegendBar.PADDING * NUMBER_OF_BOTH_SIDES +
            _brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_3__.spectrumLegendTooltip.POINT_HEIGHT +
            _brushes_spectrumLegend__WEBPACK_IMPORTED_MODULE_3__.spectrumLegendTooltip.HEIGHT +
            _layout__WEBPACK_IMPORTED_MODULE_2__.padding.Y
        : (chartHeight * 3) / 4;
}
function getNormalLegendWidth(params) {
    const { initialWidth, legendWidths, checkbox, verticalAlign } = params;
    let isOverflow = false;
    let legendWidth;
    if (verticalAlign) {
        const { width: chartWidth } = getDefaultLegendSize(params);
        const totalWidth = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.sum)(legendWidths) + _brushes_legend__WEBPACK_IMPORTED_MODULE_1__.LEGEND_ITEM_MARGIN_X * (legendWidths.length - 1);
        isOverflow = totalWidth > chartWidth;
        legendWidth = totalWidth;
    }
    else {
        const labelAreaWidth = Math.max(...legendWidths);
        legendWidth =
            (checkbox ? _brushes_legend__WEBPACK_IMPORTED_MODULE_1__.LEGEND_CHECKBOX_SIZE + _brushes_legend__WEBPACK_IMPORTED_MODULE_1__.LEGEND_MARGIN_X : 0) +
                _brushes_legend__WEBPACK_IMPORTED_MODULE_1__.LEGEND_ICON_SIZE +
                _brushes_legend__WEBPACK_IMPORTED_MODULE_1__.LEGEND_MARGIN_X +
                Math.max(labelAreaWidth, initialWidth);
    }
    return { legendWidth, isOverflow };
}
function calculateLegendWidth(params) {
    var _a, _b;
    const { options, visible } = params;
    const legendOptions = (_a = options) === null || _a === void 0 ? void 0 : _a.legend;
    if (!visible) {
        return { legendWidth: 0, isOverflow: false };
    }
    if ((_b = legendOptions) === null || _b === void 0 ? void 0 : _b.width) {
        return { legendWidth: legendOptions.width, isOverflow: false };
    }
    return getNormalLegendWidth(params);
}
function getDefaultLegendSize(params) {
    const { verticalAlign, chart, itemHeight, initialWidth, circleLegendVisible } = params;
    const restAreaHeight = COMPONENT_HEIGHT_EXCEPT_Y_AXIS + (circleLegendVisible ? INITIAL_CIRCLE_LEGEND_WIDTH : 0); // rest area temporary value (yAxisTitle.height + xAxis.height + circleLegend.height)
    return verticalAlign
        ? { width: chart.width - _layout__WEBPACK_IMPORTED_MODULE_2__.padding.X * NUMBER_OF_BOTH_SIDES, height: itemHeight }
        : {
            width: initialWidth,
            height: chart.height - restAreaHeight,
        };
}
function getNestedPieLegendLabelsInfo(series, legendInfo) {
    const result = [];
    const maxTextLengthWithEllipsis = getMaxTextLengthWithEllipsis(legendInfo);
    series.pie.forEach(({ data }) => {
        data.forEach(({ name, parentName, visible }) => {
            if (!parentName) {
                const { width, viewLabel } = getViewLabelInfo(legendInfo, name, maxTextLengthWithEllipsis);
                result.push({
                    label: name,
                    type: 'pie',
                    checked: (visible !== null && visible !== void 0 ? visible : true),
                    viewLabel,
                    width,
                });
            }
        });
    });
    return result;
}
function getMaxTextLengthWithEllipsis(legendInfo) {
    var _a, _b;
    const { legendOptions, font, checkboxVisible } = legendInfo;
    const width = (_b = (_a = legendOptions) === null || _a === void 0 ? void 0 : _a.item) === null || _b === void 0 ? void 0 : _b.width;
    if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(width)) {
        return;
    }
    const checkboxWidth = checkboxVisible ? _brushes_legend__WEBPACK_IMPORTED_MODULE_1__.LEGEND_CHECKBOX_SIZE + _brushes_legend__WEBPACK_IMPORTED_MODULE_1__.LEGEND_MARGIN_X : 0;
    const iconWidth = _brushes_legend__WEBPACK_IMPORTED_MODULE_1__.LEGEND_ICON_SIZE + _brushes_legend__WEBPACK_IMPORTED_MODULE_1__.LEGEND_MARGIN_X;
    const ellipsisDotWidth = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_4__.getTextWidth)(ELLIPSIS_DOT_TEXT, font);
    const widestTextWidth = (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_4__.getTextWidth)(WIDEST_TEXT, font);
    const maxTextCount = Math.floor((width - ellipsisDotWidth - checkboxWidth - iconWidth) / widestTextWidth);
    return maxTextCount > 0 ? maxTextCount : 0;
}
function getViewLabelInfo(legendInfo, label, maxTextLength) {
    var _a, _b;
    const { checkboxVisible, useSpectrumLegend, font, legendOptions } = legendInfo;
    let viewLabel = label;
    const itemWidth = (_b = (_a = legendOptions) === null || _a === void 0 ? void 0 : _a.item) === null || _b === void 0 ? void 0 : _b.width;
    const itemWidthWithFullText = getItemWidth(viewLabel, checkboxVisible, useSpectrumLegend, font);
    if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(itemWidth) && (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNumber)(maxTextLength) && itemWidth < itemWidthWithFullText) {
        viewLabel = `${label.slice(0, maxTextLength)}${ELLIPSIS_DOT_TEXT}`;
    }
    return { viewLabel, width: (itemWidth !== null && itemWidth !== void 0 ? itemWidth : itemWidthWithFullText) };
}
function getLegendLabelsInfo(series, legendInfo, categories) {
    const maxTextLengthWithEllipsis = getMaxTextLengthWithEllipsis(legendInfo);
    let colorIndex = 0;
    return Object.keys(series).flatMap((type) => {
        const labelInfo = series[type].map(({ name, colorValue, visible, colorByCategories }) => {
            const label = colorValue ? colorValue : name;
            const currentColorIndex = colorIndex;
            const { width, viewLabel } = getViewLabelInfo(legendInfo, label, maxTextLengthWithEllipsis);
            colorIndex += colorByCategories ? categories.length : 1;
            return {
                label,
                type,
                colorByCategories: !!colorByCategories,
                colorIndex: currentColorIndex,
                checked: (visible !== null && visible !== void 0 ? visible : true),
                viewLabel,
                width,
            };
        });
        colorIndex += series[type].length - 1;
        return labelInfo;
    });
}
function getItemWidth(label, checkboxVisible, useSpectrumLegend, font) {
    return ((useSpectrumLegend
        ? 0
        : (checkboxVisible ? _brushes_legend__WEBPACK_IMPORTED_MODULE_1__.LEGEND_CHECKBOX_SIZE + _brushes_legend__WEBPACK_IMPORTED_MODULE_1__.LEGEND_MARGIN_X : 0) +
            _brushes_legend__WEBPACK_IMPORTED_MODULE_1__.LEGEND_ICON_SIZE +
            _brushes_legend__WEBPACK_IMPORTED_MODULE_1__.LEGEND_MARGIN_X) + (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_4__.getTextWidth)(label, font));
}
function getLegendDataAppliedTheme(data, series) {
    const colors = Object.values(series).reduce((acc, cur) => (cur && cur.colors ? [...acc, ...cur.colors] : acc), []);
    const hasColorByCategories = data.some((legend) => legend.colorByCategories);
    return data.map((datum, idx) => {
        const { colorByCategories, colorIndex } = datum;
        const index = hasColorByCategories ? colorIndex || idx : idx;
        return Object.assign(Object.assign({}, datum), { color: colorByCategories ? '#aaa' : colors[index % colors.length] });
    });
}
function getLegendState(options, series, categories) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    const useSpectrumLegend = (_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b.useColorValue, (_c !== null && _c !== void 0 ? _c : !!series.heatmap));
    const useScatterChartIcon = !!((_d = series) === null || _d === void 0 ? void 0 : _d.scatter);
    const checkboxVisible = useSpectrumLegend
        ? false
        : (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_5__.showCheckbox)(options);
    const defaultTheme = (0,_helpers_theme__WEBPACK_IMPORTED_MODULE_6__.makeDefaultTheme)(series, (_g = (_f = (_e = options) === null || _e === void 0 ? void 0 : _e.theme) === null || _f === void 0 ? void 0 : _f.chart) === null || _g === void 0 ? void 0 : _g.fontFamily);
    const font = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_7__.getTitleFontString)((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.deepMergedCopy)(defaultTheme.legend.label, Object.assign({}, (_j = (_h = options.theme) === null || _h === void 0 ? void 0 : _h.legend) === null || _j === void 0 ? void 0 : _j.label)));
    const legendInfo = {
        checkboxVisible,
        font,
        useSpectrumLegend,
        legendOptions: options.legend,
    };
    const legendLabelsInfo = (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_8__.hasNestedPieSeries)(series)
        ? getNestedPieLegendLabelsInfo(series, legendInfo)
        : getLegendLabelsInfo(series, legendInfo, categories);
    const data = legendLabelsInfo.map(({ label, type, checked, width, viewLabel, colorByCategories, colorIndex }) => ({
        label,
        active: true,
        checked,
        width,
        iconType: (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_5__.getIconType)(type),
        chartType: type,
        rowIndex: 0,
        columnIndex: 0,
        viewLabel,
        colorByCategories,
        colorIndex,
    }));
    return {
        useSpectrumLegend,
        useScatterChartIcon,
        data,
    };
}
function getNextColumnRowIndex(params) {
    const { verticalAlign, columnCount, rowCount, legendCount } = params;
    let { rowIndex, columnIndex } = params;
    if (verticalAlign) {
        const maxLen = legendCount / rowCount;
        if (maxLen - 1 > columnIndex) {
            columnIndex += 1;
        }
        else {
            rowIndex += 1;
            columnIndex = 0;
        }
    }
    else {
        const maxLen = legendCount / columnCount;
        if (maxLen - 1 > rowIndex) {
            rowIndex += 1;
        }
        else {
            columnIndex += 1;
            rowIndex = 0;
        }
    }
    return [rowIndex, columnIndex];
}
function setIndexToLegendData(legendData, rowCount, columnCount, legendCount, verticalAlign) {
    let columnIndex = 0;
    let rowIndex = 0;
    legendData.forEach((datum) => {
        datum.rowIndex = rowIndex;
        datum.columnIndex = columnIndex;
        [rowIndex, columnIndex] = getNextColumnRowIndex({
            rowCount,
            columnCount,
            verticalAlign,
            legendCount,
            rowIndex,
            columnIndex,
        });
    });
}
const legend = {
    name: 'legend',
    state: ({ options, series, categories }) => {
        return {
            legend: getLegendState(options, series, categories),
            circleLegend: {},
        };
    },
    action: {
        initLegendState({ state, initStoreState }) {
            (0,_store__WEBPACK_IMPORTED_MODULE_9__.extend)(state.legend, getLegendState(initStoreState.options, initStoreState.series, initStoreState.categories));
        },
        setLegendLayout({ state }) {
            if (state.legend.useSpectrumLegend) {
                this.dispatch('setSpectrumLegendLayout');
            }
            else {
                this.dispatch('setNormalLegendLayout');
            }
        },
        setSpectrumLegendLayout({ state }) {
            const { legend: { data: legendData }, series, options, chart, theme, } = state;
            const align = (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_5__.getLegendAlign)(options);
            const visible = (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_5__.showLegend)(options, series);
            const verticalAlign = (0,_layout__WEBPACK_IMPORTED_MODULE_2__.isVerticalAlign)(align);
            const legendWidths = legendData.map(({ width }) => width);
            const itemHeight = (0,_brushes_legend__WEBPACK_IMPORTED_MODULE_1__.getLegendItemHeight)(theme.legend.label.fontSize);
            const width = getSpectrumLegendWidth(legendWidths, chart.width, verticalAlign);
            const height = getSpectrumLegendHeight(itemHeight, chart.height, verticalAlign);
            (0,_store__WEBPACK_IMPORTED_MODULE_9__.extend)(state.legend, { visible, align, width, height });
        },
        setNormalLegendLayout({ state, initStoreState }) {
            const { legend: { data: legendData }, series, options, chart, theme, } = state;
            const align = (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_5__.getLegendAlign)(options);
            const visible = (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_5__.showLegend)(options, series);
            const checkbox = (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_5__.showCheckbox)(options);
            const initialWidth = Math.min(chart.width / 5, INITIAL_LEGEND_WIDTH);
            const verticalAlign = (0,_layout__WEBPACK_IMPORTED_MODULE_2__.isVerticalAlign)(align);
            const isNestedPieChart = (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_8__.hasNestedPieSeries)(initStoreState.series);
            const isScatterChart = !!series.scatter;
            const isBubbleChart = !!series.bubble;
            const circleLegendVisible = isBubbleChart
                ? (0,_helpers_legend__WEBPACK_IMPORTED_MODULE_5__.showCircleLegend)(options)
                : false;
            const legendWidths = legendData.map(({ width }) => width);
            const itemHeight = (0,_brushes_legend__WEBPACK_IMPORTED_MODULE_1__.getLegendItemHeight)(theme.legend.label.fontSize);
            const { legendWidth, legendHeight, rowCount, columnCount } = calculateLegendSize({
                initialWidth,
                legendWidths,
                options,
                verticalAlign,
                visible,
                checkbox,
                chart,
                itemHeight,
                circleLegendVisible,
            });
            setIndexToLegendData(legendData, rowCount, columnCount, legendWidths.length, verticalAlign);
            (0,_store__WEBPACK_IMPORTED_MODULE_9__.extend)(state.legend, {
                visible,
                align,
                showCheckbox: checkbox,
                width: legendWidth,
                height: legendHeight,
            });
            if (isBubbleChart && circleLegendVisible) {
                this.dispatch('updateCircleLegendLayout', { legendWidth });
            }
            if (!isNestedPieChart && !(0,_helpers_validation__WEBPACK_IMPORTED_MODULE_10__.isNoData)(series)) {
                this.dispatch('updateLegendColor');
            }
            if (isScatterChart) {
                this.dispatch('updateLegendIcon');
            }
        },
        updateCircleLegendLayout({ state }, { legendWidth }) {
            const width = legendWidth === 0
                ? INITIAL_CIRCLE_LEGEND_WIDTH
                : Math.min(legendWidth, INITIAL_CIRCLE_LEGEND_WIDTH);
            const radius = Math.max((width - _brushes_legend__WEBPACK_IMPORTED_MODULE_1__.LEGEND_MARGIN_X) / 2, 0);
            (0,_store__WEBPACK_IMPORTED_MODULE_9__.extend)(state.circleLegend, { visible: true, width, radius });
        },
        setLegendActiveState({ state }, { name, active }) {
            const { data } = state.legend;
            const model = data.find(({ label }) => label === name);
            model.active = active;
            this.notify(state, 'legend');
        },
        setAllLegendActiveState({ state }, active) {
            state.legend.data.forEach((datum) => {
                datum.active = active;
            });
            this.notify(state, 'legend');
        },
        setLegendCheckedState({ state }, { name, checked }) {
            const model = state.legend.data.find(({ label }) => label === name);
            model.checked = checked;
            this.notify(state, 'legend');
        },
        updateLegendColor({ state }) {
            const { legend: legendData, series } = state;
            const data = getLegendDataAppliedTheme(legendData.data, series);
            (0,_store__WEBPACK_IMPORTED_MODULE_9__.extend)(state.legend, { data });
        },
        updateLegendIcon({ state }) {
            const { legend: legendData, series } = state;
            const data = legendData.data.reduce((acc, cur) => {
                var _a;
                if (cur.chartType === 'scatter' && ((_a = series.scatter) === null || _a === void 0 ? void 0 : _a.data)) {
                    const model = series.scatter.data.find(({ name }) => name === cur.label);
                    const iconType = model ? model.iconType : cur.iconType;
                    return [...acc, Object.assign(Object.assign({}, cur), { iconType })];
                }
                return [...acc, cur];
            }, []);
            (0,_store__WEBPACK_IMPORTED_MODULE_9__.extend)(state.legend, { data });
        },
        updateNestedPieChartLegend({ state }) {
            const { legend: legendData, nestedPieSeries } = state;
            (0,_store__WEBPACK_IMPORTED_MODULE_9__.extend)(state.legend, {
                data: getLegendDataAppliedTheme(legendData.data, nestedPieSeries),
            });
        },
    },
    observe: {
        updateLegendLayout() {
            this.dispatch('setLegendLayout');
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (legend);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/nestedPieSeriesData.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/nestedPieSeriesData.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function findRootName(rawSeries, seriesIndex, parentName) {
    var _a, _b;
    const item = (_a = rawSeries.pie) === null || _a === void 0 ? void 0 : _a[seriesIndex].data.find(({ name }) => name === parentName);
    return ((_b = item) === null || _b === void 0 ? void 0 : _b.parentName) ? findRootName(rawSeries, seriesIndex - 1, item.parentName) : parentName;
}
const nestedPieSeriesData = {
    name: 'seriesData',
    state: () => ({
        nestedPieSeries: {},
    }),
    action: {
        setNestedPieSeriesData({ state, initStoreState }) {
            const { theme, disabledSeries } = state;
            const rawSeries = initStoreState.series;
            const newSeriesData = {};
            const colorMap = {};
            rawSeries.pie.forEach(({ name: alias, data }, seriesIndex) => {
                const { colors } = theme.series.pie[alias];
                const colorList = [];
                const originSeriesData = data.map((m, index) => {
                    var _a;
                    const { parentName, name: dataName } = m;
                    const color = parentName && seriesIndex ? colorMap[parentName] : (_a = colors) === null || _a === void 0 ? void 0 : _a[index];
                    colorList.push(color);
                    colorMap[dataName] = color;
                    const rootParentName = parentName && seriesIndex
                        ? findRootName(rawSeries, seriesIndex - 1, parentName)
                        : dataName;
                    return Object.assign(Object.assign({}, m), { data: m.data, rootParentName,
                        color });
                });
                newSeriesData[alias] = {
                    data: originSeriesData.filter(({ rootParentName }) => {
                        return !disabledSeries.includes(rootParentName);
                    }),
                    colors: colorList,
                };
            });
            state.nestedPieSeries = newSeriesData;
            this.dispatch('updateNestedPieChartLegend');
        },
    },
    observe: {
        updateNestedPieSeriesData() {
            this.dispatch('setNestedPieSeriesData');
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (nestedPieSeriesData);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/options.js":
/*!****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/options.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");

function getOptionsBySize(size, options) {
    var _a;
    const rules = (_a = options.responsive) === null || _a === void 0 ? void 0 : _a.rules;
    return Array.isArray(rules)
        ? rules.reduce((acc, cur) => {
            return cur.condition(size) ? (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.deepMergedCopy)(acc, cur.options) : acc;
        }, options)
        : options;
}
function getSize(usingContainerSize, containerSize, chartSize) {
    var _a, _b;
    const { width: usingContainerWidth, height: usingContainerHeight } = usingContainerSize;
    return {
        width: usingContainerWidth ? containerSize.width : (_a = chartSize) === null || _a === void 0 ? void 0 : _a.width,
        height: usingContainerHeight ? containerSize.height : (_b = chartSize) === null || _b === void 0 ? void 0 : _b.height,
    };
}
const optionsData = {
    name: 'options',
    state: ({ options }) => ({
        originalOptions: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.deepCopy)(options),
        options,
    }),
    action: {
        setOptions({ state }) {
            const { width, height } = state.chart;
            if (width < 0 || height < 0) {
                return;
            }
            state.options = getOptionsBySize({ width, height }, state.originalOptions);
        },
        initOptions({ initStoreState, state }, { options, containerSize }) {
            initStoreState.options = options;
            state.originalOptions = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.deepCopy)(options);
            const { usingContainerSize, originalOptions } = state;
            const size = getSize(usingContainerSize, containerSize, {
                width: originalOptions.chart.width,
                height: originalOptions.chart.height,
            });
            this.dispatch('setChartSize', size);
        },
        updateOptions({ state, initStoreState }, { options, containerSize }) {
            var _a, _b;
            initStoreState.options = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.deepMergedCopy)(initStoreState.options, options);
            state.originalOptions = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.deepMergedCopy)(state.originalOptions, options);
            const { usingContainerSize, originalOptions } = state;
            const size = getSize(usingContainerSize, containerSize, {
                width: (_a = originalOptions.chart) === null || _a === void 0 ? void 0 : _a.width,
                height: (_b = originalOptions.chart) === null || _b === void 0 ? void 0 : _b.height,
            });
            this.dispatch('setChartSize', size);
            this.dispatch('initThemeState');
        },
    },
    observe: {
        updateOptions() {
            this.dispatch('setOptions');
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (optionsData);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/plot.js":
/*!*************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/plot.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./store */ "./node_modules/@toast-ui/chart/dist/esm/store/store.js");
/* harmony import */ var _helpers_color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/color */ "./node_modules/@toast-ui/chart/dist/esm/helpers/color.js");
/* harmony import */ var _helpers_range__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/range */ "./node_modules/@toast-ui/chart/dist/esm/helpers/range.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_plot__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/plot */ "./node_modules/@toast-ui/chart/dist/esm/helpers/plot.js");





function getOverlappingRange(ranges) {
    const overlappingRanges = ranges.reduce((acc, { range }) => {
        const [accStart, accEnd] = acc;
        const [start, end] = range;
        return [Math.min(accStart, start), Math.max(accEnd, end)];
    }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);
    return {
        range: overlappingRanges,
        color: ranges[0].color,
    };
}
function getCategoryIndex(value, categories) {
    return categories.findIndex((category) => category === String(value));
}
function getValidValue(value, categories, isDateType = false) {
    if (isDateType) {
        return Number(new Date(value));
    }
    if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isString)(value)) {
        return getCategoryIndex(value, categories);
    }
    return value;
}
function makePlotLines(categories, isDateType, plotLines = []) {
    return plotLines.map(({ value, color, opacity }) => ({
        value: getValidValue(value, categories, isDateType),
        color: (0,_helpers_color__WEBPACK_IMPORTED_MODULE_1__.rgba)(color, opacity),
    }));
}
function makePlotBands(categories, isDateType, plotBands = []) {
    return plotBands.flatMap(({ range, mergeOverlappingRanges = false, color: bgColor, opacity }) => {
        const color = (0,_helpers_color__WEBPACK_IMPORTED_MODULE_1__.rgba)(bgColor, opacity);
        const rangeArray = ((0,_helpers_range__WEBPACK_IMPORTED_MODULE_2__.isRangeValue)(range[0]) ? range : [range]);
        const ranges = rangeArray.map((rangeData) => ({
            range: rangeData.map((value) => getValidValue(value, categories, isDateType)),
            color,
        }));
        return mergeOverlappingRanges ? getOverlappingRange(ranges) : ranges;
    });
}
const plot = {
    name: 'plot',
    state: ({ options }) => {
        var _a, _b, _c;
        return ({
            plot: {
                visible: (_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.plot) === null || _b === void 0 ? void 0 : _b.visible, (_c !== null && _c !== void 0 ? _c : true)),
                lines: [],
                bands: [],
            },
        });
    },
    action: {
        setPlot({ state }) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            const { series, options } = state;
            if (!(series.area || series.line)) {
                return;
            }
            const rawCategories = state.rawCategories;
            const lineAreaOptions = options;
            const lines = makePlotLines(rawCategories, !!((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.xAxis) === null || _b === void 0 ? void 0 : _b.date), (_d = (_c = lineAreaOptions) === null || _c === void 0 ? void 0 : _c.plot) === null || _d === void 0 ? void 0 : _d.lines);
            const bands = makePlotBands(rawCategories, !!((_f = (_e = options) === null || _e === void 0 ? void 0 : _e.xAxis) === null || _f === void 0 ? void 0 : _f.date), (_h = (_g = lineAreaOptions) === null || _g === void 0 ? void 0 : _g.plot) === null || _h === void 0 ? void 0 : _h.bands);
            (0,_store__WEBPACK_IMPORTED_MODULE_3__.extend)(state.plot, { lines, bands });
        },
        addPlotLine({ state }, { data }) {
            var _a, _b, _c;
            const lines = (_c = (_b = (_a = state.options) === null || _a === void 0 ? void 0 : _a.plot) === null || _b === void 0 ? void 0 : _b.lines, (_c !== null && _c !== void 0 ? _c : []));
            if (!(0,_helpers_plot__WEBPACK_IMPORTED_MODULE_4__.isExistPlotId)(lines, data)) {
                this.dispatch('updateOptions', { options: { plot: { lines: [...lines, data] } } });
            }
        },
        addPlotBand({ state }, { data }) {
            var _a, _b, _c;
            const bands = (_c = (_b = (_a = state.options) === null || _a === void 0 ? void 0 : _a.plot) === null || _b === void 0 ? void 0 : _b.bands, (_c !== null && _c !== void 0 ? _c : []));
            if (!(0,_helpers_plot__WEBPACK_IMPORTED_MODULE_4__.isExistPlotId)(bands, data)) {
                this.dispatch('updateOptions', { options: { plot: { bands: [...bands, data] } } });
            }
        },
        removePlotLine({ state }, { id }) {
            var _a, _b, _c;
            const lines = (_c = (_b = (_a = state.options) === null || _a === void 0 ? void 0 : _a.plot) === null || _b === void 0 ? void 0 : _b.lines, (_c !== null && _c !== void 0 ? _c : [])).filter(({ id: lineId }) => lineId !== id);
            this.dispatch('updateOptions', { options: { plot: { lines } } });
        },
        removePlotBand({ state }, { id }) {
            var _a, _b, _c;
            const bands = (_c = (_b = (_a = state.options) === null || _a === void 0 ? void 0 : _a.plot) === null || _b === void 0 ? void 0 : _b.bands, (_c !== null && _c !== void 0 ? _c : [])).filter(({ id: bandId }) => bandId !== id);
            this.dispatch('updateOptions', { options: { plot: { bands } } });
        },
    },
    observe: {
        updatePlot() {
            this.dispatch('setPlot');
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (plot);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/radialAxes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/radialAxes.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RADIAL_LABEL_PADDING": () => (/* binding */ RADIAL_LABEL_PADDING),
/* harmony export */   "RadialAxisType": () => (/* binding */ RadialAxisType),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _helpers_calculator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/calculator */ "./node_modules/@toast-ui/chart/dist/esm/helpers/calculator.js");
/* harmony import */ var _helpers_style__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/style */ "./node_modules/@toast-ui/chart/dist/esm/helpers/style.js");
/* harmony import */ var _helpers_sector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/sector */ "./node_modules/@toast-ui/chart/dist/esm/helpers/sector.js");




const Y_LABEL_PADDING = 5;
const RADIAL_LABEL_PADDING = 25;
var RadialAxisType;
(function (RadialAxisType) {
    RadialAxisType["CIRCULAR"] = "circularAxis";
    RadialAxisType["VERTICAL"] = "verticalAxis";
})(RadialAxisType || (RadialAxisType = {}));
function getYAxisLabelAlign(clockwise = true, isLabelOnVerticalAxis = false) {
    let align = 'center';
    if (isLabelOnVerticalAxis) {
        align = clockwise ? 'right' : 'left';
    }
    return align;
}
function getVerticalAxisData({ labels, pointOnColumn, intervalData, isLabelOnVerticalAxis, verticalAxisLabelMargin, verticalAxisLabelFont, defaultAxisData, radiusData, }) {
    const { clockwise, axisSize, centerX, centerY, startAngle, endAngle } = defaultAxisData;
    const { radiusRanges, innerRadius, outerRadius } = radiusData;
    const { labelInterval } = intervalData;
    /*
    return {
      labels,
      tickDistance: (outerRadius - innerRadius) / labels.length,
      ...pick(defaultAxisData, 'axisSize', 'centerX', 'centerY', 'startAngle', 'endAngle'),
      pointOnColumn,
      radiusRanges,
      innerRadius,
      outerRadius,
      labelInterval,
      labelMargin: verticalAxisLabelMargin,
      labelAlign: getYAxisLabelAlign(clockwise, isLabelOnVerticalAxis),
      ...getMaxLabelSize(labels, verticalAxisLabelMargin, verticalAxisLabelFont),
    };
    */
    const { maxLabelWidth, maxLabelHeight } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_0__.getMaxLabelSize)(labels, verticalAxisLabelMargin, verticalAxisLabelFont);
    return {
        axisSize,
        centerX,
        centerY,
        label: {
            labels,
            interval: labelInterval,
            margin: verticalAxisLabelMargin,
            maxWidth: maxLabelWidth,
            maxHeight: maxLabelHeight,
            align: getYAxisLabelAlign(clockwise, isLabelOnVerticalAxis),
        },
        radius: {
            inner: innerRadius,
            outer: outerRadius,
            ranges: radiusRanges,
        },
        angle: {
            start: startAngle,
            end: endAngle,
        },
        tickDistance: (outerRadius - innerRadius) / labels.length,
        pointOnColumn,
    };
}
function getCircularAxisData({ labels, intervalData, circularAxisLabelMargin, circularAxisLabelFont, defaultAxisData, radiusData, }) {
    const { maxLabelWidth, maxLabelHeight } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_0__.getMaxLabelSize)(labels, circularAxisLabelMargin, circularAxisLabelFont);
    const { totalAngle, clockwise, axisSize, centerX, centerY, startAngle, endAngle, drawingStartAngle, } = defaultAxisData;
    const { tickInterval, labelInterval } = intervalData;
    const { innerRadius, outerRadius } = radiusData;
    const centralAngle = totalAngle / (labels.length + (totalAngle < _helpers_sector__WEBPACK_IMPORTED_MODULE_1__.DEGREE_360 ? -1 : _helpers_sector__WEBPACK_IMPORTED_MODULE_1__.DEGREE_0));
    /*
    return {
      labels,
      ...defaultAxisData,
      centralAngle,
      tickInterval,
      labelInterval,
      labelMargin: circularAxisLabelMargin,
      maxLabelWidth,
      maxLabelHeight,
      innerRadius,
      outerRadius,
    };
    */
    return {
        axisSize,
        centerX,
        centerY,
        label: {
            labels,
            interval: labelInterval,
            margin: circularAxisLabelMargin,
            maxWidth: maxLabelWidth,
            maxHeight: maxLabelHeight,
        },
        radius: {
            inner: innerRadius,
            outer: outerRadius,
        },
        angle: {
            start: startAngle,
            end: endAngle,
            total: totalAngle,
            central: centralAngle,
            drawingStart: drawingStartAngle,
        },
        tickInterval,
        clockwise,
    };
}
function makeLabels(options, rawLabels, axisName) {
    var _a, _b, _c;
    const formatter = (_c = (_b = (_a = options[axisName]) === null || _a === void 0 ? void 0 : _a.label) === null || _b === void 0 ? void 0 : _b.formatter, (_c !== null && _c !== void 0 ? _c : ((value) => value)));
    return rawLabels.map((label, index) => formatter(label, { index, labels: rawLabels, axisName }));
}
function getAxisLabels(isLabelOnVerticalAxis, options, categories, scale) {
    const valueAxisName = isLabelOnVerticalAxis
        ? RadialAxisType.CIRCULAR
        : RadialAxisType.VERTICAL;
    const { limit, stepSize } = scale[valueAxisName];
    const valueLabels = makeLabels(options, (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_2__.makeLabelsFromLimit)(limit, stepSize), valueAxisName);
    const categoryLabels = makeLabels(options, categories, isLabelOnVerticalAxis ? RadialAxisType.VERTICAL : RadialAxisType.CIRCULAR);
    return {
        radialAxisLabels: isLabelOnVerticalAxis ? valueLabels : categoryLabels,
        yAxisLabels: isLabelOnVerticalAxis ? categoryLabels : valueLabels,
    };
}
function getAxisLabelMargin(isLabelOnVerticalAxis, options) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    return {
        verticalAxisLabelMargin: (_d = (_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.verticalAxis) === null || _b === void 0 ? void 0 : _b.label) === null || _c === void 0 ? void 0 : _c.margin, (_d !== null && _d !== void 0 ? _d : (isLabelOnVerticalAxis ? Y_LABEL_PADDING : 0))),
        circularAxisLabelMargin: (_h = (_g = (_f = (_e = options) === null || _e === void 0 ? void 0 : _e.circularAxis) === null || _f === void 0 ? void 0 : _f.label) === null || _g === void 0 ? void 0 : _g.margin, (_h !== null && _h !== void 0 ? _h : RADIAL_LABEL_PADDING)),
    };
}
const axes = {
    name: 'radialAxes',
    state: () => ({
        radialAxes: {},
    }),
    action: {
        setRadialAxesData({ state }) {
            var _a, _b;
            const { series, layout, scale } = state;
            const categories = state.categories;
            const { plot } = layout;
            const isLabelOnVerticalAxis = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_0__.isLabelAxisOnYAxis)({ series, categories });
            const options = state.options;
            const theme = state.theme;
            const circularAxisLabelFont = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_3__.getTitleFontString)(theme.circularAxis.label);
            const verticalAxisLabelFont = (0,_helpers_style__WEBPACK_IMPORTED_MODULE_3__.getTitleFontString)(theme.verticalAxis.label);
            const { verticalAxisLabelMargin, circularAxisLabelMargin } = getAxisLabelMargin(isLabelOnVerticalAxis, options);
            const { radialAxisLabels, yAxisLabels } = getAxisLabels(isLabelOnVerticalAxis, options, categories, scale);
            const { maxLabelWidth, maxLabelHeight } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_0__.getMaxLabelSize)(radialAxisLabels, circularAxisLabelMargin, circularAxisLabelFont);
            const defaultAxisData = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_0__.getDefaultRadialAxisData)(options, plot, maxLabelWidth, maxLabelHeight + circularAxisLabelMargin, isLabelOnVerticalAxis);
            const { axisSize } = defaultAxisData;
            const radiusData = isLabelOnVerticalAxis
                ? (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_0__.getRadiusInfo)(axisSize, (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b.radiusRange, yAxisLabels.length + 1)
                : {
                    radiusRanges: (0,_helpers_calculator__WEBPACK_IMPORTED_MODULE_2__.makeTickPixelPositions)(axisSize, yAxisLabels.length),
                    innerRadius: 0,
                    outerRadius: axisSize,
                };
            const verticalAxisData = getVerticalAxisData({
                labels: yAxisLabels,
                pointOnColumn: isLabelOnVerticalAxis,
                isLabelOnVerticalAxis,
                intervalData: (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_0__.getInitAxisIntervalData)(isLabelOnVerticalAxis, {
                    axis: options.verticalAxis,
                    categories,
                    layout,
                }),
                verticalAxisLabelMargin,
                verticalAxisLabelFont,
                defaultAxisData,
                radiusData,
            });
            state.radialAxes = {
                circularAxis: getCircularAxisData({
                    labels: radialAxisLabels,
                    intervalData: (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_0__.getInitAxisIntervalData)(true, {
                        axis: options.circularAxis,
                        categories,
                        layout,
                    }),
                    defaultAxisData,
                    circularAxisLabelMargin,
                    circularAxisLabelFont,
                    radiusData,
                }),
                verticalAxis: verticalAxisData,
            };
        },
    },
    observe: {
        updateRadialAxes() {
            this.dispatch('setRadialAxesData');
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (axes);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/reactive.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/reactive.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "observe": () => (/* binding */ observe),
/* harmony export */   "isObservable": () => (/* binding */ isObservable),
/* harmony export */   "observable": () => (/* binding */ observable),
/* harmony export */   "setValue": () => (/* binding */ setValue),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "notify": () => (/* binding */ notify),
/* harmony export */   "invisibleWork": () => (/* binding */ invisibleWork),
/* harmony export */   "notifyByPath": () => (/* binding */ notifyByPath),
/* harmony export */   "computed": () => (/* binding */ computed),
/* harmony export */   "watch": () => (/* binding */ watch),
/* harmony export */   "makeObservableObjectToNormal": () => (/* binding */ makeObservableObjectToNormal)
/* harmony export */ });
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");


let currentCollectorObserver = null;
let currentRunningObserver = null;
const observerCallCue = [];
let doingInvisibleWork = false;
function observe(fn) {
    const observer = () => {
        if (currentRunningObserver === observer) {
            return;
        }
        // If there is observer running or doing invisible work
        if (doingInvisibleWork || !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNull)(currentRunningObserver)) {
            if (observerCallCue.includes(observer)) {
                observerCallCue.splice(observerCallCue.indexOf(observer), 1);
            }
            // We use observer call cue because avoid nested observer call.
            observerCallCue.push(observer);
            // or If there are no observers running. Run the observer and run the next observer in the call queue.
        }
        else if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNull)(currentRunningObserver)) {
            currentRunningObserver = observer;
            fn();
            currentRunningObserver = null;
            digestObserverCallCue();
        }
    };
    observer.deps = [];
    // first observer excution for collect dependencies
    currentCollectorObserver = observer;
    currentCollectorObserver();
    currentCollectorObserver = null;
    return () => {
        observer.deps.forEach((dep) => {
            const index = dep.findIndex((ob) => ob === observer);
            dep.splice(index, 1);
        });
        observer.deps = [];
    };
}
function digestObserverCallCue() {
    if (observerCallCue.length) {
        const nextObserver = observerCallCue.shift();
        if (nextObserver) {
            nextObserver();
        }
    }
}
function isObservable(target) {
    return typeof target === 'object' && target.__toastUIChartOb__;
}
function observable(target, source = target) {
    if (isObservable(source)) {
        throw new Error(_message__WEBPACK_IMPORTED_MODULE_1__.message.ALREADY_OBSERVABLE_ERROR);
    }
    if (!isObservable(target)) {
        Object.defineProperty(target, '__toastUIChartOb__', {
            enumerable: false,
        });
    }
    for (const key in source) {
        if (!source.hasOwnProperty(key)) {
            continue;
        }
        const obs = [];
        let value = source[key];
        const descriptor = Object.getOwnPropertyDescriptor(source, key);
        const preGetter = descriptor && descriptor.get;
        const preSetter = descriptor && descriptor.set;
        /* eslint-disable no-loop-func */
        Object.defineProperty(target, key, {
            configurable: true,
            enumerable: true,
            get: function () {
                // It's some kind a trick to get observable information from closure using getter for notify()
                if (currentCollectorObserver === observableInfo) {
                    return { target, key, value, obs };
                }
                if (!doingInvisibleWork &&
                    currentCollectorObserver &&
                    !obs.includes(currentCollectorObserver)) {
                    // if there is collector observer in running, collect current data as dependency
                    obs.push(currentCollectorObserver);
                    currentCollectorObserver.deps.push(obs);
                }
                return value;
            },
            set: function (v) {
                const prevValue = value;
                if (preSetter) {
                    preSetter.call(target, v);
                    value = preGetter ? preGetter.call(target) : target[key];
                }
                else {
                    value = v;
                }
                if (prevValue !== value) {
                    // Run observers
                    invokeObs(obs);
                }
            },
        });
        if (typeof target[key] === 'object' && !Array.isArray(target[key])) {
            observable(target[key]);
        }
        /* eslint-enable no-loop-func */
    }
    return target;
}
function setValue(target, key, source) {
    return observable(target, {
        [key]: source,
    });
}
function extend(target, source) {
    if (isObservable(source)) {
        throw new Error(_message__WEBPACK_IMPORTED_MODULE_1__.message.ALREADY_OBSERVABLE_ERROR);
    }
    return observable(target, source);
}
function notify(target, key) {
    const obInfo = observableInfo(target, key);
    if (obInfo) {
        invokeObs(obInfo.obs);
    }
}
function invisibleWork(fn) {
    doingInvisibleWork = true;
    fn();
    doingInvisibleWork = false;
    digestObserverCallCue();
}
function notifyByPath(holder, namePath) {
    const splited = namePath.split('.');
    const key = splited.splice(splited.length - 1, 1)[0];
    const target = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.pickProperty)(holder, splited);
    if (target) {
        notify(target, key);
    }
}
function invokeObs(obs) {
    obs.forEach((ob) => ob());
}
function observableInfo(target, key) {
    currentCollectorObserver = observableInfo;
    const obInfo = target[key];
    currentCollectorObserver = null;
    if (typeof obInfo === 'object' &&
        obInfo.hasOwnProperty('target') &&
        obInfo.hasOwnProperty('obs')) {
        return obInfo;
    }
    return null;
}
function computed(target, key, fn) {
    let cachedValue;
    const computedBox = {};
    Object.defineProperty(computedBox, key, {
        configurable: true,
        enumerable: true,
        get: () => cachedValue,
    });
    extend(target, computedBox);
    observe(() => {
        const prevValue = cachedValue;
        cachedValue = fn();
        if (prevValue !== cachedValue) {
            target[key] = cachedValue;
        }
    });
}
function watch(holder, path, fn) {
    const splited = path.split('.');
    const key = splited.splice(splited.length - 1, 1)[0];
    const target = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.pickProperty)(holder, splited);
    if (!target) {
        return null;
    }
    const obInfo = observableInfo(target, key);
    if (!obInfo) {
        return null;
    }
    const watcher = () => {
        fn(target[key]);
    };
    obInfo.obs.push(watcher);
    return () => {
        const index = obInfo.obs.findIndex((ob) => ob === watcher);
        if (index > -1) {
            obInfo.obs.splice(index, 1);
        }
    };
}
function makeObservableObjectToNormal(obj) {
    return JSON.parse(JSON.stringify(obj));
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/root.js":
/*!*************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/root.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");

function initialSize(containerEl, { width, height }) {
    return {
        width: width === 0 ? containerEl.offsetWidth : width,
        height: height === 0 ? containerEl.offsetHeight : height,
    };
}
const root = {
    name: 'root',
    state: ({ options }) => {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        return ({
            chart: Object.assign(Object.assign({}, options.chart), { width: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.getInitialSize)((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.chart) === null || _b === void 0 ? void 0 : _b.width), height: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.getInitialSize)((_d = (_c = options) === null || _c === void 0 ? void 0 : _c.chart) === null || _d === void 0 ? void 0 : _d.height) }),
            usingContainerSize: {
                width: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isAutoValue)((_f = (_e = options) === null || _e === void 0 ? void 0 : _e.chart) === null || _f === void 0 ? void 0 : _f.width),
                height: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isAutoValue)((_h = (_g = options) === null || _g === void 0 ? void 0 : _g.chart) === null || _h === void 0 ? void 0 : _h.height),
            },
            container: {},
        });
    },
    action: {
        setChartSize({ state }, size) {
            state.chart.width = size.width;
            state.chart.height = size.height;
            this.notify(state, 'chart');
        },
        initChartSize({ state }, containerEl) {
            const { width, height } = state.chart;
            if (width === 0 || height === 0) {
                if (containerEl.parentNode) {
                    this.dispatch('setChartSize', initialSize(containerEl, { width, height }));
                }
                else {
                    setTimeout(() => {
                        this.dispatch('setChartSize', initialSize(containerEl, { width, height }));
                    }, 0);
                }
            }
        },
        setUsingContainerSize({ state }, { width, height }) {
            state.usingContainerSize.width = width;
            state.usingContainerSize.height = height;
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (root);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/scale.js":
/*!**************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/scale.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_axes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/axes */ "./node_modules/@toast-ui/chart/dist/esm/helpers/axes.js");
/* harmony import */ var _scale_coordinateScaleCalculator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../scale/coordinateScaleCalculator */ "./node_modules/@toast-ui/chart/dist/esm/scale/coordinateScaleCalculator.js");
/* harmony import */ var _scale_datetimeScaleCalculator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scale/datetimeScaleCalculator */ "./node_modules/@toast-ui/chart/dist/esm/scale/datetimeScaleCalculator.js");
/* harmony import */ var _helpers_coordinate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/coordinate */ "./node_modules/@toast-ui/chart/dist/esm/helpers/coordinate.js");
/* harmony import */ var _stackSeriesData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stackSeriesData */ "./node_modules/@toast-ui/chart/dist/esm/store/stackSeriesData.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");






const MIN_OFFSET_SIZE = 1;
function getLabelScaleData(state, labelAxisOnYAxis, scaleOptions, labelAxisName) {
    var _a, _b;
    const { dataRange, layout, series, options } = state;
    const categories = state.categories;
    const rawCategories = state.rawCategories;
    const { labelSizeKey } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_0__.getSizeKey)(labelAxisOnYAxis);
    const dateTypeLabel = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isExist)((_a = options.xAxis) === null || _a === void 0 ? void 0 : _a.date);
    const labelOptions = {
        dataRange: dataRange[labelAxisName],
        offsetSize: Math.max(layout.plot[labelSizeKey], MIN_OFFSET_SIZE),
        scaleOption: scaleOptions[labelAxisName],
        rawCategoriesSize: rawCategories.length,
    };
    let result;
    if (dataRange[labelAxisName]) {
        result = dateTypeLabel
            ? (0,_scale_datetimeScaleCalculator__WEBPACK_IMPORTED_MODULE_2__.calculateDatetimeScale)(labelOptions)
            : (0,_scale_coordinateScaleCalculator__WEBPACK_IMPORTED_MODULE_3__.calculateCoordinateScale)(labelOptions);
    }
    if (series.line && categories && !((_b = options.xAxis) === null || _b === void 0 ? void 0 : _b.pointOnColumn)) {
        result = (0,_scale_coordinateScaleCalculator__WEBPACK_IMPORTED_MODULE_3__.calculateXAxisScaleForCoordinateLineType)(result, options, categories);
    }
    return result;
}
function getValueScaleData(state, labelAxisOnYAxis, scaleOptions, valueAxisName, isCoordinateTypeChart) {
    const { dataRange, layout, series, stackSeries } = state;
    const { valueSizeKey } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_0__.getSizeKey)(labelAxisOnYAxis);
    let result;
    if ((0,_stackSeriesData__WEBPACK_IMPORTED_MODULE_4__.hasPercentStackSeries)(stackSeries)) {
        Object.keys(series).forEach((seriesName) => {
            result = (0,_scale_coordinateScaleCalculator__WEBPACK_IMPORTED_MODULE_3__.getStackScaleData)(stackSeries[seriesName].scaleType);
        });
    }
    else if (isCoordinateTypeChart) {
        const valueOptions = {
            dataRange: dataRange[valueAxisName],
            offsetSize: Math.max(layout.plot[valueSizeKey], MIN_OFFSET_SIZE),
            scaleOption: scaleOptions[valueAxisName],
        };
        result = (0,_scale_coordinateScaleCalculator__WEBPACK_IMPORTED_MODULE_3__.calculateCoordinateScale)(valueOptions);
    }
    else {
        result = (0,_scale_coordinateScaleCalculator__WEBPACK_IMPORTED_MODULE_3__.calculateCoordinateScale)({
            dataRange: dataRange[valueAxisName],
            offsetSize: Math.max(layout.plot[valueSizeKey], MIN_OFFSET_SIZE),
            scaleOption: scaleOptions[valueAxisName],
        });
    }
    return result;
}
function getScaleOptions(options, series, valueAxisName) {
    var _a, _b, _c, _d, _e, _f;
    const scaleOptions = {};
    if ((0,_helpers_axes__WEBPACK_IMPORTED_MODULE_0__.isSeriesUsingRadialAxes)(series)) {
        scaleOptions[valueAxisName] = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a[valueAxisName]) === null || _b === void 0 ? void 0 : _b.scale;
    }
    else {
        const { yAxis, secondaryYAxis } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_0__.getYAxisOption)(options);
        scaleOptions.xAxis = (_d = (_c = options) === null || _c === void 0 ? void 0 : _c.xAxis) === null || _d === void 0 ? void 0 : _d.scale;
        scaleOptions.yAxis = (_e = yAxis) === null || _e === void 0 ? void 0 : _e.scale;
        if (secondaryYAxis) {
            scaleOptions.secondaryYAxis = (_f = secondaryYAxis) === null || _f === void 0 ? void 0 : _f.scale;
        }
    }
    return scaleOptions;
}
const scale = {
    name: 'scale',
    state: () => ({
        scale: {},
    }),
    action: {
        setScale({ state, initStoreState }) {
            const { series, options, categories } = state;
            const labelAxisOnYAxis = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_0__.isLabelAxisOnYAxis)({ series, options, categories });
            const { labelAxisName, valueAxisName } = (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_0__.getAxisName)(labelAxisOnYAxis, series);
            const scaleOptions = getScaleOptions(options, series, valueAxisName);
            const isCoordinateTypeChart = (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_5__.isCoordinateSeries)(initStoreState.series);
            const scaleData = {};
            (0,_helpers_axes__WEBPACK_IMPORTED_MODULE_0__.getValueAxisNames)(options, valueAxisName).forEach((axisName) => {
                scaleData[axisName] = getValueScaleData(state, labelAxisOnYAxis, scaleOptions, axisName, isCoordinateTypeChart);
            });
            if (isCoordinateTypeChart) {
                scaleData[labelAxisName] = getLabelScaleData(state, labelAxisOnYAxis, scaleOptions, labelAxisName);
            }
            state.scale = scaleData;
        },
    },
    observe: {
        updateScale() {
            this.dispatch('setScale');
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (scale);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/seriesData.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/seriesData.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _category__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./category */ "./node_modules/@toast-ui/chart/dist/esm/store/category.js");
/* harmony import */ var _helpers_coordinate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/coordinate */ "./node_modules/@toast-ui/chart/dist/esm/helpers/coordinate.js");
/* harmony import */ var _helpers_range__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/range */ "./node_modules/@toast-ui/chart/dist/esm/helpers/range.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../message */ "./node_modules/@toast-ui/chart/dist/esm/message.js");
/* harmony import */ var _helpers_pieSeries__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/pieSeries */ "./node_modules/@toast-ui/chart/dist/esm/helpers/pieSeries.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./store */ "./node_modules/@toast-ui/chart/dist/esm/store/store.js");







function initRange(series, categories) {
    let rawCategoriesLength;
    if (categories) {
        rawCategoriesLength = Array.isArray(categories) ? categories.length : categories.x.length;
    }
    else {
        rawCategoriesLength = Object.keys((0,_category__WEBPACK_IMPORTED_MODULE_0__.makeRawCategories)(series, categories)).length;
    }
    return [0, rawCategoriesLength - 1];
}
function initSelectionRange(series, options, categories) {
    var _a;
    if (!(series.line || series.area || series.column) ||
        !((_a = options.series) === null || _a === void 0 ? void 0 : _a.rangeSelectable)) {
        return;
    }
    return initRange(series, categories);
}
function initZoomRange(series, options, categories) {
    var _a;
    if (!(series.line || series.area) || !((_a = options.series) === null || _a === void 0 ? void 0 : _a.zoomable)) {
        return;
    }
    return initRange(series, categories);
}
function initShiftRange(series, options, categories) {
    var _a;
    if (!(series.line || series.area || series.column || series.heatmap) ||
        !((_a = options.series) === null || _a === void 0 ? void 0 : _a.shift)) {
        return;
    }
    return initRange(series, categories);
}
function getCoordinateDataRange(data, rawCategories, zoomRange) {
    const [zoomStart, zoomEnd] = zoomRange;
    let start, end;
    (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.range)(zoomStart, zoomEnd + 1).forEach((i) => {
        const idx = data.findIndex((datum) => (0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_2__.getCoordinateXValue)(datum).toString() === rawCategories[i]);
        if (idx !== -1) {
            if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(start)) {
                start = idx;
            }
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(start)) {
                end = Math.max(idx, (end !== null && end !== void 0 ? end : 0));
            }
        }
    });
    return [start, end];
}
function getSeriesColors(colors, colorIndex, size, isColorByCategories) {
    return isColorByCategories ? colors.slice(0, size + 1) : colors[colorIndex % colors.length];
}
function getSeriesDataInRange(data, rawCategories, chartType, zoomRange) {
    if (!zoomRange) {
        return data;
    }
    let [startIdx, endIdx] = zoomRange;
    const firstValidValue = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.getFirstValidValue)(data);
    const isCoordinateChart = chartType !== 'area' && !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(firstValidValue) && !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(firstValidValue);
    if (isCoordinateChart) {
        [startIdx, endIdx] = getCoordinateDataRange(data, rawCategories, zoomRange);
    }
    else {
        startIdx = startIdx > 1 ? startIdx - 1 : startIdx;
        endIdx = endIdx < rawCategories.length - 1 ? endIdx + 1 : endIdx;
    }
    return data.slice(startIdx, endIdx + 1);
}
function isCoordinateTypeSeries(series, chartType) {
    return ((0,_helpers_coordinate__WEBPACK_IMPORTED_MODULE_2__.isCoordinateSeries)(series) &&
        ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(chartType) || chartType === 'line' || chartType === 'scatter'));
}
function isSeriesAlreadyExist(series, seriesName, data) {
    return series[seriesName].some(({ label }) => label === data.name);
}
function isTreemapSeriesAlreadyExist(series, data) {
    return series.treemap.some(({ label }) => label === data.label);
}
function isHeatmapSeriesAlreadyExist(categories, category) {
    return (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.includes)(categories.y, category);
}
function initDisabledSeries(series) {
    const nestedPieChart = (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_3__.hasNestedPieSeries)(series);
    const disabledSeries = [];
    if (nestedPieChart) {
        series.pie.forEach(({ data }) => {
            data.forEach((datum) => {
                if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isBoolean)(datum.visible) && !datum.visible) {
                    disabledSeries.push(datum.name);
                }
            });
        });
    }
    else {
        Object.keys(series).forEach((type) => {
            series[type].forEach(({ name, visible }) => {
                if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.isBoolean)(visible) && !visible) {
                    disabledSeries.push(name);
                }
            });
        });
    }
    return disabledSeries;
}
const seriesData = {
    name: 'seriesData',
    state: ({ series, categories, options }) => ({
        rawCategories: (0,_category__WEBPACK_IMPORTED_MODULE_0__.makeRawCategories)(series, categories),
        series: Object.assign({}, series),
        selectionRange: initSelectionRange(series, options, categories),
        zoomRange: initZoomRange(series, options, categories),
        shiftRange: initShiftRange(series, options, categories),
        disabledSeries: initDisabledSeries(series),
    }),
    action: {
        setSeriesData({ state, initStoreState }) {
            const rawSeries = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(initStoreState.series);
            const { disabledSeries, theme, zoomRange, rawCategories } = state;
            const newSeriesData = {};
            let colorIndex = 0;
            Object.keys(rawSeries).forEach((seriesName) => {
                var _a, _b, _c;
                const { colors, iconTypes } = theme.series[seriesName];
                let originSeriesData = rawSeries[seriesName].map((series) => {
                    const isColorByCategories = !!series.colorByCategories;
                    const size = isColorByCategories ? rawCategories.length : 1;
                    const color = colors
                        ? getSeriesColors(colors, colorIndex, size, isColorByCategories)
                        : '';
                    colorIndex += size;
                    return Object.assign(Object.assign({}, series), { rawData: series.data, data: getSeriesDataInRange(series.data, rawCategories, seriesName, zoomRange), color });
                });
                if (seriesName === 'scatter') {
                    originSeriesData = originSeriesData.map((series, idx) => (Object.assign(Object.assign({}, series), { iconType: iconTypes ? iconTypes[idx] : 'circle' })));
                }
                const seriesCount = originSeriesData.length;
                const seriesGroupCount = (_c = (_b = (_a = originSeriesData[0]) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.length, (_c !== null && _c !== void 0 ? _c : 0));
                const data = originSeriesData.filter(({ name }) => !disabledSeries.includes(name));
                newSeriesData[seriesName] = {
                    seriesCount,
                    seriesGroupCount,
                    data,
                    colors,
                };
            });
            (0,_store__WEBPACK_IMPORTED_MODULE_4__.extend)(state.series, newSeriesData);
        },
        disableSeries({ state }, name) {
            state.disabledSeries.push(name);
            this.notify(state, 'disabledSeries');
            if (state.series.bullet) {
                this.dispatch('removeCategoryByName', name);
            }
        },
        enableSeries({ state }, name) {
            const index = state.disabledSeries.findIndex((disabled) => disabled === name);
            state.disabledSeries.splice(index, 1);
            this.notify(state, 'disabledSeries');
            if (state.series.bullet) {
                state.categories = state.series.bullet.data.map(({ name: seriesName }) => seriesName);
                this.notify(state, 'axes');
            }
        },
        selection({ state }, rangeCategories) {
            const rawCategories = state.rawCategories;
            state.selectionRange = rangeCategories.map((rangeCategory) => rawCategories.findIndex((category) => category === rangeCategory));
            this.notify(state, 'selectionRange');
        },
        zoom({ state }, rangeCategories) {
            const rawCategories = state.rawCategories;
            state.zoomRange = rangeCategories.map((rangeCategory) => rawCategories.findIndex((category) => category === rangeCategory));
            this.notify(state, 'zoomRange');
        },
        resetZoom({ state, initStoreState }) {
            const { series, options } = initStoreState;
            const rawCategories = state.rawCategories;
            state.zoomRange = initZoomRange(series, options, rawCategories);
            this.notify(state, 'zoomRange');
        },
        addData({ state, initStoreState }, { data, category, chartType }) {
            const { series } = initStoreState;
            const coordinateChart = isCoordinateTypeSeries(state.series, chartType);
            let { categories } = initStoreState;
            categories = series.heatmap ? categories.x : categories;
            if (category && Array.isArray(categories)) {
                const isExist = categories.some((c) => c === category);
                if (!isExist) {
                    categories.push(category);
                    if (Array.isArray(state.shiftRange)) {
                        const [start, end] = state.shiftRange;
                        state.shiftRange = [start + 1, end + 1];
                    }
                }
            }
            if (chartType) {
                series[chartType].forEach((datum, idx) => {
                    datum.data.push(data[idx]);
                });
            }
            else {
                const [seriesName] = Object.keys(initStoreState.series);
                series[seriesName].forEach((datum, idx) => {
                    datum.data.push(data[idx]);
                });
            }
            this.notify(state, 'series');
            this.notify(state, 'rawCategories');
            if (Array.isArray(state.zoomRange)) {
                this.dispatch('resetZoom');
            }
            if (coordinateChart) {
                this.dispatch('initCategory');
            }
        },
        addSeries({ state, initStoreState }, { data, chartType, category, }) {
            const { series, categories } = initStoreState;
            const coordinateChart = isCoordinateTypeSeries(state.series, chartType);
            const seriesName = chartType || Object.keys(series)[0];
            const isExist = isSeriesAlreadyExist(series, seriesName, data);
            if (!isExist) {
                series[seriesName].push(data);
                if (Array.isArray(categories) && category) {
                    categories.push(category);
                }
            }
            this.dispatch('initThemeState');
            this.dispatch('initLegendState');
            this.notify(state, 'series');
            if (coordinateChart || seriesName === 'bullet') {
                this.dispatch('initCategory');
            }
        },
        addHeatmapSeries({ state, initStoreState }, { data, category }) {
            const { series, categories } = initStoreState;
            const isExist = isHeatmapSeriesAlreadyExist(categories, category);
            if (!isExist) {
                series.heatmap.push({ data, yCategory: category });
            }
            if (!isExist && category) {
                categories.y.push(category);
                this.notify(state, 'rawCategories');
            }
            this.notify(state, 'series');
            this.dispatch('initThemeState');
            this.dispatch('initLegendState');
        },
        addTreemapSeries({ state, initStoreState }, { data }) {
            const { series } = initStoreState;
            const isExist = isTreemapSeriesAlreadyExist(series, data);
            if (!isExist) {
                series.treemap.push(data);
            }
            this.notify(state, 'series');
            this.notify(state, 'treemapSeries');
            this.dispatch('initThemeState');
            this.dispatch('initLegendState');
        },
        setData({ state, initStoreState }, { series, categories }) {
            initStoreState.series = series;
            const isNestedPieChart = (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_3__.hasNestedPieSeries)(series);
            if (!isNestedPieChart) {
                state.rawCategories = (0,_category__WEBPACK_IMPORTED_MODULE_0__.makeRawCategories)(series, categories);
            }
            this.dispatch('initThemeState');
            this.dispatch('initLegendState');
        },
        addOutlier({ state, initStoreState }, { seriesIndex, outliers }) {
            var _a;
            const { series } = initStoreState;
            const seriesRawData = series.boxPlot[seriesIndex];
            if (!seriesRawData) {
                throw new Error(_message__WEBPACK_IMPORTED_MODULE_5__.message.SERIES_INDEX_ERROR);
            }
            seriesRawData.outliers = [...(_a = seriesRawData.outliers, (_a !== null && _a !== void 0 ? _a : [])), ...outliers];
            this.notify(state, 'series');
        },
    },
    observe: {
        updateSeriesData() {
            this.dispatch('setSeriesData');
        },
    },
    computed: {
        isLineTypeSeriesZooming: ({ zoomRange, rawCategories }) => {
            return (0,_helpers_range__WEBPACK_IMPORTED_MODULE_6__.isZooming)(rawCategories, zoomRange);
        },
        viewRange: ({ zoomRange, shiftRange }) => {
            return zoomRange || shiftRange;
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (seriesData);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/stackSeriesData.js":
/*!************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/stackSeriesData.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isPercentStack": () => (/* binding */ isPercentStack),
/* harmony export */   "isGroupStack": () => (/* binding */ isGroupStack),
/* harmony export */   "hasPercentStackSeries": () => (/* binding */ hasPercentStackSeries),
/* harmony export */   "pickStackOption": () => (/* binding */ pickStackOption),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./store */ "./node_modules/@toast-ui/chart/dist/esm/store/store.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");


function isPercentStack(stack) {
    var _a;
    return !!(((_a = stack) === null || _a === void 0 ? void 0 : _a.type) === 'percent');
}
function isGroupStack(rawData) {
    return !Array.isArray(rawData);
}
function hasPercentStackSeries(stackSeries) {
    if (!stackSeries) {
        return false;
    }
    return Object.keys(stackSeries).some((seriesName) => isPercentStack(stackSeries[seriesName].stack));
}
function pickStackOption(options) {
    return ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.pickProperty)(options, ['series', 'stack']) ||
        (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.pickProperty)(options, ['series', 'column', 'stack']) ||
        (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.pickProperty)(options, ['series', 'area', 'stack']));
}
function makeStackData(seriesData) {
    const seriesCount = seriesData.length;
    const groupCountLengths = seriesData.map(({ rawData }) => rawData.length);
    const seriesGroupCount = Math.max(...groupCountLengths);
    const stackData = [];
    for (let i = 0; i < seriesGroupCount; i += 1) {
        const stackValues = [];
        for (let j = 0; j < seriesCount; j += 1) {
            stackValues.push(seriesData[j].rawData[i]);
        }
        stackData[i] = {
            values: stackValues,
            sum: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.sum)(stackValues),
            total: {
                positive: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.sum)(stackValues.filter((value) => value >= 0)),
                negative: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.sum)(stackValues.filter((value) => value < 0)),
            },
        };
    }
    return stackData;
}
function makeStackGroupData(seriesData) {
    const stackData = {};
    const stackGroupIds = [...new Set(seriesData.map(({ stackGroup }) => stackGroup))];
    stackGroupIds.forEach((groupId) => {
        const filtered = seriesData.filter(({ stackGroup }) => groupId === stackGroup);
        stackData[groupId] = makeStackData(filtered);
    });
    return stackData;
}
function initializeStack(stackOption) {
    if (!stackOption) {
        return;
    }
    const defaultStackOption = {
        type: 'normal',
        connector: false,
    };
    if (isStackObject(stackOption)) {
        return Object.assign(Object.assign({}, defaultStackOption), stackOption);
    }
    return defaultStackOption;
}
function isStackObject(stackOption) {
    return (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(stackOption);
}
function hasStackGrouped(seriesRawData) {
    return seriesRawData.some((rawData) => rawData.hasOwnProperty('stackGroup'));
}
function getStackDataRangeValues(stackData) {
    let values = [];
    if (Array.isArray(stackData)) {
        values = [0, ...getSumValues(stackData)];
    }
    else {
        for (const groupId in stackData) {
            if (Object.prototype.hasOwnProperty.call(stackData, groupId)) {
                values = [0, ...values, ...getSumValues(stackData[groupId])];
            }
        }
    }
    return values;
}
function getSumValues(stackData) {
    const positiveSum = stackData.map(({ total }) => total.positive);
    const negativeSum = stackData.map(({ total }) => total.negative);
    return [...negativeSum, ...positiveSum];
}
function getStackDataValues(stackData) {
    if (!isGroupStack(stackData)) {
        return stackData;
    }
    let stackDataValues = [];
    if (isGroupStack(stackData)) {
        Object.keys(stackData).forEach((groupId) => {
            stackDataValues = [...stackDataValues, ...stackData[groupId]];
        });
    }
    return stackDataValues;
}
function checkIfNegativeAndPositiveValues(stackData) {
    return {
        hasNegative: stackData.map(({ total }) => total.negative).some((total) => total < 0),
        hasPositive: stackData.map(({ total }) => total.positive).some((total) => total >= 0),
    };
}
function getScaleType(stackData, stackType, diverging) {
    const { hasPositive, hasNegative } = checkIfNegativeAndPositiveValues(stackData);
    if (stackType === 'percent') {
        if (diverging) {
            return 'divergingPercentStack';
        }
        if (hasNegative && hasPositive) {
            return 'dualPercentStack';
        }
        if (!hasNegative && hasPositive) {
            return 'percentStack';
        }
        if (hasNegative && !hasPositive) {
            return 'minusPercentStack';
        }
    }
}
function initStackSeries(series, options) {
    const stackSeries = {};
    Object.keys(series).forEach((seriesName) => {
        const chartType = seriesName;
        const stackOption = pickStackOption(options);
        if (stackOption) {
            if (!stackSeries[chartType]) {
                stackSeries[chartType] = {};
            }
            stackSeries[chartType].stack = initializeStack(stackOption);
        }
        else if (seriesName === 'radialBar') {
            stackSeries[seriesName] = { stack: true };
        }
    });
    return stackSeries;
}
const stackSeriesData = {
    name: 'stackSeriesData',
    state: ({ series, options }) => ({
        stackSeries: initStackSeries(series, options),
    }),
    action: {
        setStackSeriesData({ state }) {
            const { series, stackSeries, options } = state;
            const stackOption = pickStackOption(options);
            const newStackSeries = {};
            Object.keys(series).forEach((seriesName) => {
                var _a, _b;
                const seriesData = series[seriesName];
                const { data, seriesCount, seriesGroupCount } = seriesData;
                const isRadialBar = seriesName === 'radialBar';
                if (stackOption) {
                    if (!stackSeries[seriesName]) {
                        stackSeries[seriesName] = {};
                    }
                    stackSeries[seriesName].stack = initializeStack(stackOption);
                }
                else if (!isRadialBar) {
                    stackSeries[seriesName] = null;
                    delete stackSeries[seriesName];
                }
                const { stack } = stackSeries[seriesName] || {};
                const diverging = !!((_a = options.series) === null || _a === void 0 ? void 0 : _a.diverging);
                if (stack) {
                    const stackData = hasStackGrouped(data) ? makeStackGroupData(data) : makeStackData(data);
                    const stackType = (_b = stack.type, (_b !== null && _b !== void 0 ? _b : 'normal'));
                    const dataRangeValues = getStackDataRangeValues(stackData);
                    newStackSeries[seriesName] = {
                        data,
                        seriesCount,
                        seriesGroupCount,
                        stackData,
                        dataRangeValues,
                        scaleType: getScaleType(getStackDataValues(stackData), stackType, diverging),
                    };
                    state.stackSeries[seriesName].stackData = stackData;
                }
                (0,_store__WEBPACK_IMPORTED_MODULE_1__.extend)(state.stackSeries, newStackSeries);
            });
        },
    },
    observe: {
        updateStackSeriesData() {
            this.dispatch('setStackSeriesData');
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackSeriesData);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/store.js":
/*!**************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/store.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Store),
/* harmony export */   "extend": () => (/* binding */ extend)
/* harmony export */ });
/* harmony import */ var _reactive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reactive */ "./node_modules/@toast-ui/chart/dist/esm/store/reactive.js");
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");


class Store {
    constructor(initStoreState) {
        this.computed = {};
        this.actions = {};
        this.initStoreState = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.deepCopy)(initStoreState);
        this.setRootState({});
    }
    setRootState(state) {
        (0,_reactive__WEBPACK_IMPORTED_MODULE_1__.observable)(state);
        this.state = state;
    }
    setComputed(namePath, fn, holder = this.computed) {
        const splited = namePath.split('.');
        const key = splited.splice(splited.length - 1, 1)[0];
        const target = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.pickPropertyWithMakeup)(holder, splited);
        (0,_reactive__WEBPACK_IMPORTED_MODULE_1__.computed)(target, key, fn.bind(null, this.state, this.computed));
    }
    setWatch(namePath, fn) {
        return (0,_reactive__WEBPACK_IMPORTED_MODULE_1__.watch)(this, namePath, fn);
    }
    setAction(name, fn) {
        this.actions[name] = fn;
    }
    dispatch(name, payload, isInvisible) {
        // observe.setlayout 안에서 setLayout 액션이 실행되니까 여기서 state.layout getter가 실행되고
        // state.layout의 옵져버로 observe.setLayout이 등록된다. 여기서 무한루프
        // 즉 observe하고 안에서 특정 대상을 쓸때
        // extend(state.layout, layouts); 이런식으로 하게되면 layout의 getter실행되어
        // layout을 업데이트하려고 만든 observe를 옵저버로 등록해서 무한루프
        if (isInvisible) {
            (0,_reactive__WEBPACK_IMPORTED_MODULE_1__.invisibleWork)(() => {
                // console.log('dispatch', name, ...args);
                this.actions[name].call(this, this, payload);
                // console.log('dispatch end', name);
            });
        }
        else {
            this.actions[name].call(this, this, payload);
        }
    }
    observe(fn) {
        return (0,_reactive__WEBPACK_IMPORTED_MODULE_1__.observe)(fn.bind(this, this.state, this.computed));
    }
    observable(target) {
        return (0,_reactive__WEBPACK_IMPORTED_MODULE_1__.observable)(target);
    }
    notifyByPath(namePath) {
        (0,_reactive__WEBPACK_IMPORTED_MODULE_1__.notifyByPath)(this, namePath);
    }
    notify(target, key) {
        (0,_reactive__WEBPACK_IMPORTED_MODULE_1__.notify)(target, key);
    }
    setModule(name, param) {
        if (!param) {
            param = name;
            name = param.name;
        }
        if (param.state) {
            const moduleState = typeof param.state === 'function' ? param.state(this.initStoreState) : param.state;
            extend(this.state, moduleState);
        }
        if (param.computed) {
            (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.forEach)(param.computed, (item, key) => {
                this.setComputed(key, item);
            });
        }
        if (param.watch) {
            (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.forEach)(param.watch, (item, key) => {
                this.setWatch(key, item);
            });
        }
        if (param.action) {
            (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.forEach)(param.action, (item, key) => {
                this.setAction(key, item);
            });
        }
        if (param.observe) {
            (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.forEach)(param.observe, (item) => {
                this.observe(item);
            });
        }
    }
    setValue(target, key, source) {
        extend(target, {
            [key]: source,
        });
    }
}
function extend(target, source) {
    const newItems = {};
    for (const k in source) {
        if (!source.hasOwnProperty(k)) {
            continue;
        }
        if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(target[k])) {
            if (typeof source[k] === 'object' && !Array.isArray(source[k])) {
                extend(target[k], source[k]);
            }
            else {
                target[k] = source[k];
            }
        }
        else {
            newItems[k] = source[k];
        }
    }
    if (Object.keys(newItems).length) {
        (0,_reactive__WEBPACK_IMPORTED_MODULE_1__.extend)(target, newItems);
    }
}


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/theme.js":
/*!**************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/theme.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");
/* harmony import */ var _helpers_pieSeries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/pieSeries */ "./node_modules/@toast-ui/chart/dist/esm/helpers/pieSeries.js");
/* harmony import */ var _helpers_theme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/theme */ "./node_modules/@toast-ui/chart/dist/esm/helpers/theme.js");



function getCommonSeriesOptions(options, series, isNestedPieChart) {
    var _a, _b;
    const theme = (_a = options) === null || _a === void 0 ? void 0 : _a.theme;
    if (!((_b = theme) === null || _b === void 0 ? void 0 : _b.series)) {
        return {};
    }
    const seriesNames = isNestedPieChart ? (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_0__.getNestedPieChartAliasNames)(series) : Object.keys(series);
    return seriesNames.reduce((acc, seriesName) => {
        delete acc[seriesName];
        return acc;
    }, Object.assign({}, theme.series));
}
function getThemeAppliedSecondaryYAxis(options) {
    var _a, _b, _c;
    const theme = Object.assign({}, options.theme);
    if (!Array.isArray(theme.yAxis)) {
        return theme;
    }
    const axisTitleTheme = (0,_helpers_theme__WEBPACK_IMPORTED_MODULE_1__.makeAxisTitleTheme)((_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.theme) === null || _b === void 0 ? void 0 : _b.chart) === null || _c === void 0 ? void 0 : _c.fontFamily);
    const yAxis = theme.yAxis.map((yAxisTheme) => (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.deepMergedCopy)({ title: Object.assign({}, axisTitleTheme) }, Object.assign({}, yAxisTheme)));
    return Object.assign(Object.assign({}, theme), { yAxis });
}
function getThemeOptionsWithSeriesName(options, series, commonSeriesOptions, isNestedPieChart) {
    var _a;
    const theme = getThemeAppliedSecondaryYAxis(options);
    if (!((_a = theme) === null || _a === void 0 ? void 0 : _a.series)) {
        return Object.assign({}, theme);
    }
    const seriesTheme = Object.assign(Object.assign({}, theme), { series: {} });
    const seriesNames = Object.keys(series);
    const isComboChart = seriesNames.length > 1;
    if (isNestedPieChart) {
        const aliasNames = (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_0__.getNestedPieChartAliasNames)(series);
        seriesTheme.series = {
            pie: aliasNames.reduce((acc, aliasName) => {
                var _a;
                return (Object.assign(Object.assign({}, acc), { [aliasName]: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.deepMergedCopy)((_a = theme.series) === null || _a === void 0 ? void 0 : _a[aliasName], (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.omit)(commonSeriesOptions, 'colors')) }));
            }, {}),
        };
    }
    else if (isComboChart) {
        seriesTheme.series = Object.assign({}, seriesNames.reduce((acc, seriesName) => {
            var _a;
            return (Object.assign(Object.assign({}, acc), { [seriesName]: (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.deepMergedCopy)((_a = theme.series) === null || _a === void 0 ? void 0 : _a[seriesName], (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.omit)(commonSeriesOptions, 'colors')) }));
        }, {}));
    }
    else {
        seriesTheme.series = {
            [seriesNames[0]]: theme.series,
        };
    }
    return seriesTheme;
}
function setColors(theme, series, commonSeriesOptions, isNestedPieChart, categories) {
    var _a, _b;
    let index = 0;
    const commonColorsOption = [
        ...(_b = (_a = commonSeriesOptions) === null || _a === void 0 ? void 0 : _a.colors, (_b !== null && _b !== void 0 ? _b : [])),
        ..._helpers_theme__WEBPACK_IMPORTED_MODULE_1__.defaultSeriesTheme.colors,
    ];
    const themeNames = isNestedPieChart ? (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_0__.getNestedPieChartAliasNames)(series) : Object.keys(series);
    themeNames.forEach((name, idx) => {
        var _a;
        const themeSeries = series[name] || [];
        const filteredSeries = themeSeries.filter((chartSeries) => chartSeries.colorByCategories);
        const hasColorByCategories = filteredSeries.length > 0;
        let size;
        if (isNestedPieChart) {
            size = series.pie[idx].data.length;
        }
        else if (hasColorByCategories) {
            const rejectedSeries = themeSeries.filter((chartSeries) => !chartSeries.colorByCategories);
            size = rejectedSeries.length + categories.length;
        }
        else {
            size = series[name].length;
        }
        const target = isNestedPieChart ? theme.series.pie : theme.series;
        if (!((_a = target[name]) === null || _a === void 0 ? void 0 : _a.colors)) {
            target[name] = Object.assign(Object.assign({}, target[name]), { colors: commonColorsOption.slice(index, index + size) });
            index += size;
        }
    });
}
function setPlot(theme) {
    ['vertical', 'horizontal'].reduce((acc, cur) => {
        if (!acc[cur]) {
            acc[cur] = { lineColor: acc.lineColor };
        }
        return acc;
    }, theme.plot);
}
function checkAnchorPieSeriesOption(options, series, alias) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    return {
        hasOuterAnchor: !!series.pie && ((_d = (_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b[alias]) === null || _c === void 0 ? void 0 : _c.dataLabels) === null || _d === void 0 ? void 0 : _d.anchor) === 'outer',
        hasOuterAnchorPieSeriesName: !!series.pie && ((_j = (_h = (_g = (_f = (_e = options) === null || _e === void 0 ? void 0 : _e.series) === null || _f === void 0 ? void 0 : _f[alias]) === null || _g === void 0 ? void 0 : _g.dataLabels) === null || _h === void 0 ? void 0 : _h.pieSeriesName) === null || _j === void 0 ? void 0 : _j.anchor) === 'outer',
    };
}
function getTheme(options, series, categories) {
    var _a, _b, _c;
    const isNestedPieChart = (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_0__.hasNestedPieSeries)(series);
    const commonSeriesOptions = getCommonSeriesOptions(options, series, isNestedPieChart);
    let pieSeriesOuterAnchors = {
        hasOuterAnchor: (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_0__.hasOuterDataLabel)(options, series),
        hasOuterAnchorPieSeriesName: (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_0__.hasOuterPieSeriesName)(options, series),
    };
    if (isNestedPieChart) {
        const aliasNames = (0,_helpers_pieSeries__WEBPACK_IMPORTED_MODULE_0__.getNestedPieChartAliasNames)(series);
        pieSeriesOuterAnchors = aliasNames.reduce((acc, cur) => (Object.assign(Object.assign({}, acc), { [cur]: checkAnchorPieSeriesOption(options, series, cur) })), {});
    }
    const globalFontFamily = (_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.theme) === null || _b === void 0 ? void 0 : _b.chart) === null || _c === void 0 ? void 0 : _c.fontFamily;
    const theme = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_2__.deepMergedCopy)((0,_helpers_theme__WEBPACK_IMPORTED_MODULE_1__.getDefaultTheme)(series, pieSeriesOuterAnchors, globalFontFamily, isNestedPieChart), getThemeOptionsWithSeriesName(options, series, commonSeriesOptions, isNestedPieChart));
    if (!series.heatmap) {
        setColors(theme, series, commonSeriesOptions, isNestedPieChart, categories);
    }
    setPlot(theme);
    return theme;
}
const theme = {
    name: 'theme',
    state: ({ options, series, categories }) => ({
        theme: getTheme(options, series, categories),
    }),
    action: {
        initThemeState({ state, initStoreState }) {
            state.theme = getTheme(state.options, initStoreState.series, initStoreState.categories);
        },
    },
    observe: {
        updateTheme() {
            this.dispatch('initThemeState');
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (theme);


/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/esm/store/treemapSeriesData.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/esm/store/treemapSeriesData.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TREEMAP_ROOT_ID": () => (/* binding */ TREEMAP_ROOT_ID),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/utils */ "./node_modules/@toast-ui/chart/dist/esm/helpers/utils.js");

const TREEMAP_ID_PREFIX = '__TOAST_UI_TREEMAP';
const TREEMAP_ROOT_ID = `${TREEMAP_ID_PREFIX}_ROOT`;
function makeTreeModel(series, indexes, depth, parentId) {
    var _a;
    const idx = (0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.last)(indexes);
    const id = parentId ? `${parentId}_${idx}` : `${TREEMAP_ID_PREFIX}_${idx}`;
    const { colorValue } = series;
    const models = [
        {
            label: series.label,
            hasChild: !!series.children,
            id,
            indexes,
            parentId: parentId ? parentId : TREEMAP_ROOT_ID,
            depth,
            data: (_a = series.data, (_a !== null && _a !== void 0 ? _a : 0)),
            colorValue,
        },
    ];
    if (series.children) {
        series.children.forEach((child, childIdx) => {
            if (!(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNull)(child.data)) {
                models.push(...makeTreeModel(child, [...indexes, childIdx], depth + 1, id));
            }
        });
    }
    return models;
}
function setParentSeriesData(treemapSeries) {
    treemapSeries.forEach(({ parentId, data }) => {
        if (parentId !== TREEMAP_ROOT_ID) {
            treemapSeries.find(({ id }) => id === parentId).data += data;
        }
    });
}
function setParentColorValue(treemapSeries) {
    treemapSeries.forEach((datum) => {
        const { id, colorValue } = datum;
        if ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(colorValue)) {
            const series = treemapSeries.filter(({ parentId }) => parentId === id);
            const totalColorValue = series.reduce((acc, cur) => {
                return acc + ((0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(cur.colorValue) ? 0 : cur.colorValue);
            }, 0);
            datum.colorValue = totalColorValue / series.length;
        }
    });
}
function setRatio(treemapSeries) {
    const rootTotal = treemapSeries
        .filter(({ parentId }) => parentId === TREEMAP_ROOT_ID)
        .reduce((acc, { data }) => acc + data, 0);
    treemapSeries.forEach((series) => {
        const total = series.parentId === TREEMAP_ROOT_ID
            ? rootTotal
            : treemapSeries.find(({ id }) => id === series.parentId).data;
        series.ratio = series.data / total;
    });
}
function makeTreemapSeries(series, options) {
    var _a;
    if (!series.treemap) {
        return [];
    }
    const treemapSeries = series.treemap.data
        .filter((datum) => !(0,_helpers_utils__WEBPACK_IMPORTED_MODULE_0__.isNull)(datum.data))
        .map((datum, idx) => makeTreeModel(datum, [idx], 0))
        .flatMap((s) => s)
        .sort((a, b) => b.depth - a.depth);
    setParentSeriesData(treemapSeries);
    setRatio(treemapSeries);
    if ((_a = options.series) === null || _a === void 0 ? void 0 : _a.useColorValue) {
        setParentColorValue(treemapSeries);
    }
    return treemapSeries;
}
const treemapSeriesData = {
    name: 'treemapSeriesData',
    state: () => ({
        treemapSeries: [],
    }),
    action: {
        setTreemapSeriesData({ state }) {
            state.treemapSeries = makeTreemapSeries(state.series, state.options);
        },
    },
    observe: {
        updateTreemapSeriesData() {
            this.dispatch('setTreemapSeriesData');
        },
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (treemapSeriesData);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/@toast-ui/chart/dist/toastui-chart.min.css":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/@toast-ui/chart/dist/toastui-chart.min.css ***!
  \*******************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/*!\n * TOAST UI Chart 4th Edition\n * @version 4.6.1 | Wed Dec 21 2022\n * @author NHN Cloud. FE Development Lab <dl_javascript@nhn.com>\n * @license MIT\n */.toastui-chart-wrapper{height:100%;position:relative;width:100%}.toastui-chart-export-menu{background:#fff;box-sizing:border-box;font-family:Arial,sans-serif;left:0;position:absolute;top:0;user-select:none}.toastui-chart-export-menu-title{box-sizing:inherit;height:34px;margin:0;padding:10px;width:140px}.toastui-chart-export-menu-btn-wrapper{height:76px;width:100%}.toastui-chart-export-menu-btn{background:transparent;border:none;color:inherit;cursor:pointer;float:left;font-family:inherit;height:50%;padding:12px 3px;width:50%}.toastui-chart-export-menu-btn:hover{font-weight:700}.toastui-chart-export-menu-btn:nth-child(3){border-bottom-left-radius:inherit}.toastui-chart-export-menu-btn:nth-child(4){border-bottom-right-radius:inherit}.toastui-chart-tooltip-container{left:0;pointer-events:none;position:absolute;top:0;user-select:none}.toastui-chart-tooltip{box-sizing:border-box;display:flex;flex-direction:column;min-width:150px}.toastui-chart-tooltip-category{border-bottom:1px solid rgba(0,0,0,.1);padding:8px 15px}.toastui-chart-tooltip-series-wrapper{display:flex;flex-direction:column;padding:13px 15px}.toastui-chart-tooltip-series{display:flex;justify-content:space-between;width:100%}.toastui-chart-series-name{align-items:center;display:flex;line-height:10px}.toastui-chart-series-name .toastui-chart-icon,.toastui-chart-tooltip-series .toastui-chart-icon{display:inline-block;height:10px;margin-right:8px;width:10px}.toastui-chart-series-name .toastui-chart-name{white-space:nowrap}.toastui-chart-series-value{margin-left:10px;white-space:nowrap}.toastui-chart-tooltip-series-wrapper .toastui-chart-tooltip-title{padding:8px 0 5px}.toastui-chart-tooltip-series-wrapper .toastui-chart-tooltip-title:first-child{padding-top:0}", "",{"version":3,"sources":["webpack://./node_modules/@toast-ui/chart/dist/toastui-chart.min.css"],"names":[],"mappings":"AAAA;;;;;EAKE,CAAC,uBAAuB,WAAW,CAAC,iBAAiB,CAAC,UAAU,CAAC,2BAA2B,eAAe,CAAC,qBAAqB,CAAC,4BAA4B,CAAC,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,gBAAgB,CAAC,iCAAiC,kBAAkB,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,uCAAuC,WAAW,CAAC,UAAU,CAAC,+BAA+B,sBAAsB,CAAC,WAAW,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,mBAAmB,CAAC,UAAU,CAAC,gBAAgB,CAAC,SAAS,CAAC,qCAAqC,eAAe,CAAC,4CAA4C,iCAAiC,CAAC,4CAA4C,kCAAkC,CAAC,iCAAiC,MAAM,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,KAAK,CAAC,gBAAgB,CAAC,uBAAuB,qBAAqB,CAAC,YAAY,CAAC,qBAAqB,CAAC,eAAe,CAAC,gCAAgC,sCAAsC,CAAC,gBAAgB,CAAC,sCAAsC,YAAY,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,8BAA8B,YAAY,CAAC,6BAA6B,CAAC,UAAU,CAAC,2BAA2B,kBAAkB,CAAC,YAAY,CAAC,gBAAgB,CAAC,iGAAiG,oBAAoB,CAAC,WAAW,CAAC,gBAAgB,CAAC,UAAU,CAAC,+CAA+C,kBAAkB,CAAC,4BAA4B,gBAAgB,CAAC,kBAAkB,CAAC,mEAAmE,iBAAiB,CAAC,+EAA+E,aAAa","sourcesContent":["/*!\n * TOAST UI Chart 4th Edition\n * @version 4.6.1 | Wed Dec 21 2022\n * @author NHN Cloud. FE Development Lab <dl_javascript@nhn.com>\n * @license MIT\n */.toastui-chart-wrapper{height:100%;position:relative;width:100%}.toastui-chart-export-menu{background:#fff;box-sizing:border-box;font-family:Arial,sans-serif;left:0;position:absolute;top:0;user-select:none}.toastui-chart-export-menu-title{box-sizing:inherit;height:34px;margin:0;padding:10px;width:140px}.toastui-chart-export-menu-btn-wrapper{height:76px;width:100%}.toastui-chart-export-menu-btn{background:transparent;border:none;color:inherit;cursor:pointer;float:left;font-family:inherit;height:50%;padding:12px 3px;width:50%}.toastui-chart-export-menu-btn:hover{font-weight:700}.toastui-chart-export-menu-btn:nth-child(3){border-bottom-left-radius:inherit}.toastui-chart-export-menu-btn:nth-child(4){border-bottom-right-radius:inherit}.toastui-chart-tooltip-container{left:0;pointer-events:none;position:absolute;top:0;user-select:none}.toastui-chart-tooltip{box-sizing:border-box;display:flex;flex-direction:column;min-width:150px}.toastui-chart-tooltip-category{border-bottom:1px solid rgba(0,0,0,.1);padding:8px 15px}.toastui-chart-tooltip-series-wrapper{display:flex;flex-direction:column;padding:13px 15px}.toastui-chart-tooltip-series{display:flex;justify-content:space-between;width:100%}.toastui-chart-series-name{align-items:center;display:flex;line-height:10px}.toastui-chart-series-name .toastui-chart-icon,.toastui-chart-tooltip-series .toastui-chart-icon{display:inline-block;height:10px;margin-right:8px;width:10px}.toastui-chart-series-name .toastui-chart-name{white-space:nowrap}.toastui-chart-series-value{margin-left:10px;white-space:nowrap}.toastui-chart-tooltip-series-wrapper .toastui-chart-tooltip-title{padding:8px 0 5px}.toastui-chart-tooltip-series-wrapper .toastui-chart-tooltip-title:first-child{padding-top:0}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {



/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";

      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }

      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }

      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }

      content += cssWithMappingToString(item);

      if (needLayer) {
        content += "}";
      }

      if (item[2]) {
        content += "}";
      }

      if (item[4]) {
        content += "}";
      }

      return content;
    }).join("");
  }; // import a list of modules into the list


  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }

      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }

      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }

      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {



module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
  }

  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/@toast-ui/chart/dist/toastui-chart.min.css":
/*!*****************************************************************!*\
  !*** ./node_modules/@toast-ui/chart/dist/toastui-chart.min.css ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_toastui_chart_min_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./toastui-chart.min.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/@toast-ui/chart/dist/toastui-chart.min.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_toastui_chart_min_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_toastui_chart_min_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_toastui_chart_min_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_toastui_chart_min_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {



var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {



var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ }),

/***/ "widgets":
/*!******************************!*\
  !*** external "HTMLWidgets" ***!
  \******************************/
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE_widgets__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!********************************!*\
  !*** ./srcjs/widgets/chart.js ***!
  \********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var widgets__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! widgets */ "widgets");
/* harmony import */ var widgets__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(widgets__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _toast_ui_chart__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toast-ui/chart */ "./node_modules/@toast-ui/chart/dist/esm/index.js");
/* harmony import */ var _toast_ui_chart_dist_toastui_chart_min_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @toast-ui/chart/dist/toastui-chart.min.css */ "./node_modules/@toast-ui/chart/dist/toastui-chart.min.css");




HTMLWidgets.widget({
  name: "chart",

  type: "output",

  factory: function (el, width, height) {
    var chart;

    return {
      renderValue: function (x) {
        var type = x.config.type;
        var data = x.config.data;
        var options = x.config.options;
        if (typeof chart !== "undefined") {
          chart.destroy();
        }
        chart = _toast_ui_chart__WEBPACK_IMPORTED_MODULE_2__["default"][type]({ el, data, options });
      },

      getWidget: function () {
        return chart;
      },

      resize: function (width, height) {
        /*
        chart.updateOptions({
          chart: {width: width, height: height}
        });
        */
      },
    };
  },
});

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,